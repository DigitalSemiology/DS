# -*- coding: utf-8 -*-
"""
Created on Sat Jun 29 14:38:53 2019

@author: maric
"""

import pickle
import sys
import wx
from datetime import datetime
from datetime import date
import os
import copy
import time

def ds_introduction():
    global ev_yesno_1, ev_yesno_2, wx_text, videoplayer, sametime
    global ev_timing, overwrite_vs_edit, file_exist, eventdate, eventstart, eventend
    global event_certainity, pnes_chance, pnpne_chance, y_n_cognitest, sleep_chance
    global ev_1, ev_2, ev_3, ev_4, ev_5, ev_6, ev_7, ev_8, ev_9, ev_10, ev_11, postict, event0, event1, event2, event3, event4
    global event5, event6, event7, event8, event9, event10, general_add_on, overwrite_vs_edit
    global software_user_dialogue, software_user_dialogue_1, eeg, ds_starter, ds_starter_x
    ev_1=''
    ev_2=''
    ev_3=''
    ev_4=''
    ev_5=''
    ev_6=''
    ev_7=''
    ev_8=''
    ev_9=''
    ev_10=''
    ev_11=''
    postict=''
    event0=0
    event1=0
    event2=0
    event3=0
    event4=0
    event5=0
    event6=0
    event7=0
    event8=0
    event9=0
    event10=0
    eventdate=''
    eventstart=''
    eventend=''
    event_certainity=''
    pnes_chance=''
    pnpne_chance=''
    y_n_cognitest=''
    sleep_chance=''
    general_add_on=''
    overwrite_vs_edit=''
    postict_events=''
    final_free_text=''
    ds_starter_x=''
    eeg=''
    recordingstart=''
    # Introducing the name of interpriter.
    today = date.today()
    print("Software:\nToday's date:", today)
    software_user_dialogue=''
    software_user_dialogue_1='''\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n
    Software:\nToday's date:'''+str(today)+'''\n'''   
    nm=''
    wx_text='''Dear Colleague!
Welcome to Digital Semiology!
Please write your name in the row above and tnen press this button'''            
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print('\n'+current_time)
    print ("Software:\n" +wx_text+"\n" )
    software_user_dialogue_1+="\n"+current_time+"\nSoftware:\n"+wx_text+"\n"
    if __name__ == '__main__':
        app = wx.App()
        frame = MyFrame_write()
        app.MainLoop()
    app=[]; app = wx.App(None)
    del app
    nm=value
    print (nm+"\n")
    software_user_dialogue_1+=value+"\n"
    #--------------------------------------------------------------------------------------------------------------------------------------
    # Introducing the ictal episode code
    ictal_episode_code = ''
    wx_text=nm+''', please, write the CODE of ictal episode in the window above and then press this button '''
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print(current_time)
    print ("Software:\n" +wx_text+"\n" )
    software_user_dialogue_1+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
    while ictal_episode_code == '':
        if __name__ == '__main__':
            app = wx.App()
            frame = MyFrame_write()
            app.MainLoop()
        app=[]; app = wx.App(None)
        del app        
        ictal_episode_code=value        
        print (ictal_episode_code+"\n")
        software_user_dialogue_1+=value+"\n"
        if ictal_episode_code == '':
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
            software_user_dialogue_1+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
        text_file=open("ictal_episode_code.txt", "w", encoding='utf-8')
        text_file.write(ictal_episode_code)
        text_file.close()
    #---------------------------------------------------------------------------------------------------------------
    global ictus, report
    filename='ictal_episode_' + ictal_episode_code +'.dat'
    try:
        f=open(filename, 'rb') 
        ds_starter = pickle.load(f)
        ictus=pickle.load(f)
        report=pickle.load(f)
        software_user_dialogue=pickle.load(f)
        f.close()
        file_exist=1
        print (report)
        software_user_dialogue=software_user_dialogue+software_user_dialogue_1
        ds_starter_x=copy.copy(ds_starter)
        del ds_starter
    except:
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('Software:\nThe file '+filename+' does not exist')
        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
        file_exist=0
        software_user_dialogue=software_user_dialogue_1
    global ev_ovewrite_edit_1, ev_ovewrite_edit_2, ev_ovewrite_edit_3
    ev_ovewrite_edit_1=''
    ev_ovewrite_edit_2=''
    ev_ovewrite_edit_3=''    
    if file_exist==1:
        wx_text=nm+''', please select, whether you want
        to overwrite file '''+filename+''', or to edit it'''
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("Software:\n" +wx_text+"\n")
        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
        if __name__ == '__main__':
            app = wx.App()
            frame = MyFrame_overwrite_edit_file()    
            app.MainLoop()
        app=[]; app = wx.App(None)
        del app
        if ev_ovewrite_edit_1==1:
            overwrite_vs_edit=0
        if ev_ovewrite_edit_2==1:
            overwrite_vs_edit=1
        if ev_ovewrite_edit_3==1:
            print (nm+', you closed Digital Semiology session without saving file')
            sys.exit()
    
        if overwrite_vs_edit==0:
            ds_starter_x=''
            del ictus
            del report
    global ict
    del filename
    if overwrite_vs_edit==1:
        ict=ictus              
    else:
        ict=[]
    
    if file_exist==0 or overwrite_vs_edit==0:
        wx_text=nm+''', please select the mode: "General view" or "Add-on"'''
        global ev_mode_1, ev_mode_2, ev_mode_3
        ev_mode_1=''
        ev_mode_2=''
        ev_mode_3=''
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("Software:\n" +wx_text+"\n")
        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"    
        if __name__ == '__main__':
            app = wx.App()
            frame = MyFrame_general_vs_add_on()    
            app.MainLoop()
        app=[]; app = wx.App(None)
        del app
        if ev_mode_1==1:
            general_add_on=1
        if ev_mode_2==1:
            general_add_on=2
        if ev_mode_3==1:
            print (nm+', you closed Digital Semiology session without saving file')
            sys.exit()
    # Machine decisions on or off.
    wx_text=nm+''', if you want that Digital Semiology will
                  make decisions, push "yes", if not -"no"'''
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print(current_time)
    print("Software:\n" +wx_text+"\n")
    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
    machine_decisions=''
    ev_yesno_1=''
    ev_yesno_2=''
    global ev_yesno_3
    ev_yesno_3=''
    if __name__ == '__main__':
        app = wx.App()
        frame = MyFrame_yes_no_orexit()    
        app.MainLoop()
    app=[]; app = wx.App(None)
    del app
    wx_text=''
    if ev_yesno_1=='y':        
        machine_decisions=1
    if ev_yesno_2=='n':        
        machine_decisions=0
    if ev_yesno_3==1:
        print (nm+', you closed Digital Semiology session without saving file')
        sys.exit()
    #---------------------------------------------------------------------------------------------------------------
    # Video player use.
    wx_text=nm+''', if you want to use the video-player,
                  push "yes", if not -"no"'''
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print(current_time)
    print("Software:\n" +wx_text+"\n")
    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
    videoplayer=''
    ev_yesno_1=''
    ev_yesno_2=''    
    ev_yesno_3=''
    if __name__ == '__main__':
        app = wx.App()
        frame = MyFrame_yes_no_orexit()    
        app.MainLoop()
    app=[]; app = wx.App(None)
    del app
    wx_text=''
    if ev_yesno_1=='y':        
        videoplayer=1
        text_file=open("video-player_go_no_go.txt", "w", encoding='utf-8')
        text_file.write(str(videoplayer))
        text_file.close()                 
    if ev_yesno_2=='n':
        videoplayer=0
        text_file=open("video-player_go_no_go.txt", "w", encoding='utf-8')
        text_file.write(str(videoplayer))
        text_file.close()
    if ev_yesno_3==1:
        print (nm+', you closed Digital Semiology session without saving file')
        sys.exit()
     
    #-----------------------------------------------------------------------------------------
    wx_text=nm+''', if you see EEG, when interpreting video of this
                  ictal episode, push "yes", if not -"no"'''
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print(current_time)
    print("Software:\n" +wx_text+"\n")
    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"    
    ev_yesno_1=''
    ev_yesno_2=''    
    ev_yesno_3=''
    if __name__ == '__main__':
        app = wx.App()
        frame = MyFrame_yes_no_orexit()    
        app.MainLoop()
    app=[]; app = wx.App(None)
    del app
    wx_text=''
    if ev_yesno_1=='y':        
        eeg=1                         
    if ev_yesno_2=='n':
        eeg=0
    if ev_yesno_3==1:
        print (nm+', you closed Digital Semiology session without saving file')
        sys.exit()
    #--------------------------------------------------------------------------------------------------------------------------------------
    if  file_exist==0 or overwrite_vs_edit==0:
        # Introduction the date
        eventdate=''
        wx_text=nm+''', please, write the DATE of ictal episode in the form ddmmyy in the window above and then press this button'''
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("Software:\n" +wx_text+"\n")
        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
        while len (eventdate) !=6 or int(eventdate[0:2])<=0 or int(eventdate[0:2])>31 or int(eventdate[2:4])<=0 or int(eventdate[2:4])>12\
              or int(eventdate[4:])<0 or int(eventdate[4:])>99:
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_write()
                app.MainLoop()                           
            app=[]; app = wx.App(None)
            del app
            eventdate=value
            print(eventdate+'\n')
            try:
                event_date=int(eventdate)
            except:
                eventdate=''
            if len (eventdate) !=6 or int(eventdate[0:2])<=0 or int(eventdate[0:2])>31 or int(eventdate[2:4])<=0 or int(eventdate[2:4])>12\
            or int(eventdate[4:])<0 or int(eventdate[4:])>99:
              now = datetime.now()
              current_time = now.strftime("%H:%M:%S")
              print(current_time)
              print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
              software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
    
        #----------------------------------------------------------------------------------------------------------------------------------------
        # Introduction of timing of ictal episode start in hour minute second.
        eventstart=''           
        wx_text=nm+''', please, write the time of ictal episode START in the form hhmmss'''
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("Software:\n" +wx_text+"\n")
        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
        while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
            or int(eventstart[4:])<0 or int(eventstart[4:])>59:
            if videoplayer==0: 
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_write()
                    app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                eventstart=value
                print(eventstart+'\n')
            if videoplayer==1:
                offset_1=99999999
                text_file=open("intercode.txt", "w", encoding='utf-8')
                text_file.write(str(offset_1))
                text_file.close()
                ev_timing=''
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_video_player_event()    
                    app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                if ev_timing==1:
                    text_file=open("intercode.txt", "r", encoding='utf-8')
                    read_value=text_file.read(10)
                    print(read_value+'\n')
                    software_user_dialogue+=read_value+"\n"
                    text_file.close()
                    eventstart=read_value
            try:
                event_start=int(eventstart)
            except:
                eventstart=''
            if len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
        #--------------------------------------------------------------------------------------------------
        # Whether or not the time of ictal episode start and time of recording start is the same?
        wx_text=nm+''', if time in the video segment and in the whole video 
        recording is the same, push "yes", if not -"no"'''
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("Software:\n" +wx_text+"\n")
        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"         
        ev_yesno_1=''
        ev_yesno_2=''    
        ev_yesno_3=''
        if __name__ == '__main__':
            app = wx.App()
            frame = MyFrame_yes_no_orexit()    
            app.MainLoop()
        app=[]; app = wx.App(None)
        del app
        wx_text=''
        if ev_yesno_1=='y':        
            sametime=1                         
        if ev_yesno_2=='n':
            sametime=0
        if ev_yesno_3==1:
            print (nm+', you closed Digital Semiology session without saving file')
            sys.exit()
        if sametime==0:
            # Introduction of timing of recording start in hour minute second.
            recordingstart=''           
            wx_text=nm+''', please, write the time of VIDEO SEGMENT START in the form hhmmss'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
            while len (recordingstart) !=6 or int(recordingstart[0:2])<0 or int(recordingstart[0:2])>24 or int(recordingstart[2:4])<0 or int(recordingstart[2:4])>59\
                or int(recordingstart[4:])<0 or int(recordingstart[4:])>59:
                 
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    recordingstart=value
                    print(recordingstart+'\n')                                   
                    try:
                        recording_start=int(recordingstart)
                    except:
                        recordingstart=''
                    if len (recordingstart) !=6 or int(recordingstart[0:2])<0 or int(recordingstart[0:2])>24 or int(recordingstart[2:4])<0 or int(recordingstart[2:4])>59\
                        or int(recordingstart[4:])<0 or int(recordingstart[4:])>59:
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                        software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
        #----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # Definition the chance that this episode is just a baseline behavior.         
        global ev_sertainity_1, ev_sertainity_2, ev_sertainity_3, ev_sertainity_4, ev_sertainity_5, ev_save_1, ev_save_2 
        ev_sertainity_1=''
        ev_sertainity_2=''
        ev_sertainity_3=''
        ev_sertainity_4=''
        ev_sertainity_5=''
        wx_text=nm+''', please define the chance that this ictal episode is just a baseline behavior.'''
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("Software:\n" +wx_text+"\n")
        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
        if __name__ == '__main__':
            app = wx.App()
            frame = MyFrame_certainity()    
            app.MainLoop()
        app=[]; app = wx.App(None)
        del app
        wx_text=''
        if ev_sertainity_1==1:
            event_certainity=0
        if ev_sertainity_2==1:
            event_certainity=1
        if ev_sertainity_3==1:
            event_certainity=2
        if ev_sertainity_4==1:
            event_certainity=3
        if ev_sertainity_5==1:                                    
            ev_save_1=''
            ev_save_2=''
            wx_text=nm+''', plesase select: whether or not you want to save your input to the ictal episode
            interpritation during this session'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_save_file()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            if ev_save_1==1:                
                ictus=[]
                report=[]
                ds_starter=[nm, eventdate, eventstart, eeg, event_certainity, pnes_chance, pnpne_chance, y_n_cognitest,\
                int(event0), int(event1), int(event2), int(event3), int(event4), int(event5), int(event6), int(event7), int(event8,), int(event9),\
                ictal_episode_code, sleep_chance, postict, event10, machine_decisions, postict_events, final_free_text, recordingstart]
            #Saving file
                ictal_episode=Ictal(ictus,ds_starter,report)
                save_variable()                                
                wx_text=nm+''', the new file was saved, thank you for finalizing ictal episode interpretation
                Please,  push the button "Exit" to close Digital Semiology.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                global ev_exit
                ev_exit=''
                if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_exit()    
                        app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                if ev_exit==1:
                    sys.exit()
            if ev_save_2==1:                        
                print(nm+''', the new file was NOT saved''')                
                sys.exit()        
        #-----------------------------------------------------------------------------------------------------------------------------------------------------------
        # Definition  the chance that this episode is PNES 
        ev_sertainity_1=''
        ev_sertainity_2=''
        ev_sertainity_3=''
        ev_sertainity_4=''
        ev_sertainity_5=''
        wx_text=nm+''', please define the chance that this ictal episode episode is PNES.'''
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("Software:\n" +wx_text+"\n")
        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
        if __name__ == '__main__':
            app = wx.App()
            frame = MyFrame_certainity()    
            app.MainLoop()
        app=[]; app = wx.App(None)
        del app
        wx_text=''
        if ev_sertainity_1==1:
            pnes_chance=0
        if ev_sertainity_2==1:
            pnes_chance=1
        if ev_sertainity_3==1:
            pnes_chance=2
        if ev_sertainity_4==1:
            pnes_chance=3
        if ev_sertainity_5==1:                                    
            ev_save_1=''
            ev_save_2=''
            wx_text=nm+''', plesase select: whether or not you want to save your input to the ictal episode
            interpritation during this session'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_save_file()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            if ev_save_1==1:                
                ictus=[]
                report=[]
                ds_starter=[nm, eventdate, eventstart, eeg, event_certainity, pnes_chance, pnpne_chance, y_n_cognitest,\
                int(event0), int(event1), int(event2), int(event3), int(event4), int(event5), int(event6), int(event7), int(event8,), int(event9),\
                ictal_episode_code, sleep_chance, postict, event10, machine_decisions, postict_events, final_free_text, recordingstart]
            #Saving file
                ictal_episode=Ictal(ictus,ds_starter,report)
                save_variable()                                
                wx_text=nm+''', the new file was saved, thank you for finalizing ictal episode interpretation
                Please,  push the button "Exit" to close Digital Semiology.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                ev_exit=''
                if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_exit()    
                        app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                if ev_exit==1:
                    sys.exit()
            if ev_save_2==1:                        
                print(nm+''', the new file was NOT saved''')                
                sys.exit()   
    
        #------------------------------------------------------------------------------------------------------------------------------------------------------------
        # Definition  the chance that this episode is clinically significant , but it is not epileptic seizure and not PNES: patolgic non-psychogenic non-epileptic,
        #such as  REM-sleep behavior, somnambulism, akathisia and others. 
        ev_sertainity_1=''
        ev_sertainity_2=''
        ev_sertainity_3=''
        ev_sertainity_4=''
        ev_sertainity_5=''
        wx_text=nm+''', please define the chance that this ictal episode episode 
        is pathologic non-psychogenic non-epileptic.'''
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("Software:\n" +wx_text+"\n")
        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
        if __name__ == '__main__':
            app = wx.App()
            frame = MyFrame_certainity()    
            app.MainLoop()
        app=[]; app = wx.App(None)
        del app
        wx_text=''
        if ev_sertainity_1==1:
            pnpne_chance=0
        if ev_sertainity_2==1:
            pnpne_chance=1
        if ev_sertainity_3==1:
            pnpne_chance=2
        if ev_sertainity_4==1:
            pnpne_chance=3
        if ev_sertainity_5==1:                                    
            ev_save_1=''
            ev_save_2=''
            wx_text=nm+''', plesase select: whether or not you want to save your input to the ictal episode
            interpritation during this session'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_save_file()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            if ev_save_1==1:                
                ictus=[]
                report=[]
                ds_starter=[nm, eventdate, eventstart, eeg, event_certainity, pnes_chance, pnpne_chance, y_n_cognitest,\
                int(event0), int(event1), int(event2), int(event3), int(event4), int(event5), int(event6), int(event7), int(event8,), int(event9),\
                ictal_episode_code, sleep_chance, postict, event10, machine_decisions, postict_events, final_free_text, recordingstart]
            #Saving file
                ictal_episode=Ictal(ictus,ds_starter,report)
                save_variable()                                
                wx_text=nm+''', the new file was saved, thank you for finalizing ictal episode interpretation
                Please,  push the button "Exit" to close Digital Semiology.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                ev_exit=''
                if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_exit()    
                        app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                if ev_exit==1:
                    sys.exit()
            if ev_save_2==1:                                        
                print(nm+''', the new file was NOT saved''')                
                sys.exit()        
        
        #-----------------------------------------------------------------------------------------------------------------------------------------------------------
        # Definition the chance that this ictal episode started from sleep
        ev_sertainity_1=''
        ev_sertainity_2=''
        ev_sertainity_3=''
        ev_sertainity_4=''
        ev_sertainity_5=''         
        wx_text=nm+''', please define the chance that this ictal episode episode started from sleep.'''
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("Software:\n" +wx_text+"\n")
        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
        if __name__ == '__main__':
            app = wx.App()
            frame = MyFrame_certainity()    
            app.MainLoop()
        app=[]; app = wx.App(None)
        del app
        wx_text=''
        if ev_sertainity_1==1:
            sleep_chance=0
        if ev_sertainity_2==1:
            sleep_chance=1
        if ev_sertainity_3==1:
            sleep_chance=2
        if ev_sertainity_4==1:
            sleep_chance=3
        if ev_sertainity_5==1:                                    
            ev_save_1=''
            ev_save_2=''
            wx_text=nm+''', plesase select: whether or not you want to save your input to the ictal episode
            interpritation during this session'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_save_file()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            if ev_save_1==1:                
                ictus=[]
                report=[]
                ds_starter=[nm, eventdate, eventstart, eeg, event_certainity, pnes_chance, pnpne_chance, y_n_cognitest,\
                int(event0), int(event1), int(event2), int(event3), int(event4), int(event5), int(event6), int(event7), int(event8,), int(event9),\
                ictal_episode_code, sleep_chance, postict, event10, machine_decisions, postict_events, final_free_text, recordingstart]
            #Saving file
                ictal_episode=Ictal(ictus,ds_starter,report)
                save_variable()                                
                wx_text=nm+''', the new file was saved, thank you for finalizing ictal episode interpretation
                Please,  push the button "Exit" to close Digital Semiology.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                ev_exit=''
                if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_exit()    
                        app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                if ev_exit==1:
                    sys.exit()
            if ev_save_2==1:                        
                print(nm+''', the new file was NOT saved''')                
                sys.exit()        
    
        #-----------------------------------------------------------------------------------------------------------------------------------------------------------
        # Whether or not cognitive tests where performed during ictal episode
    
        wx_text=nm+''', if cognitive and/or motor testing was performed during this ictal episode,
                      push "yes", if not -"no"'''
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("Software:\n" +wx_text+"\n")
        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
        y_n_cognitest=''
        ev_yesno_1=''
        ev_yesno_2=''
        ev_yesno_3=''
        global ev_yesno_4
        ev_yesno_4=''
        if __name__ == '__main__':
            app = wx.App()
            frame = MyFrame_cognitest()    
            app.MainLoop()
        app=[]; app = wx.App(None)
        del app
        wx_text=''
        if ev_yesno_1=='y':
            y_n_cognitest='y'
        if ev_yesno_2=='n':
            y_n_cognitest='n'
        if ev_yesno_3==1:
            y_n_cognitest=3
        if ev_yesno_4==1:
            ev_save_1=''
            ev_save_2=''
            wx_text=nm+''', plesase select: whether or not you want to save your input to the ictal episode
            interpritation during this session'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_save_file()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            if ev_save_1==1:                
                ictus=[]
                report=[]
                ds_starter=[nm, eventdate, eventstart, eeg, event_certainity, pnes_chance, pnpne_chance, y_n_cognitest,\
                int(event0), int(event1), int(event2), int(event3), int(event4), int(event5), int(event6), int(event7), int(event8,), int(event9),\
                ictal_episode_code, sleep_chance, postict, event10, machine_decisions, postict_events, final_free_text, recordingstart]
            #Saving file
                ictal_episode=Ictal(ictus,ds_starter,report)
                save_variable()                                
                wx_text=nm+''', the new file was saved, thank you for finalizing ictal episode interpretation
                Please,  push the button "Exit" to close Digital Semiology.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                ev_exit=''
                if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_exit()    
                        app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                if ev_exit==1:
                    sys.exit()
            if ev_save_2==1:                                        
                print(nm+''', the new file was NOT saved''')                
                sys.exit()                         
    #-----------------------------------------------------------------------------------------------------------------------------------------------------------
        if general_add_on!=2:    
            # Type of events during, before and after this ictal episode
            wx_text=nm+''', push the buttons corresponding to event types 
            included into this ictal episode, events triggering this ictal episode
                  and (possibly) postictal events.
                  You can choose more than one  event type (more than one button). 
                  At the end push button "Next step"'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
            if __name__ == '__main__': #Object for GUI 'Types of ictal events' construction
                app = wx.App()
                frame = MyFrame()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            wx_text=''
            #-------------------------------------------------------------------------------------------------------------
            # Number of events of each type
                   
            event0=''
            if ev_1==1:
                wx_text=nm+''', if this ictal episode doesn't include the event of category 'SIMPLE MOTOR' write 0 ; otherwise
                write a number (how many) of 'simple motor' events included into this ictal episode in the window above.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while event0 =='' or int(event0)<0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app           
                    event0=value
                    print(value+'\n')
                    software_user_dialogue+=value+"\n"
                    try:
                        event_0=int(event0)
                    except:
                        event0=''
                    if event0 =='' or int(event0)<0:
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                        software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
                        
                    if event0!='':
                        if event_0>10:
                            wx_text='''Are you sure, '''+nm+'''?
                            You wrote that this ictal episode includes '''+str(event_0)+''' events of category 'SIMPLE MOTOR'!!!        
                            Please, write again a number (how many) of 'simple motor' events included into this ictal episode in the window above.'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_write()
                                app.MainLoop()
                            app=[]; app = wx.App(None)
                            del app           
                            event0=value
                            print(value+'\n')
                            software_user_dialogue+=value+"\n"
                            try:
                                event_0=int(event0)
                            except:
                                event0=''
                            if event0 =='' or int(event0)<0:
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                                software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
                            else:
                                event0=0
                                
            else:
                event0=0    
            event1=''
            if ev_2==1:
                wx_text=nm+''', if this ictal episode doesn't include the event of category 'AUTOMATISM' write 0 ; otherwise
                write a number (how many) of 'automatism' events included into this ictal episode in the window above.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while event1 =='' or int(event1)<0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    event1=value
                    print(value+'\n')
                    software_user_dialogue+=value+"\n"
                    try:
                        event_1=int(event1)
                    except:
                        event1=''
                    if event1 =='' or int(event1)<0:
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                        software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
                        
                    if event1!='':    
                        if event_1>10:
                            wx_text='''Are you sure, '''+nm+'''?
                            You wrote that this ictal episode includes '''+str(event_1)+''' events of category 'AUTOMATISM'!!!        
                            Please, write again a number (how many) of 'automatism' events included into this ictal episode in the window above.'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_write()
                                app.MainLoop()
                            app=[]; app = wx.App(None)
                            del app           
                            event1=value
                            print(value+'\n')
                            software_user_dialogue+=value+"\n"
                            try:
                                event_1=int(event1)
                            except:
                                event1=''
                            if event1 =='' or int(event1)<0:
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                                software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
            else:
                event1=0
                
            event2=''
            if ev_3==1:
                wx_text=nm+''', if this ictal episode doesn't include the event of category 'HYPERKINETIC' write 0 ; otherwise
                write a number (how many) of 'hyperkinetic' events included in into this ictal episode in the window above.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while event2 =='' or int(event2)<0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    event2=value
                    print(value+'\n')
                    software_user_dialogue+=value+"\n"
                    try:
                        event_2=int(event2)
                    except:
                        event2=''
                    if event2 =='' or int(event2)<0:
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                        software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
                    
                    if event2!='':
                        if event_2>10:
                            wx_text='''Are you sure, '''+nm+'''?
                            You wrote that this ictal episode includes '''+str(event_2)+''' events of category 'HYPERKINETIC'!!!        
                            Please, write again a number (how many) of 'hyperkinetic' events included into this ictal episode in the window above.'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_write()
                                app.MainLoop()
                            app=[]; app = wx.App(None)
                            del app           
                            event2=value
                            print(value+'\n')
                            software_user_dialogue+=value+"\n"
                            try:
                                event_2=int(event2)
                            except:
                                event2=''
                            if event2 =='' or int(event2)<0:
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                                software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
            else:
                event2=0
        
            event3=''
            if ev_4==1:
                wx_text=nm+''', if this ictal episode doesn't include the event of category 'EYE MOVEMENTS' write 0 ; otherwise
                write a number (how many) of 'eye movements' events included into this ictal episode in the window above.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while event3 =='' or int(event3)<0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    event3=value
                    print(value+'\n')
                    software_user_dialogue+=value+"\n"
                    try:
                        event_3=int(event3)
                    except:
                        event3=''
                    if event3 =='' or int(event3)<0:
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                        software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
                        
                    if event3!='':
                        if event_3>10:
                            wx_text='''Are you sure, '''+nm+'''?
                            You wrote that this ictal episode includes '''+str(event_3)+''' events of category 'EYE MOVEMENTS'!!!        
                            Please, write again a number (how many) of 'eye movements' events included in into this ictal episode in the window above.'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_write()
                                app.MainLoop()
                            app=[]; app = wx.App(None)
                            del app           
                            event3=value
                            print(value+'\n')
                            software_user_dialogue+=value+"\n"
                            try:
                                event_3=int(event3)
                            except:
                                event3=''
                            if event3 =='' or int(event3)<0:
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                                software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
            else:
                event3=0
           
            event4=''
            if ev_5==1:
                wx_text=nm+''', if this ictal episode doesn't include the event of category 'VOICE' write 0 ; otherwise
                write a number (how many) of 'voice' events included into this ictal episode in the window above.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while event4 =='' or int(event4)<0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    event4=value
                    print(value+'\n')
                    software_user_dialogue+=value+"\n"
                    try:
                        event_4=int(event4)
                    except:
                        event4=''
                    if event4 =='' or int(event4)<0:
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                        software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
                        
                    if event4!='':    
                        if event_4>10:
                            wx_text='''Are you sure, '''+nm+'''?
                            You wrote that this ictal episode includes '''+str(event_4)+''' events of category 'VOICE'!!!        
                            Please, write again a number (how many) of 'voice' events included into this ictal episode in the window above.'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_write()
                                app.MainLoop()
                            app=[]; app = wx.App(None)
                            del app           
                            event4=value
                            print(value+'\n')
                            software_user_dialogue+=value+"\n"
                            try:
                                event_4=int(event4)
                            except:
                                event4=''
                            if event4 =='' or int(event4)<0:
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                                software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
            else:
                event4=0
                        
            event5=''
            if ev_6==1:
                wx_text=nm+''', if this ictal episode doesn't include the event of category 'DIALEPTIC' write 0 ; otherwise
                write a number (how many) of 'dialeptic' events included into this ictal episode in the window above.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while event5 =='' or int(event5)<0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    event5=value
                    print(value+'\n')
                    software_user_dialogue+=value+"\n"
                    try:
                        event_5=int(event5)
                    except:
                        event5=''
                    if event5 =='' or int(event5)<0:
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                        software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
                        
                    if event5!='':                    
                        if event_5>10:
                            wx_text='''Are you sure, '''+nm+'''?
                            You wrote that this ictal episode includes '''+str(event_5)+''' events of category 'DIALEPTIC'!!!        
                            Please, write again a number (how many) of 'dialeptic' events included into this ictal episode in the window above.'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_write()
                                app.MainLoop()
                            app=[]; app = wx.App(None)
                            del app           
                            event5=value
                            print(value+'\n')
                            software_user_dialogue+=value+"\n"
                            try:
                                event_5=int(event5)
                            except:
                                event5=''
                            if event5 =='' or int(event5)<0:
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                                software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
            else:
                event5=0
                        
            event6=''
            if ev_7==1:
                wx_text=nm+''', if this ictal episode doesn't include the event of category 'GENERALIZED TONIC CLONIC' write 0 ; otherwise
                write a number (how many) of 'generalized tonic clonic' events included into this ictal episode in the window above.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while event6 =='' or int(event6)<0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    event6=value
                    print(value+'\n')
                    software_user_dialogue+=value+"\n"
                    try:
                        event_6=int(event6)
                    except:
                        event6=''
                    if event6 =='' or int(event6)<0:
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                        software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
                        
                    if event6!='':    
                        if event_6>10:
                            wx_text='''Are you sure, '''+nm+'''?
                            You wrote that this ictal episode includes '''+str(event_6)+''' events of category 'GENERALIZED TONIC CLONIC'!!!        
                            Please, write again a number (how many) of 'generalized tonic clonic' events included into this ictal episode in the window above.'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_write()
                                app.MainLoop()
                            app=[]; app = wx.App(None)
                            del app           
                            event6=value
                            print(value+'\n')
                            software_user_dialogue+=value+"\n"
                            try:
                                event_6=int(event6)
                            except:
                                event6=''
                            if event6 =='' or int(event6)<0:
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                                software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
            else:
                event6=0
                        
            event7=''
            if ev_8==1:
                wx_text=nm+''', if this ictal episode doesn't include the event of category 'AUTONOMIC' write 0 ; otherwise
                write a number (how many) of 'autonomic' events included into this ictal episode in the window above.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while event7 =='' or int(event7)<0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    event7=value
                    print(value+'\n')
                    software_user_dialogue+=value+"\n"
                    try:
                        event_7=int(event7)
                    except:
                        event7=''
                    if event7 =='' or int(event7)<0:
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                        software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
                        
                    if event7!='':
                        if event_7>10:
                            wx_text='''Are you sure, '''+nm+'''?
                            You wrote that this ictal episode includes '''+str(event_7)+''' events of category 'AUTONOMIC'!!!        
                            Please, write again a number (how many) of 'autonomic' events included into this ictal episode in the window above.'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_write()
                                app.MainLoop()
                            app=[]; app = wx.App(None)
                            del app           
                            event7=value
                            print(value+'\n')
                            software_user_dialogue+=value+"\n"
                            try:
                                event_7=int(event7)
                            except:
                                event7=''
                            if event7 =='' or int(event7)<0:
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                                software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
            else:
                event7=0
                        
            event8=''
            if ev_9==1:
                wx_text=nm+''', if this ictal episode doesn't include the event of category 'AURA REPORT' write 0 ; otherwise
                write a number (how many) of 'aura report' events included into this ictal episode in the window above.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while event8 =='' or int(event8)<0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    event8=value
                    print(value+'\n')
                    software_user_dialogue+=value+"\n"
                    try:
                        event_8=int(event8)
                    except:
                        event8=''
                    if event8 =='' or int(event8)<0:
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                        software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
                        
                    if event8!='':    
                        if event_8>10:
                            wx_text='''Are you sure, '''+nm+'''?
                            You wrote that this ictal episode includes '''+str(event_8)+''' events of category 'AURA REPORT'!!!        
                            Please, write again a number (how many) of 'aura report' events included into this ictal episode in the window above.'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_write()
                                app.MainLoop()
                            app=[]; app = wx.App(None)
                            del app           
                            event8=value
                            print(value+'\n')
                            software_user_dialogue+=value+"\n"
                            try:
                                event_8=int(event8)
                            except:
                                event8=''
                            if event8 =='' or int(event8)<0:
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                                software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
            else:
                event8=0
                        
            event9=''
            if ev_10==1:
                wx_text=nm+''', if this ictal episode doesn't include the event of category 'OTHER' write 0 ; otherwise
                write a number (how many) of 'other' events included into this ictal episode in the window above.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while event9 =='' or int(event9)<0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    event9=value
                    print(value+'\n')
                    software_user_dialogue+=value+"\n"
                    try:
                        event_9=int(event9)
                    except:
                        event9=''
                    if event9 =='' or int(event9)<0:
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                        software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
                    
                    if event9!='':
                        if event_9>10:
                            wx_text='''Are you sure, '''+nm+'''?
                            You wrote that this ictal episode includes '''+str(event_9)+''' events of category 'OTHER'!!!        
                            Please, write again a number (how many) of 'other' events included into this ictal episode in the window above.'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_write()
                                app.MainLoop()
                            app=[]; app = wx.App(None)
                            del app           
                            event9=value
                            print(value+'\n')
                            software_user_dialogue+=value+"\n"
                            try:
                                event_9=int(event9)
                            except:
                                event9=''
                            if event9 =='' or int(event9)<0:
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                                software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
            else:
                event9=0
            
            event10=0
            if ev_11==1:
                event10=1
        #-------------------------------------------------------------------------------------------------------    
        # Possibility of postictal state
            wx_text=nm+''', if it is possible that some of the events represent postictal state,
                          push "yes", if not -"no"'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
            ev_yesno_1=''
            ev_yesno_2=''
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_yes_no()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            wx_text=''
            if ev_yesno_1=='y':
                postict='y'
            if ev_yesno_2=='n':
                postict='n'
            print (postict)    
        
    ds_starter=[nm, eventdate, eventstart, eeg, event_certainity, pnes_chance, pnpne_chance, y_n_cognitest,\
                int(event0), int(event1), int(event2), int(event3), int(event4), int(event5), int(event6), int(event7), int(event8,), int(event9),\
                ictal_episode_code, sleep_chance, postict, event10, machine_decisions, postict_events, final_free_text,recordingstart]
    if ds_starter_x!='':
        for i in range (0,len(ds_starter)):
            if ds_starter[i]=='' or ds_starter[i]=='':
                ds_starter[i]=ds_starter_x[i]
    #return ds_starter
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_simple_movements(ds_starter, editing_mode):
    global ev_yesno_1, ev_yesno_2, wx_text
    global  ev_weakstrong_1,  ev_weakstrong_2, ev_flextionextension_1, ev_flextionextension_2
    global ev_flextionextension_3, ev_flextionextension_4
    global ev_timing
    global software_user_dialogue
    global ev_event_editing_1, ev_event_editing_2, ev_event_editing_3, edit, event_editor     
    nm=ds_starter[0]
    if event_editor==0:
        ev_event_editing_1=''
        ev_event_editing_2=''
        ev_event_editing_3=''
    if editing_mode==0:
        simple_movements=[0]*ds_starter[8]
        repititions=ds_starter[8]
    if editing_mode==1:
        simple_movements=[0]
        repititions=1
    for i in range (0,repititions):
        #Step 1 - Introduction of timing of the event start in hour minute second.
        if editing_mode==0:
            event_numb='('+str(i+1)+' of '+str(ds_starter[8])+')'
        else:
            event_numb=''
            
        if ev_event_editing_1==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventstart=''
        else:
            eventstart=ictus[edit-1][2]
        if ev_event_editing_1==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' SIMPLE MOTOR event START in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    eventstart=value
                    print(eventstart+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    ev_timing=''
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventstart=read_value
                try:
                    event_start=int(eventstart)
                except:
                    eventstart=''
                if len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                    or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                    software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''

        #----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 2 - Introduction  timing of the end of the event in hour minute second.
        if ev_event_editing_2==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventend=''
        else:
            eventend=ictus[edit-1][3]        
        if ev_event_editing_2==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):        
            while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                or int(eventend[4:])<0 or int(eventend[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' SIMPLE MOTOR event END in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app           
                    eventend=value
                    print(eventend+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventend=read_value
                try:
                    event_end=int(eventend)
                except:
                    eventend=''
                if len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                    or int(eventend[4:])<0 or int(eventend[4:])>59:
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                    software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
                
                  
#--------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 3 - Control the error, when the end of the event defined earlier than it's start        
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==0:
            eventstartend=''
            wx_text='''SOMETHING WRONG, '''+nm+'''! Write the time of'''+event_numb+''' SIMPLE MOTOR event START AND END
            in the form hhmmss,,hhmmss  in the row above and then press this button.'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
            while len (eventstartend) !=14 or int(eventstartend[0:2])<0 or int(eventstartend[0:2])>24 or int(eventstartend[2:4])<0 or int(eventstartend[2:4])>59\
            or int(eventstartend[4:6])<0 or int(eventstartend[4:6])>59 or int(eventstartend[8:10])<0 or int(eventstartend[8:10])>24 or int(eventstartend[10:12])<0\
            or int(eventstartend[10:12])>59 or int(eventstartend[12:])<0 or int(eventstartend[12:])>59\
            or int(eventstartend[0:2])*60**2+int(eventstartend[2:4])*60+int(eventstartend[4:6])>int(eventstartend[8:10])*60**2+int(eventstartend[10:12])*60+int(eventstartend[12:]):
        
                print('\a')
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_write()
                    app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                eventstartend=value
                print(eventstartend+'\n')
                software_user_dialogue+=value+"\n"
                eventstart=eventstartend[0:6]
                eventend=eventstartend[8:]
                try:
                    event_start=int(eventstartend[0:6])
                    event_end=int(eventstartend[8:])
                except:
                    eventstartend=''
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==1:
                 eventstart=''
                 while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                 or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                     wx_text='''SOMETHING WRONG, '''+nm+'''! You inserted event end earlier than  event start! 
                     Insert the time of'''+event_numb+''' SIMPLE MOTOR event START in the form hhmmss'''
                     now = datetime.now()
                     current_time = now.strftime("%H:%M:%S")
                     print(current_time)
                     print("Software:\n" +wx_text+"\n")
                     software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                     offset_1=99999999
                     text_file=open("intercode.txt", "w", encoding='utf-8')
                     text_file.write(str(offset_1))
                     text_file.close()
                     ev_timing=''
                     if __name__ == '__main__':
                         app = wx.App()
                         frame = MyFrame_video_player_event()    
                         app.MainLoop()
                     app=[]; app = wx.App(None)
                     del app
                     if ev_timing==1:
                         text_file=open("intercode.txt", "r", encoding='utf-8')
                         read_value=text_file.read(10)
                         print(read_value+'\n')
                         software_user_dialogue+=read_value+"\n"
                         text_file.close()
                         eventstart=read_value
                     
                 eventend=''
                 while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                 or int(eventend[4:])<0 or int(eventend[4:])>59:  
                     wx_text= nm+'''! You inserted event end earlier than  event start! 
                 Insert the time of'''+event_numb+''' SIMPLE MOTOR event END in the form hhmmss'''
                     now = datetime.now()
                     current_time = now.strftime("%H:%M:%S")
                     print(current_time)
                     print("Software:\n" +wx_text+"\n")
                     software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                     offset_1=99999999
                     text_file=open("intercode.txt", "w", encoding='utf-8')
                     text_file.write(str(offset_1))
                     text_file.close()
                     if __name__ == '__main__':
                         app = wx.App()
                         frame = MyFrame_video_player_event()    
                         app.MainLoop()
                     app=[]; app = wx.App(None)
                     del app
                     if ev_timing==1:
                         text_file=open("intercode.txt", "r", encoding='utf-8')
                         read_value=text_file.read(10)
                         print(read_value+'\n')
                         software_user_dialogue+=read_value+"\n"
                         text_file.close()
                         eventend=read_value
#------------------------------------------------------------------------------------------------------------------------------------------------------------
        
        admove='y'
        simple_movements[i]=[0,i,eventstart,eventend]
        if ev_event_editing_3==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while admove=='y':
                simple_move=['']*52
                #Step 4 Types of movement
                
    #            print('''          
    #          "PMLS" - periodic limb movements of sleep''')
                wx_text=nm+''', push the button corresponding to the type of simple motor behavior.
              At this stage You can choose ONLY ONE  movement type (only one button).'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                global ev_typesimpmove_1, ev_typesimpmove_2, ev_typesimpmove_3, ev_typesimpmove_4
                global ev_typesimpmove_5, ev_typesimpmove_6, ev_typesimpmove_7, ev_typesimpmove_8
                global ev_typesimpmove_9, ev_typesimpmove_10, ev_typesimpmove_11 
                global ev_typesimpmove_12, ev_typesimpmove_13, ev_typesimpmove_14
                global ev_simp_1, ev_simp_2, ev_simp_3, ev_simp_4, ev_simp_5, ev_simp_6 
                global ev_simp_7, ev_simp_8, ev_simp_9, ev_simp_10, ev_simp_11, ev_simp_12
                global ev_simp_13,ev_simp_14, ev_simp_15, ev_simp_16, ev_simp_17, ev_simp_18
                global ev_simp_19, ev_simp_20, ev_simp_21, ev_simp_22, ev_simp_23, ev_simp_24
                global ev_simp_25, ev_simp_26, ev_simp_27
                global ev_distalarmclon_1, ev_distalarmclon_2, ev_distalarmclon_3, ev_distalarmclon_4, ev_distalarmclon_5
                global ev_distallegclon_1, ev_distallegclon_2, ev_distallegclon_3
                global ev_completeness_1, ev_completeness_2, ev_tonic_elbow_1, ev_tonic_elbow_2
                ev_typesimpmove_1=''
                ev_typesimpmove_2=''
                ev_typesimpmove_3=''
                ev_typesimpmove_4=''
                ev_typesimpmove_5=''
                ev_typesimpmove_6=''
                ev_typesimpmove_7=''
                ev_typesimpmove_8=''
                ev_typesimpmove_9=''
                ev_typesimpmove_10=''
                ev_typesimpmove_11=''
                ev_typesimpmove_12=''
                ev_typesimpmove_14=''
                ev_simp_1=''
                ev_simp_2=''
                ev_simp_3=''
                ev_simp_4=''
                ev_simp_5=''
                ev_simp_6=''
                ev_simp_7=''
                ev_simp_8=''
                ev_simp_9=''
                ev_simp_10=''
                ev_simp_11=''
                ev_simp_12=''
                ev_simp_13=''
                ev_simp_14=''
                ev_simp_15=''
                ev_simp_16=''
                ev_simp_17=''
                ev_simp_18=''
                ev_simp_19=''
                ev_simp_20=''
                ev_simp_21=''
                ev_simp_22=''
                ev_simp_23=''
                ev_simp_24=''
                ev_simp_25=''
                ev_simp_26=''
                ev_simp_27=''
                ev_tonic_elbow_1=''
                ev_tonic_elbow_2=''
                            
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_types_simple_move()    
                    app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                wx_text=''
                if ev_typesimpmove_1==1:
                    simple_move[0]=0
                if ev_typesimpmove_2==1:
                    simple_move[0]=1
                if ev_typesimpmove_3==1:
                    simple_move[0]=2
                if ev_typesimpmove_4==1:
                    simple_move[0]=3
                if ev_typesimpmove_5==1:
                    simple_move[0]=4
                if ev_typesimpmove_6==1:
                    simple_move[0]=5
                if ev_typesimpmove_7==1:
                    simple_move[0]=6
                    global ev_atonicfall_1, ev_atonicfall_2
                    wx_text=nm+''', if this atonic seizure was associated with fall, push the button 'Fall',
                    if not - push the button 'No fall'.'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                    ev_atonicfall_1=''
                    ev_atonicfall_2=''                
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_atonic_fall()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_atonicfall_1==1:
                        simple_move[47]=1
                    if ev_atonicfall_2==1:
                        simple_move[47]=2
                if ev_typesimpmove_8==1:
                    simple_move[0]=7
                if ev_typesimpmove_9==1:
                    simple_move[0]=8
                if ev_typesimpmove_10==1:
                    simple_move[0]=9
                if ev_typesimpmove_11==1:
                    simple_move[0]=10
                if ev_typesimpmove_12==1:
                    simple_move[0]=11
                if ev_typesimpmove_14==1:
                    simple_move[0]=13
                
    #-------------------------------------------------------------------------------------------------------------------------------------------------------------              
                #Step 5 Body parts involved in the behavior
                if simple_move[0]!='' and simple_move[0]!=2 and simple_move[0]!=11 and simple_move[0]!=13:                
                    wx_text=nm+''', push the buttons corresponding to body parts involved in this behavior.
                  You can choose more than one  body part (more than one button). 
                  At the end push button "Next step".'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_simp()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    wx_text=''
                    
                    if ev_simp_1==1:                    
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''                    
                        wx_text=nm+''', please assess the power of proximal part of right arm movement:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[1]=1
                        if ev_weakstrong_2==1:
                            simple_move[1]=2                  
                    
                    if ev_simp_2==1:
                                            
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of distal part of right arm movement:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[2]=1
                        if ev_weakstrong_2==1:
                            simple_move[2]=2
    
                        if ev_typesimpmove_1==1 or ev_typesimpmove_2==1: #hand posturing                        
                            print('''
                            "Polit-fist" - politician's fist''')
                            global ev_handpost_1, ev_handpost_2, ev_handpost_3, ev_handpost_4
                            global ev_handpost_5, ev_handpost_6, ev_handpost_7
                            ev_handpost_1=''
                            ev_handpost_2=''
                            ev_handpost_3=''
                            ev_handpost_4=''
                            ev_handpost_5=''
                            ev_handpost_6=''
                            ev_handpost_7=''
                            wx_text=nm+''', push the button corresponding to the type of RIGHT hand posturing.
                            You can choose ONLY ONE posturing type (only one button).'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_hand_posturing()    
                                app.MainLoop()
                            app=[]; app = wx.App(None)
                            del app
                            wx_text=''
                            if ev_handpost_1==1:
                                simple_move[19]=0
                            if ev_handpost_2==1:
                                simple_move[19]=1
                            if ev_handpost_3==1:
                                simple_move[19]=2
                            if ev_handpost_4==1:
                                simple_move[19]=3
                            if ev_handpost_5==1:
                                simple_move[19]=4
                            if ev_handpost_6==1:
                                simple_move[19]=5
                            if ev_handpost_7==1:
                                simple_move[19]=6
                            wx_text=nm+''', push the button corresponding to the type of RIGHT ELBOW
                            tonic/dystonic position: in flextion or in extention.
                            You can choose ONLY ONE posturing type (only one button).'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_tonic_elbow()    
                                app.MainLoop()
                            app=[]; app = wx.App(None)
                            del app
                            if ev_tonic_elbow_1==1:
                                simple_move[48]=0
                            if ev_tonic_elbow_2==1:
                                simple_move[48]=1
                                
                        if ev_typesimpmove_4==1: #Rt distal arm clonic movement
                            ev_distalarmclon_1=''
                            ev_distalarmclon_2=''
                            ev_distalarmclon_3=''
                            ev_distalarmclon_4=''
                            ev_distalarmclon_5=''
                            wx_text=nm+''', push the button corresponding to the part of RIGHT distal arm clonic movements.
                            You can choose MORE THAN ONE part (more than one button).'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_distal_arm_clonic()    
                                app.MainLoop()
                            app=[]; app = wx.App(None)
                            del app
                            if ev_distalarmclon_1==1:
                                simple_move[31]=1
                            if ev_distalarmclon_2==1:
                                simple_move[32]=1
                            if ev_distalarmclon_3==1:
                                simple_move[33]=1
                            if ev_distalarmclon_4==1:
                                simple_move[34]=1
                            if ev_distalarmclon_5==1:
                                simple_move[35]=1
                                            
                    if ev_simp_3==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of proximal part of left arm movement:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[3]=1
                        if ev_weakstrong_2==1:
                            simple_move[3]=2
                        
                    if ev_simp_4==1:
                        
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of distal part of left arm movement:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[4]=1
                        if ev_weakstrong_2==1:
                            simple_move[4]=2
    
                        if ev_typesimpmove_1==1 or ev_typesimpmove_2==1: #hand posturing                        
                            print('''
                            "Polit-fist" - politician's fist''')
                            wx_text=nm+''', push the button corresponding to the type of LEFT hand posturing.
                            You can choose ONLY ONE posturing type (only one button).'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            ev_handpost_1=''
                            ev_handpost_2=''
                            ev_handpost_3=''
                            ev_handpost_4=''
                            ev_handpost_5=''
                            ev_handpost_6=''
                            ev_handpost_7=''
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_hand_posturing()    
                                app.MainLoop()
                            app=[]; app = wx.App(None)
                            del app
                            wx_text=''
                            if ev_handpost_1==1:
                                simple_move[20]=0
                            if ev_handpost_2==1:
                                simple_move[20]=1
                            if ev_handpost_3==1:
                                simple_move[20]=2
                            if ev_handpost_4==1:
                                simple_move[20]=3
                            if ev_handpost_5==1:
                                simple_move[20]=4
                            if ev_handpost_6==1:
                                simple_move[20]=5
                            if ev_handpost_7==1:
                                simple_move[20]=6
                            wx_text=nm+''', push the button corresponding to the type of LEFT ELBOW
                            tonic/dystonic position: in flextion or in extention.
                            You can choose ONLY ONE posturing type (only one button).'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            ev_tonic_elbow_1=''
                            ev_tonic_elbow_2=''
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_tonic_elbow()    
                                app.MainLoop()
                            app=[]; app = wx.App(None)
                            del app
                            if ev_tonic_elbow_1==1:
                                simple_move[49]=0
                            if ev_tonic_elbow_2==1:
                                simple_move[49]=1
                                
                        if ev_typesimpmove_4==1: #Lt distal arm clonic movements
                            ev_distalarmclon_1=''
                            ev_distalarmclon_2=''
                            ev_distalarmclon_3=''
                            ev_distalarmclon_4=''
                            ev_distalarmclon_5=''
                            wx_text=nm+''', push the button corresponding to the part of LEFT distal arm clonic movements.
                            You can choose MORE THAN ONE part (more than one button).'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_distal_arm_clonic()    
                                app.MainLoop()
                            app=[]; app = wx.App(None)
                            del app
                            if ev_distalarmclon_1==1:
                                simple_move[36]=1
                            if ev_distalarmclon_2==1:
                                simple_move[37]=1
                            if ev_distalarmclon_3==1:
                                simple_move[38]=1
                            if ev_distalarmclon_4==1:
                                simple_move[39]=1
                            if ev_distalarmclon_5==1:
                                simple_move[40]=1
                                                      
                    if ev_simp_5==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of proximal part of right leg movement:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                     
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[5]=1
                        if ev_weakstrong_2==1:
                            simple_move[5]=2
                                               
                    if ev_simp_6==1:                                        
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of distal part of right leg movement:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                     
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[6]=1
                        if ev_weakstrong_2==1:
                            simple_move[6]=2
                            
                        if ev_typesimpmove_4==1: #Rt distal leg clonic movement                        
                            wx_text=nm+''', push the button corresponding to the part of RIGHT distal LEG clonic movements.
                            You can choose MORE THAN ONE part (more than one button).'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            ev_distallegclon_1=''
                            ev_distallegclon_2=''
                            ev_distallegclon_3=''
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_distal_leg_clonic()    
                                app.MainLoop()
                            if ev_distallegclon_1==1:
                                simple_move[41]=1
                            if ev_distallegclon_2==1:
                                simple_move[42]=1
                            if ev_distallegclon_3==1:
                                simple_move[43]=1
                            app=[]; app = wx.App(None)
                            del app
                  
                    if ev_simp_7==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of proximal part of left leg movement:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[7]=1
                        if ev_weakstrong_2==1:
                            simple_move[7]=2
                    
                    if ev_simp_8==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of distal part of left leg movement:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[8]=1
                        if ev_weakstrong_2==1:
                            simple_move[8]=2
                        
                        if ev_typesimpmove_4==1: #Lt distal leg clonic movement                        
                            wx_text=nm+''', push the button corresponding to the part of LEFT distal LEG clonic movements.
                            You can choose MORE THAN ONE part (more than one button).'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            ev_distallegclon_1=''
                            ev_distallegclon_2=''
                            ev_distallegclon_3=''
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_distal_leg_clonic()    
                                app.MainLoop()
                            if ev_distallegclon_1==1:
                                simple_move[44]=1
                            if ev_distallegclon_2==1:
                                simple_move[45]=1
                            if ev_distallegclon_3==1:
                                simple_move[46]=1
                            app=[]; app = wx.App(None)
                            del app
                             
                    if ev_simp_17==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of right half of face movement:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[9]=1
                        if ev_weakstrong_2==1:
                            simple_move[9]=2
                        
                    if ev_simp_18==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of left half of face movement:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[10]=1
                        if ev_weakstrong_2==1:
                            simple_move[10]=2
                   
                    if ev_simp_9==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of neck turn to the right:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                   
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[11]=1
                        if ev_weakstrong_2==1:
                            simple_move[11]=2
    
                    if ev_simp_10==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of neck turn to the left:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                                        
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[12]=1
                        if ev_weakstrong_2==1:
                            simple_move[12]=2
    
                    if ev_simp_11==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of neck flexion foreward:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                                                             
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[13]=1
                        if ev_weakstrong_2==1:
                            simple_move[13]=2
                        
                    if ev_simp_12==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''                                                             
                        wx_text=nm+''', please assess the power of neck extention backward:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[14]=1
                        if ev_weakstrong_2==1:
                            simple_move[14]=2
                        
                    if ev_simp_13==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of trunk turn to the right:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                                                             
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[15]=1
                        if ev_weakstrong_2==1:
                            simple_move[15]=2
    
                    if ev_simp_14==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of trunk turn to the left:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                                        
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[16]=1
                        if ev_weakstrong_2==1:
                            simple_move[16]=2
    
                    if ev_simp_15==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of trunk flexion foreward:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[17]=1
                        if ev_weakstrong_2==1:
                            simple_move[17]=2
    
                    if ev_simp_16==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of trunk extention backward:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                                           
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[18]=1
                        if ev_weakstrong_2==1:
                            simple_move[18]=2
    
                    if ev_simp_19==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of jaw movement at midline:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                                                             
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[21]=1
                        if ev_weakstrong_2==1:
                            simple_move[21]=2
                        
                    if ev_simp_20==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of jaw movement to the right:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                                        
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[22]=1
                        if ev_weakstrong_2==1:
                            simple_move[22]=2
                        
                    if ev_simp_21==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of jaw movement to the left:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                                         
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[23]=1
                        if ev_weakstrong_2==1:
                            simple_move[23]=2
                        
                    if ev_simp_22==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of tongue movement at midline:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                                          
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[24]=1
                        if ev_weakstrong_2==1:
                            simple_move[24]=2
    
                    if ev_simp_23==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of tongue movement to the right:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                                         
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[25]=1
                        if ev_weakstrong_2==1:
                            simple_move[25]=2
                        
                    if ev_simp_24==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of tongue movement to the left:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[26]=1
                        if ev_weakstrong_2==1:
                            simple_move[26]=2
                            
                    if ev_simp_25==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power generalized movements:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[28]=1
                        if ev_weakstrong_2==1:
                            simple_move[28]=2
                            
                    if ev_simp_26==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of Rt hemibody movements:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                   
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[29]=1
                        if ev_weakstrong_2==1:
                            simple_move[29]=2
                            
                    if ev_simp_27==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of Lt hemibody movements:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                  
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[30]=1
                        if ev_weakstrong_2==1:
                            simple_move[30]=2
                        
                    if simple_move[0]==0 and (simple_move[21]==1 or simple_move[21]==2): #open mouth vs. trismus
                        global ev_opentrism_1, ev_opentrism_2
                        ev_opentrism_1=''
                        ev_opentrism_2=''
                        wx_text=nm+''',if there is mouth opening - push "Open", if there is trismus - push "Trismus",
                        if neither of them - push "Next step".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_opentrismus()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_opentrism_1==1:
                            simple_move[27]=1
                        if ev_opentrism_2==1:
                            simple_move[27]=2
                        
                
        #Epileptic spasms body parts
                if simple_move[0]==11:                                 

                    wx_text=nm+''' push the buttons corresponding to body parts involved in this behavior.
                  You can choose more than one  body part (more than one button).
                  At the end push button "Next step".'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_simp()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    wx_text=''
                    if ev_simp_1==1:                    
                        wx_text=nm+''', please assess the power of proximal part of right arm movement:
                            select appropriate button.'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n" 
                        ev_flextionextension_1=''
                        ev_flextionextension_2=''
                        ev_flextionextension_3=''
                        ev_flextionextension_4=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_flexion_extension()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_flextionextension_1==1:
                            simple_move[1]=1
                        if ev_flextionextension_2==1:
                            simple_move[1]=2
                        if ev_flextionextension_3==1:
                            simple_move[1]=3
                        if ev_flextionextension_4==1:
                            simple_move[1]=4
                    
                    if ev_simp_2==1:
                        wx_text=nm+''', please assess the power of distal part of right arm movement:
                            select appropriate button.'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        ev_flextionextension_1=''
                        ev_flextionextension_2=''
                        ev_flextionextension_3=''
                        ev_flextionextension_4=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_flexion_extension()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_flextionextension_1==1:
                            simple_move[2]=1
                        if ev_flextionextension_2==1:
                            simple_move[2]=2
                        if ev_flextionextension_3==1:
                            simple_move[2]=3
                        if ev_flextionextension_4==1:
                            simple_move[2]=4
                          
                    if ev_simp_3==1:
                        wx_text=nm+''', please assess the power of proximal part of left arm movement:
                            select appropriate button.'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                     
                        ev_flextionextension_1=''
                        ev_flextionextension_2=''
                        ev_flextionextension_3=''
                        ev_flextionextension_4=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_flexion_extension()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_flextionextension_1==1:
                            simple_move[3]=1
                        if ev_flextionextension_2==1:
                            simple_move[3]=2
                        if ev_flextionextension_3==1:
                            simple_move[3]=3
                        if ev_flextionextension_4==1:
                            simple_move[3]=4
                        
                    if ev_simp_4==1:
                        wx_text=nm+''', please assess the power of distal part of left arm movement:
                            select appropriate button.'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                     
                        ev_flextionextension_1=''
                        ev_flextionextension_2=''
                        ev_flextionextension_3=''
                        ev_flextionextension_4=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_flexion_extension()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_flextionextension_1==1:
                            simple_move[4]=1
                        if ev_flextionextension_2==1:
                            simple_move[4]=2
                        if ev_flextionextension_3==1:
                            simple_move[4]=3
                        if ev_flextionextension_4==1:
                            simple_move[4]=4
                                                      
                    if ev_simp_5==1:
                        wx_text=nm+''', please assess the power of proximal part of right leg movement:
                            select appropriate button.'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                     
                        ev_flextionextension_1=''
                        ev_flextionextension_2=''
                        ev_flextionextension_3=''
                        ev_flextionextension_4=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_flexion_extension()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_flextionextension_1==1:
                            simple_move[5]=1
                        if ev_flextionextension_2==1:
                            simple_move[5]=2
                        if ev_flextionextension_3==1:
                            simple_move[5]=3
                        if ev_flextionextension_4==1:
                            simple_move[5]=4
                                               
                    if ev_simp_6==1:
                        wx_text=nm+''', please assess the power of distal part of right leg movement:
                            select appropriate button.'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        ev_flextionextension_1=''
                        ev_flextionextension_2=''
                        ev_flextionextension_3=''
                        ev_flextionextension_4=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_flexion_extension()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_flextionextension_1==1:
                            simple_move[6]=1
                        if ev_flextionextension_2==1:
                            simple_move[6]=2
                        if ev_flextionextension_3==1:
                            simple_move[6]=3
                        if ev_flextionextension_4==1:
                            simple_move[6]=4
                                      
                    if ev_simp_7==1:
                        wx_text=nm+''', please assess the power of proximal part of left leg movement:
                            select appropriate button.'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                      
                        ev_flextionextension_1=''
                        ev_flextionextension_2=''
                        ev_flextionextension_3=''
                        ev_flextionextension_4=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_flexion_extension()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_flextionextension_1==1:
                            simple_move[7]=1
                        if ev_flextionextension_2==1:
                            simple_move[7]=2
                        if ev_flextionextension_3==1:
                            simple_move[7]=3
                        if ev_flextionextension_4==1:
                            simple_move[7]=4
                    
                    if ev_simp_8==1:
                        wx_text=nm+''', please assess the power of distal part of left leg movement:
                            select appropriate button.'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        ev_flextionextension_1=''
                        ev_flextionextension_2=''
                        ev_flextionextension_3=''
                        ev_flextionextension_4=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_flexion_extension()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_flextionextension_1==1:
                            simple_move[8]=1
                        if ev_flextionextension_2==1:
                            simple_move[8]=2
                        if ev_flextionextension_3==1:
                            simple_move[8]=3
                        if ev_flextionextension_4==1:
                            simple_move[8]=4
                                                           
                    if ev_simp_17==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of right half of face movement:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                     
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[9]=1
                        if ev_weakstrong_2==1:
                            simple_move[9]=2
                        
                    if ev_simp_18==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of left half of face movement:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[10]=1
                        if ev_weakstrong_2==1:
                            simple_move[10]=2                    
                    
                    if ev_simp_9==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of neck turn to the right:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[11]=1
                        if ev_weakstrong_2==1:
                            simple_move[11]=2
                                        
                    if ev_simp_10==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of neck turn to the left:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[12]=1
                        if ev_weakstrong_2==1:
                            simple_move[12]=2
                    
                    if ev_simp_11==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of neck flexion foreward:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[13]=1
                        if ev_weakstrong_2==1:
                            simple_move[13]=2
                        
                    if ev_simp_12==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of neck extension backward:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[14]=1
                        if ev_weakstrong_2==1:
                            simple_move[14]=2
                        
                    if ev_simp_13==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of trunk turn to the right:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[15]=1
                        if ev_weakstrong_2==1:
                            simple_move[15]=2
                        
                    if ev_simp_14==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of trunk turn to the left:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                   
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[16]=1
                        if ev_weakstrong_2==1:
                            simple_move[16]=2
                    
                    if ev_simp_15==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of trunk flexion foreward:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[17]=1
                        if ev_weakstrong_2==1:
                            simple_move[17]=2
                        
                    if ev_simp_16==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of trunk extention backward:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                     
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        if ev_weakstrong_1==1:
                            simple_move[18]=1
                        if ev_weakstrong_2==1:
                            simple_move[18]=2
                            
                    if ev_simp_19==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of jaw movement at midline:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                                                             
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[21]=1
                        if ev_weakstrong_2==1:
                            simple_move[21]=2
                        
                    if ev_simp_20==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of jaw movement to the right:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                                        
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[22]=1
                        if ev_weakstrong_2==1:
                            simple_move[22]=2
                        
                    if ev_simp_21==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of jaw movement to the left:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                                         
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[23]=1
                        if ev_weakstrong_2==1:
                            simple_move[23]=2
                        
                    if ev_simp_22==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of tongue movement at midline:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                                          
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[24]=1
                        if ev_weakstrong_2==1:
                            simple_move[24]=2
    
                    if ev_simp_23==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of tongue movement to the right:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                                         
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[25]=1
                        if ev_weakstrong_2==1:
                            simple_move[25]=2
                        
                    if ev_simp_24==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of tongue movement to the left:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[26]=1
                        if ev_weakstrong_2==1:
                            simple_move[26]=2
                            
                    if ev_simp_25==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power generalized movements:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[28]=1
                        if ev_weakstrong_2==1:
                            simple_move[28]=2
                            
                    if ev_simp_26==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of Rt hemibody movements:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                   
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[29]=1
                        if ev_weakstrong_2==1:
                            simple_move[29]=2
                            
                    if ev_simp_27==1:
                        ev_weakstrong_1=''
                        ev_weakstrong_2=''
                        wx_text=nm+''', please assess the power of Lt hemibody movements:
                            select button "weak" or "strong".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                  
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_weak_strong()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_weakstrong_1==1:
                            simple_move[30]=1
                        if ev_weakstrong_2==1:
                            simple_move[30]=2
                        
                    if simple_move[21]==1 or simple_move[21]==2: #open mouth vs. trismus                        
                        ev_opentrism_1=''
                        ev_opentrism_2=''
                        wx_text=nm+''', if there is mouth opening - push "Open", if there is trismus - push "Trismus",
                        if neither of them - push "Next step".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_opentrismus()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        wx_text=''
                        if ev_opentrism_1==1:
                            simple_move[27]=1
                        if ev_opentrism_2==1:
                            simple_move[27]=2
        #Figure-of-4                        
                if simple_move[0]==13:
                    wx_text=nm+''', please, select side of elbow extension in figure-of-4.'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                    global ev_fofside_1, ev_fofside_2 
                    ev_fofside_1=''
                    ev_fofside_2=''                
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_figure_of_4_side()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_fofside_1==1:
                        simple_move[1]=1
                    if ev_fofside_2==1:
                        simple_move[1]=2
                        
                    wx_text=nm+''', please, select whether figure-of-4 is complete or partial.'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                    ev_completeness_1=''
                    ev_completeness_2=''
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_complete_vs_partial()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_completeness_1==1:
                        simple_move[2]=1
                    if ev_completeness_2==1:
                        simple_move[2]=2
         #Fencer       
                if simple_move[0]==2:
                    wx_text=nm+''', please, select side of fencer posturing'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                    global ev_fencer_1, ev_fencer_2 
                    ev_fencer_1=''
                    ev_fencer_2=''                
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_fencer()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_fencer_1==1:
                        simple_move[1]=1
                    if ev_fencer_2==1:
                        simple_move[1]=2
                        
                    wx_text=nm+''', please, select whether fencer posturing is complete or partial.'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                    ev_completeness_1=''
                    ev_completeness_2=''
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_complete_vs_partial()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_completeness_1==1:
                        simple_move[2]=1
                    if ev_completeness_2==1:
                        simple_move[2]=2
                        
                wx_text=nm+''', please, select whether there is jacksonian march.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"   
                if simple_move[0]==3:
                    global ev_j_2, ev_j_3                   
                    ev_j_2=''
                    ev_j_3=''
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_jacson()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_j_2==1:
                        simple_move[50]=1
                    if ev_j_3==1:
                        simple_move[51]=1
                    
                wx_text=nm+''', if it is additional simple motor behavior(s) in this event,
                                  push "yes", if not -"no"'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                admove=''
                ev_yesno_1=''
                ev_yesno_2=''
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_yes_no()    
                    app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                wx_text=''
                if ev_yesno_1=='y':
                    admove='y'
                if ev_yesno_2=='n':
                    admove='n'
                #print (admove)            

                simple_movements[i] = simple_movements[i]+[simple_move]
    return simple_movements
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_automatisms(ds_starter, editing_mode):
    global ev_yesno_1, ev_yesno_2, wx_text
    global ev_automat_1, ev_automat_2, ev_automat_3, ev_automat_4, ev_automat_5, ev_automat_6
    global ev_automat_7, ev_automat_8
    global ev_timing
    global software_user_dialogue
    global ev_event_editing_1, ev_event_editing_2, ev_event_editing_3, edit, event_editor    
    nm=ds_starter[0]
    if event_editor==0:
        ev_event_editing_1=''
        ev_event_editing_2=''
        ev_event_editing_3=''
    if editing_mode==0:
        automatic_movements=[0]*ds_starter[9]
        repititions=ds_starter[9]
    if editing_mode==1:
        automatic_movements=[0]
        repititions=1
    for i in range (0,repititions):
        #Step 1 - Introduction of timing of the event start in hour minute second.
        if editing_mode==0:
            event_numb='('+str(i+1)+' of '+str(ds_starter[9])+')'
        else:
            event_numb=''
        if ev_event_editing_1==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventstart=''
        else:
            eventstart=ictus[edit-1][2]
        if ev_event_editing_1==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):        
            while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                     or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' AUTOMATISM event START in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app           
                    eventstart=value
                    print(eventstart+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventstart=read_value
                try:
                    event_start=int(eventstart)
                except:
                    eventstart=''
                if len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                    or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                         now = datetime.now()
                         current_time = now.strftime("%H:%M:%S")
                         print(current_time)
                         print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                         software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
        #----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 2 - Introduction  timing of the end of the event in hour minute second.
        if ev_event_editing_2==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventend=''
        else:
            eventend=ictus[edit-1][3]        
        if ev_event_editing_2==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):           
            while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                     or int(eventend[4:])<0 or int(eventend[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' AUTOMATISM event END in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app           
                    eventend=value
                    print(eventend+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventend=read_value
                try:
                    event_end=int(eventend)
                except:
                    eventend=''
                if len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                    or int(eventend[4:])<0 or int(eventend[4:])>59:
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                    software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
        #--------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 3 - Control the error, when the end of the event defined earlier than it's start 
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==0:
                eventstartend=''
                wx_text='''SOMETHING WRONG, '''+nm+'''! Write the time of'''+event_numb+''' AUTOMATISM event START AND END
            in the form hhmmss,,hhmmss  in the row above and then press this button.'''
                print('\a')
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while len (eventstartend) !=14 or int(eventstartend[0:2])<0 or int(eventstartend[0:2])>24 or int(eventstartend[2:4])<0 or int(eventstartend[2:4])>59\
                      or int(eventstartend[4:6])<0 or int(eventstartend[4:6])>59 or int(eventstartend[8:10])<0 or int(eventstartend[8:10])>24 or int(eventstartend[10:12])<0\
                      or int(eventstartend[10:12])>59 or int(eventstartend[12:])<0 or int(eventstartend[12:])>59\
                      or int(eventstartend[0:2])*60**2+int(eventstartend[2:4])*60+int(eventstartend[4:6])>int(eventstartend[8:10])*60**2+int(eventstartend[10:12])*60+int(eventstartend[12:]):
    
                    print('\a')
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    eventstartend=value
                    print(eventstartend+'\n')
                    software_user_dialogue+=value+"\n"
                    eventstart=eventstartend[0:6]
                    eventend=eventstartend[8:]
                    try:
                        event_start=int(eventstartend[0:6])
                        event_end=int(eventstartend[8:])
                    except:
                         eventstartend=''
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==1:
             eventstart=''
             while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
             or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                 wx_text='''SOMETHING WRONG, '''+nm+'''! You inserted event end earlier than  event start! 
                 Insert the time of'''+event_numb+''' AUTOMATISM event START in the form hhmmss'''
                 print('\a')
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 ev_timing=''
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 app=[]; app = wx.App(None)
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventstart=read_value
                 
             eventend=''
             while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
             or int(eventend[4:])<0 or int(eventend[4:])>59:  
                 wx_text= nm+'''! You inserted event end earlier than  event start! 
             Insert the time of'''+event_numb+''' AUTOMATISM event END in the form hhmmss'''
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 app=[]; app = wx.App(None)
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventend=read_value
        #------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 4 Types of automatic movement
        automatic_movements[i]=[1,i,eventstart,eventend]
        admove='y'
        if ev_event_editing_3==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while admove=='y':
                wx_text=nm+''', push the button corresponding to the type of automatisms.
              You can choose ONLY ONE  automatism type (only one button).'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                automat=['']*12            
                global ev_typeautomat_1, ev_typeautomat_2, ev_typeautomat_3, ev_typeautomat_4, ev_typeautomat_5
                global ev_typeautomat_6, ev_typeautomat_7, ev_typeautomat_8, ev_typeautomat_9, ev_typeautomat_10
                global ev_typeautomat_11, ev_typeautomat_12, ev_typeautomat_13, ev_typeautomat_14, ev_typeautomat_15
                global ev_typeautomat_16, ev_typeautomat_17, ev_typeautomat_18, ev_typeautomat_19, ev_typeautomat_20
                ev_typeautomat_1=''
                ev_typeautomat_2=''
                ev_typeautomat_3=''
                ev_typeautomat_4=''
                ev_typeautomat_5=''
                ev_typeautomat_6=''
                ev_typeautomat_7=''
                ev_typeautomat_8=''
                ev_typeautomat_9=''
                ev_typeautomat_10=''
                ev_typeautomat_11=''
                ev_typeautomat_12=''
                ev_typeautomat_13=''
                ev_typeautomat_14=''
                ev_typeautomat_15=''
                ev_typeautomat_16=''
                ev_typeautomat_17=''
                ev_typeautomat_18=''
                ev_typeautomat_19=''
                ev_typeautomat_20=''
                                            
                if __name__ == '__main__':                    
                    app = wx.App()                   
                    frame = MyFrame_types_automatisms()  
                    app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                
                if ev_typeautomat_1==1:
                    automat[0]=0
                if ev_typeautomat_2==1:
                    automat[0]=1
                if ev_typeautomat_3==1:
                    automat[0]=2
                if ev_typeautomat_4==1:
                    automat[0]=3
                if ev_typeautomat_5==1:
                    automat[0]=4
                if ev_typeautomat_6==1:
                    automat[0]=5
                if ev_typeautomat_7==1:
                    automat[0]=6
                if ev_typeautomat_8==1:
                    automat[0]=7
                if ev_typeautomat_9==1:
                    automat[0]=8
                if ev_typeautomat_10==1:
                    automat[0]=9
                if ev_typeautomat_11==1:
                    automat[0]=10
                if ev_typeautomat_12==1:
                    automat[0]=11
                if ev_typeautomat_13==1:
                    automat[0]=12
                if ev_typeautomat_14==1:
                    automat[0]=13
                if ev_typeautomat_15==1:
                    automat[0]=14
                if ev_typeautomat_16==1:
                    automat[0]=15
                if ev_typeautomat_17==1:
                    automat[0]=16
                if ev_typeautomat_18==1:
                    automat[0]=17
                if ev_typeautomat_19==1:
                    automat[0]=18
                if ev_typeautomat_20==1:
                    automat[0]=19 #other automatism
                    wx_text=nm+''', please, select whether you want to add the comment 
                    for "other" automatism'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                    global ev_comment_1, ev_comment_2, ev_comment_3 
                    ev_comment_1=''
                    ev_comment_2=''
                    ev_comment_3=''                
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_free_text_comment()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_comment_1==1:
                        wx_text=nm+''', please, write your comment for "other" automatism
                        and push this button.'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_write()
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        automat[9]=value
                        print(value+"\n")
                        software_user_dialogue+=value+"\n"
                    if ev_comment_2==1:                    
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print('''\nSoftware:\n'''+nm+''', please, write your comment to "other" automatism and push Enter\n''' )
                        software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+nm+'''
                        , please, write your comment to "other" automatism and push Enter\n'''
                        automat[9]=input (nm+', please, write your comment to "other" automatism and push Enter\n')
                        software_user_dialogue+='''\n'''+current_time+'''\nUser typed:'''+'''\n'''+automat[9]+'''\n'''
                    if ev_comment_3==1:
                        automat[9]='No comment for "other" automatism'
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print('''Software:\n'''+automat[9])
                        software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+automat[9]+'''\n'''
                if automat[0] in range (0,3): #Limbs involved in automatism.
                    wx_text=nm+''', push the buttons corresponding to limbs involved in this behavior.
              You can choose more than one  limb (more than one button). 
              At the end push button "Next step".'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"               
                    nonsence=1
                    while nonsence==1:
                        nonsence=0
                        ev_automat_1=''
                        ev_automat_2=''
                        ev_automat_3=''
                        ev_automat_4=''
                        ev_automat_5=''
                        ev_automat_6=''
                        ev_automat_7=''
                        ev_automat_8=''
                               
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_automat()    
                            app.MainLoop()
                                                       
                        if ev_automat_2==1:
                            automat[1]=1
                        if ev_automat_1==1:
                            automat[1]=2
                        if ev_automat_1=='' and ev_automat_2=='':
                            automat[1]=0
                        if ev_automat_1==1 and ev_automat_2==1:
                            automat[1]=''                        
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME LIMB!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME LIMB!\n PLEASE TRY AGAIN!\n'''
                            nonsence=1
                                                    
                        if ev_automat_4==1:
                            automat[2]=1
                        if ev_automat_3==1:
                            automat[2]=2
                        if ev_automat_3=='' and ev_automat_4=='':
                            automat[2]=0
                        if ev_automat_3==1 and ev_automat_4==1:
                            automat[2]=''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME LIMB!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
                            nonsence=1
                                                    
                        if ev_automat_6==1:
                            automat[3]=1
                        if ev_automat_5==1:
                            automat[3]=2
                        if ev_automat_5=='' and ev_automat_6=='':
                            automat[3]=0
                        if ev_automat_5==1 and ev_automat_6==1:
                            automat[3]=''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME LIMB!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME LIMB!\n PLEASE TRY AGAIN!\n'''
                            nonsence=1
                                                    
                        if ev_automat_8==1:
                            automat[4]=1
                        if ev_automat_7==1:
                            automat[4]=2
                        if ev_automat_7=='' and ev_automat_8=='':
                            automat[4]=0
                        if ev_automat_7==1 and ev_automat_8==1:
                            automat[4]=''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME LIMB!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME LIMB!\n PLEASE TRY AGAIN!\n'''
                            nonsence=1                        
                        app=[]; app = wx.App(None)
                        del app
                                                                   
                elif automat[0] in range (3,6) or automat[0]==18: #Arms involved in automatism.
                    wx_text=nm+''', push the buttons corresponding to limbs involved in this behavior.
              You can choose more than one  limb (more than one button). 
              At the end push button "Next step".'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                    nonsence=1
                    while nonsence==1:
                        nonsence=0
                        ev_automat_1=''
                        ev_automat_2=''
                        ev_automat_3=''
                        ev_automat_4=''
                        
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_automat_arm()    
                            app.MainLoop()
                            
                        if ev_automat_2==1:
                            automat[1]=1
                        if ev_automat_1==1:
                            automat[1]=2
                        if ev_automat_1=='' and ev_automat_2=='':
                            automat[1]=0
                        if ev_automat_1==1 and ev_automat_2==1:
                            automat[1]=''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME LIMB!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME LIMB!\n PLEASE TRY AGAIN!\n'''
                            nonsence=1
                            
                        if ev_automat_4==1:
                            automat[2]=1
                        if ev_automat_3==1:
                            automat[2]=2
                        if ev_automat_3=='' and ev_automat_4=='':
                            automat[2]=0
                        if ev_automat_3==1 and ev_automat_4==1:
                            automat[2]=''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME LIMB!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME LIMB!\n PLEASE TRY AGAIN!\n'''
                            nonsence=1
                        app=[]; app = wx.App(None)
                        del app
                                                            
                elif automat[0] in range (6,8): #Legs involved in automatism.
                    wx_text=nm+''', push the buttons corresponding to limbs involved in this behavior.
              You can choose more than one  limb (more than one button). 
              At the end push button "Next step".'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                    nonsence=1
                    while nonsence==1:
                        nonsence=0
                        ev_automat_5=''
                        ev_automat_6=''
                        ev_automat_7=''
                        ev_automat_8=''
                            
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_automat_leg()    
                            app.MainLoop()
                            
                        if ev_automat_6==1:
                            automat[1]=1
                        if ev_automat_5==1:
                            automat[1]=2
                        if ev_automat_5=='' and ev_automat_6=='':
                            automat[1]=0
                        if ev_automat_5==1 and ev_automat_6==1:
                            automat[1]=''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME LIMB!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME LIMB!\n PLEASE TRY AGAIN!\n'''
                            nonsence=1
                            
                        if ev_automat_8==1:
                            automat[2]=1
                        if ev_automat_7==1:
                            automat[2]=2
                        if ev_automat_7=='' and ev_automat_8=='':
                            automat[2]=0
                        if ev_automat_7==1 and ev_automat_8==1:
                            automat[2]=''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME LIMB!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME LIMB!\n PLEASE TRY AGAIN!\n'''
                            nonsence=1
                        app=[]; app = wx.App(None)
                        del app
                                                                   
                elif automat[0] == 8: #Types of oral automatism.
                    wx_text=nm+''', push the buttons corresponding to oral automatic behaviors.
              You can choose more than one behavior (more than one button). 
              At the end push button "Next step".'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                    global ev_oral_automat_1, ev_oral_automat_2, ev_oral_automat_3, ev_oral_automat_4, ev_oral_automat_5 
                    global ev_oral_automat_6, ev_oral_automat_7, ev_oral_automat_8
                    ev_oral_automat_1=''
                    ev_oral_automat_2=''
                    ev_oral_automat_3=''
                    ev_oral_automat_4=''
                    ev_oral_automat_5=''
                    ev_oral_automat_6=''
                    ev_oral_automat_7=''
                    ev_oral_automat_8=''
                    
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_oral_automat()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    
                    if ev_oral_automat_1==1:
                        automat[1]=1
                    if ev_oral_automat_2==1:
                        automat[2]=1
                    if ev_oral_automat_3==1:
                        automat[3]=1
                    if ev_oral_automat_4==1:
                        automat[4]=1
                    if ev_oral_automat_5==1:
                        automat[5]=1
                    if ev_oral_automat_8==1:
                        automat[8]=1
                    if ev_oral_automat_7==1:
                        automat[7]=1
                    if ev_oral_automat_6==1:
                        automat[6]=1
                        wx_text=nm+''', please, select whether you want to add the comment 
                        for "other" oral automatism'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        ev_comment_1=''
                        ev_comment_2=''
                        ev_comment_3=''                
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_free_text_comment()    
                            app.MainLoop()
                        del app
                        if ev_comment_1==1:
                            wx_text=nm+''', please, write your comment for "other" oral automatism
                            and push this button.'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_write()
                                app.MainLoop()
                            del app
                            automat[10]=value
                            print(value+"\n")
                            software_user_dialogue+=value+"\n"
                        if ev_comment_2==1:                        
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print('''\nSoftware:\n'''+nm+''', please, write your comment to "other" oral automatism and push Enter\n''' )
                            software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+nm+''', please, write your comment to "other" oral automatism and push Enter\n'''
                            automat[10]=input (nm+', please, write your comment to "other" oral automatism and push Enter\n')
                            software_user_dialogue+='''\n'''+current_time+'''\nUser typed:'''+'''\n'''+automat[10]+'''\n'''
                        if ev_comment_3==1:
                            automat[10]='No comment for "other" oral automatism'
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print('''Software:\n'''+automat[10])
                            software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+automat[10]+'''\n'''
                                               
                elif automat[0] == 10: #Types of facial expressions
                    wx_text=nm+''', push the button corresponding to facial expression.
              You can choose ONLY ONE behavior (only one button).'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                                
                    global ev_faceautomat_1, ev_faceautomat_2, ev_faceautomat_3, ev_faceautomat_4
                    global ev_faceautomat_5, ev_faceautomat_6, ev_faceautomat_7, ev_faceautomat_8
                    global ev_faceautomat_9, ev_faceautomat_10, ev_faceautomat_11
                    ev_faceautomat_1=''
                    ev_faceautomat_2=''
                    ev_faceautomat_3=''
                    ev_faceautomat_4=''
                    ev_faceautomat_5=''
                    ev_faceautomat_6=''
                    ev_faceautomat_7=''
                    ev_faceautomat_8=''
                    ev_faceautomat_9=''
                    ev_faceautomat_10=''
                    ev_faceautomat_11=''
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_face_automat()    
                        app.MainLoop()
                    del app
                    
                    if ev_faceautomat_1==1:
                        automat[1]=0
                    if ev_faceautomat_2==1:
                        automat[1]=1
                    if ev_faceautomat_3==1:
                        automat[1]=2
                    if ev_faceautomat_4==1:
                        automat[1]=3
                    if ev_faceautomat_5==1:
                        automat[1]=4
                    if ev_faceautomat_6==1:
                        automat[1]=5
                    if ev_faceautomat_7==1:
                        automat[1]=6
                    if ev_faceautomat_8==1:
                        automat[1]=7
                    if ev_faceautomat_9==1:
                        automat[1]=8
                    if ev_faceautomat_10==1:
                        automat[1]=9
                    if ev_faceautomat_11==1:
                        automat[1]=10
                        wx_text=nm+''', please, select whether you want to add the comment 
                        for "other" facial expression''' 
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        ev_comment_1=''
                        ev_comment_2=''
                        ev_comment_3=''                
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_free_text_comment()    
                            app.MainLoop()
                        del app
                        if ev_comment_1==1:
                            wx_text=nm+''', please, write your comment for "other" facial expression
                            and push this button.'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_write()
                                app.MainLoop()
                            del app
                            automat[11]=value
                            print(value+"\n")
                            software_user_dialogue+=value+"\n"
                        if ev_comment_2==1:                        
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print('''\nSoftware:\n'''+nm+''', please, write your comment to "other" oral automatism and push Enter\n''' )
                            software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+nm+''', please, write your comment to "other" facial expression and push Enter\n'''
                            automat[11]=input (nm+', please, write your comment to "other" facial expression and push Enter\n')
                            software_user_dialogue+='''\n'''+current_time+'''\nUser typed:'''+'''\n'''+automat[11]+'''\n'''
                        if ev_comment_3==1:
                            automat[11]='No comment for "other" facial expression'
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print('''Software:\n'''+automat[11])
                            software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+automat[11]+'''\n'''
                        
                wx_text=nm+''', if it is additional automatic behavior(s) in this event,
                                  push "yes", if not -"no"'''    
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                admove=''
                ev_yesno_1=''
                ev_yesno_2=''
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_yes_no()    
                    app.MainLoop()
                del app
                wx_text=''
                if ev_yesno_1=='y':
                    admove='y'
                if ev_yesno_2=='n':
                    admove='n'
                #print (admove)
                
                automatic_movements[i] = automatic_movements[i]+[automat]
    return automatic_movements
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_autonomic(ds_starter, editing_mode):
    global ev_yesno_1, ev_yesno_2, wx_text
    global ev_timing
    global software_user_dialogue
    global ev_event_editing_1, ev_event_editing_2, ev_event_editing_3, edit, event_editor 
    nm=ds_starter[0]
    if event_editor==0:
        ev_event_editing_1=''
        ev_event_editing_2=''
        ev_event_editing_3=''
    if editing_mode==0:
        autonomic_phenomena=[0]*ds_starter[15]
        repititions=ds_starter[15]
    if editing_mode==1:
        autonomic_phenomena=[0]
        repititions=1
    for i in range (0,repititions):
        #Step 1 - Introduction of timing of the event start in hour minute second.
        if editing_mode==0:
            event_numb='('+str(i+1)+' of '+str(ds_starter[15])+')'
        else:
            event_numb=''
        if ev_event_editing_1==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventstart=''
        else:
            eventstart=ictus[edit-1][2]
        if ev_event_editing_1==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                  or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' AUTONOMIC event START in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app           
                    eventstart=value
                    print(eventstart+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventstart=read_value
                try:
                    event_start=int(eventstart)
                except:
                    eventstart=''
                if len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                  or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                      now = datetime.now()
                      current_time = now.strftime("%H:%M:%S")
                      print(current_time)
                      print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                      software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
        #----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 2 - Introduction  timing of the end of the event in hour minute second.
        if ev_event_editing_2==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventend=''
        else:
            eventend=ictus[edit-1][3]        
        if ev_event_editing_2==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):   
            while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                  or int(eventend[4:])<0 or int(eventend[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' AUTONOMIC event END in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app           
                    eventend=value
                    print(eventend+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventend=read_value
                try:
                    event_end=int(eventend)
                except:
                    eventend=''
                if len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                  or int(eventend[4:])<0 or int(eventend[4:])>59:
                      now = datetime.now()
                      current_time = now.strftime("%H:%M:%S")
                      print(current_time)
                      print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                      software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
        #--------------------------------------------------------------------------------------------------------------------------------------------------------------
         #Step 3 - Control the error, when the end of the event defined earlier than it's start 
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==0:
                eventstartend=''
                wx_text='''SOMETHING WRONG, '''+nm+'''! Write the time of'''+event_numb+''' AUTONOMIC event START AND END
            in the form hhmmss,,hhmmss  in the row above and then press this button.'''
                print('\a')
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while len (eventstartend) !=14 or int(eventstartend[0:2])<0 or int(eventstartend[0:2])>24 or int(eventstartend[2:4])<0 or int(eventstartend[2:4])>59\
                      or int(eventstartend[4:6])<0 or int(eventstartend[4:6])>59 or int(eventstartend[8:10])<0 or int(eventstartend[8:10])>24 or int(eventstartend[10:12])<0\
                      or int(eventstartend[10:12])>59 or int(eventstartend[12:])<0 or int(eventstartend[12:])>59\
                      or int(eventstartend[0:2])*60**2+int(eventstartend[2:4])*60+int(eventstartend[4:6])>int(eventstartend[8:10])*60**2+int(eventstartend[10:12])*60+int(eventstartend[12:]):
    
                    print('\a')
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app
                    eventstartend=value
                    print(eventstartend+'\n')
                    software_user_dialogue+=value+"\n"
                    eventstart=eventstartend[0:6]
                    eventend=eventstartend[8:]
                    try:
                        event_start=int(eventstartend[0:6])
                        event_end=int(eventstartend[8:])
                    except:
                         eventstartend=''
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==1:
             eventstart=''
             while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
             or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                 wx_text='''SOMETHING WRONG, '''+nm+'''! You inserted event end earlier than  event start! 
                 Insert the time of'''+event_numb+''' AUTONOMIC event START in the form hhmmss'''
                 print('\a')
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 ev_timing=''
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventstart=read_value
                 
             eventend=''
             while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
             or int(eventend[4:])<0 or int(eventend[4:])>59:  
                 wx_text= nm+'''! You inserted event end earlier than  event start! 
             Insert the time of'''+event_numb+''' AUTONOMIC event END in the form hhmmss'''
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventend=read_value
        #------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 4 Types of autonomic phenomena
        autonomic_phenomena[i]=[2,i,eventstart,eventend]
        admove='y'
        if ev_event_editing_3==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while admove=='y':
                autonom=['']*4
                wx_text=nm+''', push the button corresponding to the types of autonomic phenomena.
              You can choose ONLY ONE  autonomic phenomenon type (only one button).'''    
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                        
                global ev_autonom_1, ev_autonom_2, ev_autonom_3, ev_autonom_4, ev_autonom_5, ev_autonom_6
                global ev_autonom_7, ev_autonom_8, ev_autonom_9, ev_autonom_10, ev_autonom_11, ev_autonom_12
                global ev_autonom_13, ev_autonom_14, ev_autonom_15, ev_autonom_16, ev_autonom_17, ev_autonom_18
                global ev_autonom_19
                ev_autonom_1=''
                ev_autonom_2=''
                ev_autonom_3=''
                ev_autonom_4=''
                ev_autonom_5=''
                ev_autonom_6=''
                ev_autonom_7=''
                ev_autonom_8=''
                ev_autonom_9=''
                ev_autonom_10=''
                ev_autonom_11=''
                ev_autonom_12=''
                ev_autonom_13=''
                ev_autonom_14=''
                ev_autonom_15=''
                ev_autonom_16=''
                ev_autonom_17=''
                ev_autonom_18=''
                ev_autonom_19=''
                            
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_autonom()    
                    app.MainLoop()
                del app
                wx_text=''
                
                if ev_autonom_1==1:
                    autonom[0]=0
                if ev_autonom_2==1:
                    autonom[0]=1
                if ev_autonom_3==1:
                    autonom[0]=2
                if ev_autonom_4==1:
                    autonom[0]=3
                if ev_autonom_5==1:
                    autonom[0]=4
                if ev_autonom_6==1:
                    autonom[0]=5
                if ev_autonom_7==1:
                    autonom[0]=6
                if ev_autonom_8==1:
                    autonom[0]=7
                if ev_autonom_9==1:
                    autonom[0]=8
                if ev_autonom_10==1:
                    autonom[0]=9
                if ev_autonom_11==1:
                    autonom[0]=10
                if ev_autonom_12==1:
                    autonom[0]=11
                if ev_autonom_13==1:
                    autonom[0]=12
                if ev_autonom_14==1:
                    autonom[0]=13
                if ev_autonom_15==1:
                    autonom[0]=14
                if ev_autonom_16==1:
                    autonom[0]=15
                if ev_autonom_17==1:
                    autonom[0]=16
                if ev_autonom_18==1:
                    autonom[0]=17
                if ev_autonom_19==1:
                    autonom[0]=18
                    wx_text=nm+''', please, select whether you want to add the comment 
                    for "other" autonomic phenomenon'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                    global ev_comment_1, ev_comment_2, ev_comment_3 
                    ev_comment_1=''
                    ev_comment_2=''
                    ev_comment_3=''                
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_free_text_comment()    
                        app.MainLoop()
                    del app
                    if ev_comment_1==1:
                        wx_text=nm+''', please, write your comment for "other" autonomic phenomenon
                        and push this button.'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_write()
                            app.MainLoop()
                        del app
                        autonom[3]=value
                        print(value+"\n")
                        software_user_dialogue+=value+"\n"
                    if ev_comment_2==1:                    
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print('''\nSoftware:\n'''+nm+''', please, write your comment to "other" autonomic phenomenon and push Enter\n''' )
                        software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+nm+'''
                        , please, write your comment to "other" oral autonomic phenomenon and push Enter\n'''
                        autonom[3]=input (nm+', please, write your comment to "other" autonomic phenomenon and push Enter\n')
                        software_user_dialogue+='''\n'''+current_time+'''\nUser typed:'''+'''\n'''+autonom[3]+'''\n'''
                    if ev_comment_3==1:
                        autonom[3]='No comment for "other" autonomic phenomenon'
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print('''Software:\n'''+autonom[3])
                        software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+autonom[3]+'''\n'''
                
                if autonom[0] in range(10,12): #side and power of pupil size change
                    nonsense=1
                    while nonsense==1:
                        wx_text=nm+''', push the buttons corresponding to pupil size changes.
                  You can choose more than one behavior (more than one button). 
                  At the end push button "Next step".''' 
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        
                        nonsense=0
                        global ev_pupsize_1, ev_pupsize_2, ev_pupsize_3, ev_pupsize_4
                        ev_pupsize_1=''
                        ev_pupsize_2=''
                        ev_pupsize_3=''
                        ev_pupsize_4=''
                        
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_pupil_size()    
                            app.MainLoop()
                        del app
                        wx_text=''
                        
                        if ev_pupsize_1==1: 
                            autonom[1]=0
                            
                        if ev_pupsize_2==1:
                            autonom[2]=0
                            
                        if ev_pupsize_3==1:
                            autonom[1]=1
                            
                        if ev_pupsize_4==1:
                            autonom[2]=1
                            
                        if ev_pupsize_1==1 and ev_pupsize_3==1:
                            autonom[1]=''
                            autonom[2]=''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME PUPIL!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME PUPIL!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_pupsize_2==1 and ev_pupsize_4==1:
                            autonom[1]=''
                            autonom[2]=''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME PUPIL!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME PUPIL!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                
                wx_text=nm+''', if it is additional autonomic behavior(s) in this event,
                                  push "yes", if not -"no"'''    
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                admove=''
                ev_yesno_1=''
                ev_yesno_2=''
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_yes_no()    
                    app.MainLoop()
                del app
                wx_text=''
                if ev_yesno_1=='y':
                    admove='y'
                if ev_yesno_2=='n':
                    admove='n'
                #print (admove)
                           
                autonomic_phenomena[i] = autonomic_phenomena[i]+[autonom]
    return autonomic_phenomena
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_eye_movements(ds_starter, editing_mode):
    global ev_yesno_1, ev_yesno_2, wx_text
    global ev_timing
    global ev_gaze_1, ev_gaze_2, ev_gaze_3, ev_gaze_4, ev_gaze_5, ev_gaze_6, ev_gaze_7, ev_gaze_8
    global ev_gaze_9, ev_gaze_10, ev_gaze_11, ev_gaze_12, ev_gaze_13, ev_gaze_14, ev_gaze_15, ev_gaze_16
    global software_user_dialogue
    global ev_event_editing_1, ev_event_editing_2, ev_event_editing_3, edit, event_editor    
    nm=ds_starter[0]
    if event_editor==0:
        ev_event_editing_1=''
        ev_event_editing_2=''
        ev_event_editing_3=''
    if editing_mode==0:
        eye_movements=[0]*ds_starter[11]
        repititions=ds_starter[11]
    if editing_mode==1:
        eye_movements=[0]
        repititions=1
    for i in range (0,repititions):
        #Step 1 - Introduction of timing of the event start in hour minute second.
        if editing_mode==0:
            event_numb='('+str(i+1)+' of '+str(ds_starter[11])+')'
        else:
            event_numb=''
        if ev_event_editing_1==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventstart=''
        else:
            eventstart=ictus[edit-1][2]
        if ev_event_editing_1==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                  or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' EYE MOVEMENTS event START in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app           
                    eventstart=value
                    print(eventstart+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventstart=read_value
                try:
                    event_start=int(eventstart)
                except:
                    eventstart=''
                if len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                  or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                      now = datetime.now()
                      current_time = now.strftime("%H:%M:%S")
                      print(current_time)
                      print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                      software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
        #----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 2 - Introduction  timing of the end of the event in hour minute second.
        if ev_event_editing_2==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventend=''
        else:
            eventend=ictus[edit-1][3]        
        if ev_event_editing_2==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):   
            while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                  or int(eventend[4:])<0 or int(eventend[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' EYE MOVEMENTS event END in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app           
                    eventend=value
                    software_user_dialogue+=value+"\n"
                    print(eventend+'\n')
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventend=read_value
                try:
                    event_end=int(eventend)
                except:
                    eventend=''
                if len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                  or int(eventend[4:])<0 or int(eventend[4:])>59:
                      now = datetime.now()
                      current_time = now.strftime("%H:%M:%S")
                      print(current_time)
                      print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                      software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
    #--------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 3 - Control the error, when the end of the event defined earlier than it's start 
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==0:
                eventstartend=''
                wx_text='''SOMETHING WRONG, '''+nm+'''! Write the time of'''+event_numb+''' EYE MOVEMENT event START AND END
            in the form hhmmss,,hhmmss  in the row above and then press this button.'''
                print('\a')
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while len (eventstartend) !=14 or int(eventstartend[0:2])<0 or int(eventstartend[0:2])>24 or int(eventstartend[2:4])<0 or int(eventstartend[2:4])>59\
                      or int(eventstartend[4:6])<0 or int(eventstartend[4:6])>59 or int(eventstartend[8:10])<0 or int(eventstartend[8:10])>24 or int(eventstartend[10:12])<0\
                      or int(eventstartend[10:12])>59 or int(eventstartend[12:])<0 or int(eventstartend[12:])>59\
                      or int(eventstartend[0:2])*60**2+int(eventstartend[2:4])*60+int(eventstartend[4:6])>int(eventstartend[8:10])*60**2+int(eventstartend[10:12])*60+int(eventstartend[12:]):
    
                    print('\a')
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app
                    eventstartend=value
                    print(eventstartend+'\n')
                    software_user_dialogue+=value+"\n"
                    eventstart=eventstartend[0:6]
                    eventend=eventstartend[8:]
                    try:
                        event_start=int(eventstartend[0:6])
                        event_end=int(eventstartend[8:])
                    except:
                         eventstartend=''
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==1:
             eventstart=''
             while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
             or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                 wx_text='''SOMETHING WRONG, '''+nm+'''! You inserted event end earlier than  event start! 
                 Insert the time of'''+event_numb+''' EYE MOVEMENT event START in the form hhmmss'''
                 print('\a')
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 ev_timing=''
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventstart=read_value
                 
             eventend=''
             while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
             or int(eventend[4:])<0 or int(eventend[4:])>59:  
                 wx_text= nm+'''! You inserted event end earlier than  event start! 
             Insert the time of'''+event_numb+''' EYE MOVEMENT event END in the form hhmmss'''
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventend=read_value
        #------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 4 Types of eye movement
        eye_movements[i]=[3,i,eventstart,eventend]
        global ev_conjugate_1, ev_conjugate_2
        admove='y'
        if ev_event_editing_3==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while admove=='y':
                eyemove=['']*23
                wx_text=nm+''', push the buttons corresponding to eye/eyelid movements.
                You can choose ONLY ONE behavior (only one button).''' 
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                       
                global ev_eyemove_1, ev_eyemove_2, ev_eyemove_3, ev_eyemove_4, ev_eyemove_5, ev_eyemove_6 
                global ev_eyemove_7, ev_eyemove_8, ev_eyemove_9, ev_eyemove_10, ev_eyemove_11, ev_eyemove_12
                ev_eyemove_1=''
                ev_eyemove_2=''
                ev_eyemove_3=''
                ev_eyemove_4=''
                ev_eyemove_5=''
                ev_eyemove_6=''
                ev_eyemove_7=''
                ev_eyemove_8=''
                ev_eyemove_9=''
                ev_eyemove_10=''
                ev_eyemove_11=''
                ev_eyemove_12=''
                    
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_eyemove()    
                    app.MainLoop()
                del app
                wx_text=''
                    
                if ev_eyemove_1==1:
                    eyemove[0]=0
                if ev_eyemove_2==1:
                    eyemove[0]=1
                if ev_eyemove_3==1:
                    eyemove[0]=2
                if ev_eyemove_4==1:
                    eyemove[0]=3
                if ev_eyemove_5==1:
                    eyemove[0]=4
                if ev_eyemove_6==1:
                    eyemove[0]=5
                if ev_eyemove_7==1:
                    eyemove[0]=6
                if ev_eyemove_8==1:
                    eyemove[0]=7
                if ev_eyemove_9==1:
                    eyemove[0]=8
                if ev_eyemove_10==1:
                    eyemove[0]=9
                if ev_eyemove_11==1:
                    eyemove[0]=10
                if ev_eyemove_12==1:
                    eyemove[0]=11
                        
                if eyemove[0]==0:
                    wx_text=wx_text=nm+''', Select type of eye movements: conjugate 
                vs.  dysconjugate eye deviation
              You can choose ONLY ONE type of eye movement (only one button).'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                    ev_conjugate_1=''
                    ev_conjugate_2=''
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_conjugate_dysconjugate_eye_movements()    
                        app.MainLoop()
                    del app
                    
                    if ev_conjugate_1==1:
                        eyemove[19]=1
                    if ev_conjugate_2==1:
                        eyemove[19]=2
                        
                    if  eyemove[19]==1:
                        wx_text=nm+''', push the buttons corresponding to conjugate gaze deviation.
                You can choose ONLY ONE gaze deviation (only one button).''' 
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                       
                        ev_gaze_1=''
                        ev_gaze_2=''                        
                        ev_gaze_3=''                       
                        ev_gaze_4=''                        
                        ev_gaze_5=''                        
                        ev_gaze_6=''                        
                        ev_gaze_7=''                        
                        ev_gaze_8=''                        
                        ev_gaze_9=''                        
                        ev_gaze_10=''                        
                        ev_gaze_11=''                        
                        ev_gaze_12=''                        
                        ev_gaze_13=''                        
                        ev_gaze_14=''                        
                        ev_gaze_15=''                        
                        ev_gaze_16=''
                                                                        
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_conjugate_gaze_deviation()    
                            app.MainLoop()
                        del app
                        
                        if ev_gaze_1==1:
                            eyemove[20]=1
                        if ev_gaze_2==1:
                            eyemove[20]=2
                        if ev_gaze_3==1:
                            eyemove[20]=3
                        if ev_gaze_4==1:
                            eyemove[20]=4
                        if ev_gaze_5==1:
                            eyemove[20]=5
                        if ev_gaze_6==1:
                            eyemove[20]=6
                        if ev_gaze_7==1:
                            eyemove[20]=7
                        if ev_gaze_8==1:
                            eyemove[20]=8
                        if ev_gaze_9==1:
                            eyemove[20]=9
                        if ev_gaze_10==1:
                            eyemove[20]=10
                        if ev_gaze_11==1:
                            eyemove[20]=11
                        if ev_gaze_12==1:
                            eyemove[20]=12
                        if ev_gaze_13==1:
                            eyemove[20]=13
                        if ev_gaze_14==1:
                            eyemove[20]=14
                        if ev_gaze_15==1:
                            eyemove[20]=15
                        if ev_gaze_16==1:
                            eyemove[20]=16
                            
                if eyemove[0]==4 or eyemove[0]==9 or eyemove[0]==10 or eyemove[0]==11 or eyemove[0]==7:
                    wx_text=nm+''', did observer try to open the patient's eye(s)?'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                    ev_yesno_1=''
                    ev_yesno_2=''
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_yes_no()    
                        app.MainLoop()
                    del app
                    wx_text=''
                    if ev_yesno_1=='y':
                        eyemove[21]=1                        
                    if ev_yesno_2=='n':
                        eyemove[21]=0
                    
                    if eyemove[21]==1:
                        wx_text=nm+''', did patient resist eye opening by observer?'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        ev_yesno_1=''
                        ev_yesno_2=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_yes_no()    
                            app.MainLoop()
                        del app
                        wx_text=''
                        if ev_yesno_1=='y':
                            eyemove[22]=1                        
                        if ev_yesno_2=='n':
                            eyemove[22]=0
                                                                                  
                if  eyemove[0]==1 or (eyemove[19]==2 and eyemove[0]==0):
                    wx_text=nm+''', push the buttons corresponding to side, direction and power of eye movements.
                  You can choose more than one behavior (more than one button). 
                  At the end push button "Next step".''' 
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                              
                    nonsense=1
                    while nonsense==1: #Side, direction and power of eye movements?
                        nonsense=0
                        global ev_eyesdp_1, ev_eyesdp_2, ev_eyesdp_3, ev_eyesdp_4, ev_eyesdp_5, ev_eyesdp_6
                        global ev_eyesdp_7, ev_eyesdp_8, ev_eyesdp_9, ev_eyesdp_10, ev_eyesdp_11, ev_eyesdp_12
                        global ev_eyesdp_13, ev_eyesdp_14, ev_eyesdp_15, ev_eyesdp_16
                        ev_eyesdp_1=''
                        ev_eyesdp_2=''
                        ev_eyesdp_3=''
                        ev_eyesdp_4=''
                        ev_eyesdp_5=''
                        ev_eyesdp_6=''
                        ev_eyesdp_7=''
                        ev_eyesdp_8=''
                        ev_eyesdp_9=''
                        ev_eyesdp_10=''
                        ev_eyesdp_11=''
                        ev_eyesdp_12=''
                        ev_eyesdp_13=''
                        ev_eyesdp_14=''
                        ev_eyesdp_15=''
                        ev_eyesdp_16=''
                                               
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_eyemove_side_direction_power()    
                            app.MainLoop()
                        del app
                        wx_text=''
                            
                        if ev_eyesdp_1==1:
                            eyemove[3]=0
                        if ev_eyesdp_2==1:
                            eyemove[4]=0
                        if ev_eyesdp_3==1:
                            eyemove[5]=0
                        if ev_eyesdp_4==1:
                            eyemove[6]=0
                        if ev_eyesdp_5==1:
                            eyemove[7]=0
                        if ev_eyesdp_6==1:
                            eyemove[8]=0
                        if ev_eyesdp_7==1:
                            eyemove[9]=0
                        if ev_eyesdp_8==1:
                            eyemove[10]=0
                        if ev_eyesdp_9==1:
                            eyemove[11]=0
                        if ev_eyesdp_10==1:
                            eyemove[12]=0
                        if ev_eyesdp_11==1:
                            eyemove[13]=0
                        if ev_eyesdp_12==1:
                            eyemove[14]=0
                        if ev_eyesdp_13==1:
                            eyemove[15]=0
                        if ev_eyesdp_14==1:
                            eyemove[16]=0
                        if ev_eyesdp_15==1:
                            eyemove[17]=0
                        if ev_eyesdp_16==1:
                            eyemove[18]=0
                            
                        if ev_eyesdp_1==1 and ev_eyesdp_5==1:
                            eyemove[3:]=['']*16                        
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_2==1 and ev_eyesdp_6==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_3==1 and ev_eyesdp_7==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_4==1 and ev_eyesdp_8==1:
                            eyemove[3:]=['']*16
                            nonsense=1
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU YOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                        if ev_eyesdp_9==1 and ev_eyesdp_13==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_10==1 and ev_eyesdp_14==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\YOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_11==1 and ev_eyesdp_15==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n'''
                            nonsense=1
                        if ev_eyesdp_12==1 and ev_eyesdp_16==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_1==1 and ev_eyesdp_2==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n'''
                            nonsense=1
                        if ev_eyesdp_3==1 and ev_eyesdp_4==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1                    
                        if ev_eyesdp_5==1 and ev_eyesdp_6==1:
                            eyemove[3:]=['']*16
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_7==1 and ev_eyesdp_8==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_9==1 and ev_eyesdp_10==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_11==1 and ev_eyesdp_12==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_13==1 and ev_eyesdp_14==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_15==1 and ev_eyesdp_16==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_1==1 and ev_eyesdp_6==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_2==1 and ev_eyesdp_5==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_3==1 and ev_eyesdp_8==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_4==1 and ev_eyesdp_7==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_9==1 and ev_eyesdp_14==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_10==1 and ev_eyesdp_13==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_11==1 and ev_eyesdp_16==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                        if ev_eyesdp_12==1 and ev_eyesdp_15==1:
                            eyemove[3:]=['']*16
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU SELECTED IMPOSSIBLE COMBINATION!\n PLEASE TRY AGAIN!\n'''
                            nonsense=1
                                            
                if  eyemove[0] in range (2,7):
                    wx_text=nm+''', push the buttons corresponding to side and power of the eye/eyelid movements.
                 You can choose more than one option (more than one button).
                 At the end push button "Next step".''' 
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        
                    nonsense=1
                    while nonsense==1: #Which eye/eyelid is moving?
                            
                        nonsense=0
                        global ev_eyeside_1, ev_eyeside_2, ev_eyeside_3, ev_eyeside_4
                        ev_eyeside_1=''
                        ev_eyeside_2=''
                        ev_eyeside_3=''
                        ev_eyeside_4=''
                            
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_eyemove_nodirect()    
                            app.MainLoop()
                        del app
                        wx_text=''
                            
                        if ev_eyeside_1==1: 
                            eyemove[1]=0
                                
                        if ev_eyeside_2==1:
                            eyemove[2]=0
                                
                        if ev_eyeside_3==1:
                            eyemove[1]=1
                                
                        if ev_eyeside_4==1:
                            eyemove[2]=1
                                
                        if ev_eyeside_1==1 and ev_eyeside_3==1:
                            eyemove[1]=''
                            eyemove[2]=''                        
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print('''\aSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME EYE/EYELID!\n
                                     PLEASE TRY AGAIN''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME EYE/EYELID!\n'''                        
                            nonsense=1
                        if ev_eyeside_2==1 and ev_eyeside_4==1:
                            eyemove[1]=''
                            eyemove[2]=''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print('''\aSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME EYE/EYELID!\n
                                     PLEASE TRY AGAIN''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nYOU CAN'T PRESS BOTH 'STRONG' AND 'WEAK' OF THE SAME EYE/EYELID!\n'''   
                            nonsense=1
                
                wx_text=nm+''', if it is additional eye movement behavior(s) in this event,
                                  push "yes", if not -"no"'''    
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                admove=''
                ev_yesno_1=''
                ev_yesno_2=''
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_yes_no()    
                    app.MainLoop()
                del app
                wx_text=''
                if ev_yesno_1=='y':
                    admove='y'
                if ev_yesno_2=='n':
                    admove='n'
                                  
                eye_movements[i] = eye_movements[i]+[eyemove]
    return eye_movements
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_hypermotor(ds_starter, editing_mode):
    global ev_yesno_1, ev_yesno_2, wx_text
    global ev_timing
    global software_user_dialogue
    global ev_event_editing_1, ev_event_editing_2, ev_event_editing_3, edit, event_editor    
    nm=ds_starter[0]
    if event_editor==0:
        ev_event_editing_1=''
        ev_event_editing_2=''
        ev_event_editing_3=''
#    hypermotor_movements=[0]*ds_starter[10]
#    for i in range (0,ds_starter[10]):
    if editing_mode==0:
        hypermotor_movements=[0]*ds_starter[10]
        repititions=ds_starter[10]
    if editing_mode==1:
        hypermotor_movements=[0]
        repititions=1
    for i in range (0,repititions):
        #Step 1 - Introduction of timing of the event start in hour minute second.
        if editing_mode==0:
            event_numb='('+str(i+1)+' of '+str(ds_starter[10])+')'
        else:
            event_numb=''
        if ev_event_editing_1==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventstart=''
        else:
            eventstart=ictus[edit-1][2]
        if ev_event_editing_1==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                  or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' HYPERKINETIC event START in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app           
                    eventstart=value
                    print(eventstart+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventstart=read_value
                try:
                    event_start=int(eventstart)
                except:
                    eventstart=''
                if len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                  or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                      now = datetime.now()
                      current_time = now.strftime("%H:%M:%S")
                      print(current_time)
                      print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                      software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
        #----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 2 - Introduction  timing of the end of the event in hour minute second.
        if ev_event_editing_2==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventend=''
        else:
            eventend=ictus[edit-1][3]        
        if ev_event_editing_2==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):   
            while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                  or int(eventend[4:])<0 or int(eventend[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' HYPERKINETIC event END in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app           
                    eventend=value
                    print(eventend+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventend=read_value
                try:
                    event_end=int(eventend)
                except:
                    eventend=''
                if len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                  or int(eventend[4:])<0 or int(eventend[4:])>59:
                      now = datetime.now()
                      current_time = now.strftime("%H:%M:%S")
                      print(current_time)
                      print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                      software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
        #--------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 3 - Control the error, when the end of the event defined earlier than it's start 
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==0:
                eventstartend=''
                wx_text='''SOMETHING WRONG, '''+nm+'''! Write the time of'''+event_numb+''' HYPERKINETIC event START AND END
            in the form hhmmss,,hhmmss  in the row above and then press this button.'''
                print('\a')
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while len (eventstartend) !=14 or int(eventstartend[0:2])<0 or int(eventstartend[0:2])>24 or int(eventstartend[2:4])<0 or int(eventstartend[2:4])>59\
                      or int(eventstartend[4:6])<0 or int(eventstartend[4:6])>59 or int(eventstartend[8:10])<0 or int(eventstartend[8:10])>24 or int(eventstartend[10:12])<0\
                      or int(eventstartend[10:12])>59 or int(eventstartend[12:])<0 or int(eventstartend[12:])>59\
                      or int(eventstartend[0:2])*60**2+int(eventstartend[2:4])*60+int(eventstartend[4:6])>int(eventstartend[8:10])*60**2+int(eventstartend[10:12])*60+int(eventstartend[12:]):
    
                    print('\a')
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app
                    eventstartend=value
                    print(eventstartend+'\n')
                    software_user_dialogue+=value+"\n"
                    eventstart=eventstartend[0:6]
                    eventend=eventstartend[8:]
                    try:
                        event_start=int(eventstartend[0:6])
                        event_end=int(eventstartend[8:])
                    except:
                         eventstartend=''
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==1:
             eventstart=''
             while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
             or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                 wx_text='''SOMETHING WRONG, '''+nm+'''! You inserted event end earlier than  event start! 
                 Insert the time of'''+event_numb+''' HYPERKINETIC event START in the form hhmmss'''
                 print('\a')
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 ev_timing=''
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventstart=read_value
                 
             eventend=''
             while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
             or int(eventend[4:])<0 or int(eventend[4:])>59:  
                 wx_text= nm+'''! You inserted event end earlier than  event start! 
             Insert the time of'''+event_numb+''' HYPERKINETIC event END in the form hhmmss'''
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventend=read_value
        #------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 4 Types of hyperkinetic movement
        hypermotor_movements[i]=[4,i,eventstart,eventend]
        admove='y'
        if ev_event_editing_3==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while admove=='y':            
                hypermotor=[0,'','','','','','','','','','','']
                wx_text=nm+''', Push the buttons corresponding to hyperkinetic behaviors.
              You can choose more than one behavior (more than one button).
              At the end push button "Next step".''' 
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                
                nonsense=1
                while nonsense==1:
                    nonsense=0
                    global ev_hypermotor_1, ev_hypermotor_2, ev_hypermotor_3, ev_hypermotor_4, ev_hypermotor_5
                    global ev_hypermotor_6
                    ev_hypermotor_1=''
                    ev_hypermotor_2=''
                    ev_hypermotor_3=''
                    ev_hypermotor_4=''
                    ev_hypermotor_5=''
                    ev_hypermotor_6=''
                    
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_hypermotor()    
                        app.MainLoop()
                    del app
                    wx_text=''
                    
                    if ev_hypermotor_1==1:
                        hypermotor[0]=1
                    if ev_hypermotor_2==1:
                        hypermotor[1]=1
                    if ev_hypermotor_3==1:
                        hypermotor[1]=2
                    if ev_hypermotor_4==1:
                        hypermotor[9]=1
                    if ev_hypermotor_5==1:
                        hypermotor[10]=1
                    if ev_hypermotor_6==1:
                        hypermotor[11]=1
                    if ev_hypermotor_2==1 and ev_hypermotor_3==1:
                        hypermotor[1]=''
                        print('''\aSOMETHING WRONG! YOU CAN'T CHOOSE MUTUALLY EXCLUSIVE OPTIONS!''')
                        nonsense=1
                        
                    global ev_other_bp_1, ev_other_bp_2, ev_other_bp_3, ev_other_bp_4, ev_other_bp_5
                    global ev_other_bp_6, ev_other_bp_7 #Here we apply GUI from 'other' events for hyperkinetic events.
                    wx_text=nm+''', push the buttons corresponding to body parts
                    that are especially prominently involved in this behavior.
              You can choose more than one  body part (more than one button).'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                    
                    ev_other_bp_1='' #Here we apply GUI from 'other' events for hyperkinetic events
                    ev_other_bp_2=''
                    ev_other_bp_3=''
                    ev_other_bp_4=''
                    ev_other_bp_5=''
                    ev_other_bp_6=''
                    ev_other_bp_7=''
                                                    
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_otherevent_body_parts() #Here we apply GUI from 'other' events for hyperkinetic events   
                        app.MainLoop()
                    del app
                    
                    if ev_other_bp_1==1:
                        hypermotor[2]=1
                    if ev_other_bp_2==1:
                        hypermotor[3]=1
                    if ev_other_bp_3==1:
                        hypermotor[4]=1
                    if ev_other_bp_4==1:
                        hypermotor[5]=1
                    if ev_other_bp_5==1:
                        hypermotor[6]=1
                    if ev_other_bp_6==1:
                        hypermotor[7]=1
                    if ev_other_bp_7==1:
                        hypermotor[8]=1
                
                
                wx_text=nm+''', if it is additional hyperkinetic behavior(s) in this event,
                                  push "yes", if not -"no"'''    
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                admove=''
                ev_yesno_1=''
                ev_yesno_2=''
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_yes_no()    
                    app.MainLoop()
                del app
                wx_text=''
                if ev_yesno_1=='y':
                    admove='y'
                if ev_yesno_2=='n':
                    admove='n'
                #print (admove)     
    
                hypermotor_movements[i] = hypermotor_movements[i]+[hypermotor]
    return hypermotor_movements
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_voice(ds_starter, editing_mode):
    global ev_yesno_1, ev_yesno_2, wx_text
    global ev_timing
    global software_user_dialogue
    global ev_event_editing_1, ev_event_editing_2, ev_event_editing_3, edit, event_editor    
    nm=ds_starter[0]
    if event_editor==0:
        ev_event_editing_1=''
        ev_event_editing_2=''
        ev_event_editing_3=''
    if editing_mode==0:
        voice_phenomena=[0]*ds_starter[12]
        repititions=ds_starter[12]
    if editing_mode==1:
        voice_phenomena=[0]
        repititions=1
    for i in range (0,repititions):
        #Step 1 - Introduction of timing of the event start in hour minute second.
        if editing_mode==0:
            event_numb='('+str(i+1)+' of '+str(ds_starter[12])+')'
        else:
            event_numb=''
        if ev_event_editing_1==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventstart=''
        else:
            eventstart=ictus[edit-1][2]
        if ev_event_editing_1==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                  or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' VOICE event START in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app           
                    eventstart=value
                    print(eventstart+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventstart=read_value
                try:
                    event_start=int(eventstart)
                except:
                    eventstart=''
                if len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                  or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                      now = datetime.now()
                      current_time = now.strftime("%H:%M:%S")
                      print(current_time)
                      print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                      software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
    #----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 2 - Introduction  timing of the end of the event in hour minute second.
        if ev_event_editing_2==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventend=''
        else:
            eventend=ictus[edit-1][3]        
        if ev_event_editing_2==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):   
            while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                  or int(eventend[4:])<0 or int(eventend[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' VOICE event END in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app           
                    eventend=value
                    print(eventend+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventend=read_value
                try:
                    event_end=int(eventend)
                except:
                    eventend=''
                if len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                  or int(eventend[4:])<0 or int(eventend[4:])>59:
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                    software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''  
        #--------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 3 - Control the error, when the end of the event defined earlier than it's start 
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==0:
                eventstartend=''
                wx_text='''SOMETHING WRONG, '''+nm+'''! Write the time of'''+event_numb+''' VOICE event START AND END
            in the form hhmmss,,hhmmss  in the row above and then press this button.'''
                print('\a')
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while len (eventstartend) !=14 or int(eventstartend[0:2])<0 or int(eventstartend[0:2])>24 or int(eventstartend[2:4])<0 or int(eventstartend[2:4])>59\
                      or int(eventstartend[4:6])<0 or int(eventstartend[4:6])>59 or int(eventstartend[8:10])<0 or int(eventstartend[8:10])>24 or int(eventstartend[10:12])<0\
                      or int(eventstartend[10:12])>59 or int(eventstartend[12:])<0 or int(eventstartend[12:])>59\
                      or int(eventstartend[0:2])*60**2+int(eventstartend[2:4])*60+int(eventstartend[4:6])>int(eventstartend[8:10])*60**2+int(eventstartend[10:12])*60+int(eventstartend[12:]):
    
                    print('\a')
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app
                    eventstartend=value
                    print(eventstartend+'\n')
                    software_user_dialogue+=value+"\n"
                    eventstart=eventstartend[0:6]
                    eventend=eventstartend[8:]
                    try:
                        event_start=int(eventstartend[0:6])
                        event_end=int(eventstartend[8:])
                    except:
                         eventstartend=''
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==1:
             eventstart=''
             while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
             or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                 wx_text='''SOMETHING WRONG, '''+nm+'''! You inserted event end earlier than  event start! 
                 Insert the time of'''+event_numb+''' VOICE event START in the form hhmmss'''
                 print('\a')
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 ev_timing=''
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventstart=read_value
                 
             eventend=''
             while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
             or int(eventend[4:])<0 or int(eventend[4:])>59:  
                 wx_text= nm+'''! You inserted event end earlier than  event start! 
             Insert the time of'''+event_numb+''' VOICE event END in the form hhmmss'''
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventend=read_value
        #------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 4 Types of voice phenomena
        voice_phenomena[i]=[5,i,eventstart,eventend]
        admove='y'
        if ev_event_editing_3==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while admove=='y':
                wx_text=nm+''', push the buttons corresponding to voice behaviors.
              You can choose only one behavior (only one button).''' 
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"            
                print('''          
              "Foreign language" - The patient speaks,
              but the interpreter does not understand the language''' )
                global ev_voice_1, ev_voice_2, ev_voice_3, ev_voice_4, ev_voice_5, ev_voice_6, ev_voice_7, ev_voice_8
                global ev_voice_9, ev_voice_10, ev_voice_11, ev_voice_12, ev_voice_13, ev_voice_14, ev_voice_15
                global ev_voice_16, ev_voice_17, ev_voice_18, ev_voice_19, ev_voice_20
                voice=['','','']
                ev_voice_1=''
                ev_voice_2=''
                ev_voice_3=''
                ev_voice_4=''
                ev_voice_5=''
                ev_voice_6=''
                ev_voice_7=''
                ev_voice_8=''
                ev_voice_9=''
                ev_voice_10=''
                ev_voice_11=''
                ev_voice_12=''
                ev_voice_13=''
                ev_voice_14=''
                ev_voice_15=''
                ev_voice_16=''
                ev_voice_17=''
                ev_voice_18=''
                ev_voice_19=''
                ev_voice_20=''
                            
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_voice()    
                    app.MainLoop()
                del app
                wx_text=''
                
                if ev_voice_1==1:
                    voice[0]=0
                if ev_voice_2==1:
                    voice[0]=1
                if ev_voice_3==1:
                    voice[0]=2
                if ev_voice_4==1:
                    voice[0]=3
                if ev_voice_5==1:
                    voice[0]=4
                if ev_voice_6==1:
                    voice[0]=5
                if ev_voice_7==1:
                    voice[0]=6
                if ev_voice_8==1:
                    voice[0]=7
                if ev_voice_9==1:
                    voice[0]=8
                if ev_voice_10==1:
                    voice[0]=9
                if ev_voice_11==1:
                    voice[0]=10
                if ev_voice_12==1:
                    voice[0]=11
                if ev_voice_13==1:
                    voice[0]=12
                if ev_voice_14==1:
                    voice[0]=13
                if ev_voice_15==1:
                    voice[0]=14
                if ev_voice_16==1:
                    voice[0]=15
                if ev_voice_17==1:
                    voice[0]=16
                if ev_voice_18==1:
                    voice[0]=17
                if ev_voice_19==1:
                    voice[0]=18
                if ev_voice_20==1:
                    voice[0]=19
                    wx_text=nm+''', please, select whether you want to add the comment 
                    for "other" voice behavior'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                    global ev_comment_1, ev_comment_2, ev_comment_3 
                    ev_comment_1=''
                    ev_comment_2=''
                    ev_comment_3=''                
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_free_text_comment()    
                        app.MainLoop()
                    del app
                    if ev_comment_1==1:
                        wx_text=nm+''', please, write your comment for "other" voice behavior
                        and push this button.'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_write()
                            app.MainLoop()
                        del app
                        voice[2]=value
                        print(value+"\n")
                        software_user_dialogue+=value+"\n"
                    if ev_comment_2==1:                    
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print('''\nSoftware:\n'''+nm+''', please, write your comment to "other" voice behavior and push Enter\n''' )
                        software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+nm+''', please, write your comment to "other" voice behavior and push Enter\n'''
                        voice[2]=input (nm+', please, write your comment to "other" voice behavior and push Enter\n')
                        software_user_dialogue+='''\n'''+current_time+'''\nUser typed:'''+'''\n'''+voice[2]+'''\n'''
                    if ev_comment_3==1:                    
                        voice[2]='No comment for "other" voice behavior'
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print('''Software:\n'''+voice[2])
                        software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+voice[2]+'''\n'''
                    
                if voice[0] == 2:
                    wx_text=nm+''', please select: spontaneous speech, answering questions or both.''' 
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"               
                    global ev_normspeech_1, ev_normspeech_2, ev_normspeech_3
                    ev_normspeech_1=''
                    ev_normspeech_2=''
                    ev_normspeech_3=''
                                   
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_normal_speech()    
                        app.MainLoop()
                    del app
                    wx_text=''
                    
                    if ev_normspeech_1==1:
                        voice[1]=0
                    if ev_normspeech_2==1:
                        voice[1]=1
                    if ev_normspeech_3==1:
                        voice[1]=2
                          
                if voice[0]==8 or voice[0]==9 or voice[0]==18:
                    wx_text=nm+''', please select: partial or complete aphasia.''' 
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                 
                    global ev_partcomp_1, ev_partcomp_2
                    ev_partcomp_1=''
                    ev_partcomp_2=''
                                    
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_partial_complete()    
                        app.MainLoop()
                    del app
                    wx_text=''
                    
                    if ev_partcomp_1==1:
                        voice[1]=0
                    if ev_partcomp_2==1:
                        voice[1]=1
                                        
                wx_text=nm+''', if it is additional voice behavior(s) in this event,
                                  push "yes", if not -"no"'''    
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                admove=''
                ev_yesno_1=''
                ev_yesno_2=''
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_yes_no()    
                    app.MainLoop()
                del app
                wx_text=''
                if ev_yesno_1=='y':
                    admove='y'
                if ev_yesno_2=='n':
                    admove='n'
                #print (admove)
                            
                voice_phenomena[i] = voice_phenomena[i]+[voice]
    return voice_phenomena
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_dialeptic(ds_starter, editing_mode):
    global ev_yesno_1, ev_yesno_2, wx_text
    global ev_timing
    global software_user_dialogue
    global ev_event_editing_1, ev_event_editing_2, ev_event_editing_3, edit, event_editor    
    nm=ds_starter[0]
    if event_editor==0:
        ev_event_editing_1=''
        ev_event_editing_2=''
        ev_event_editing_3=''
#    dialeptic_behavior=[0]*ds_starter[13]
#    for i in range (0,ds_starter[13]):
    if editing_mode==0:
        dialeptic_behavior=[0]*ds_starter[13]
        repititions=ds_starter[13]
    if editing_mode==1:
       dialeptic_behavior=[0]
       repititions=1
    for i in range (0,repititions):
        #Step 1 - Introduction of timing of the event start in hour minute second.
        if editing_mode==0:
            event_numb='('+str(i+1)+' of '+str(ds_starter[13])+')'
        else:
            event_numb=''
        if ev_event_editing_1==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventstart=''
        else:
            eventstart=ictus[edit-1][2]
        if ev_event_editing_1==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                  or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' DIALEPTIC event START in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app           
                    eventstart=value
                    print(eventstart+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventstart=read_value
                try:
                    event_start=int(eventstart)
                except:
                    eventstart=''
                if len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                  or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                      now = datetime.now()
                      current_time = now.strftime("%H:%M:%S")
                      print(current_time)
                      print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                      software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
        #----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 2 - Introduction  timing of the end of the event in hour minute second.
        if ev_event_editing_2==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventend=''
        else:
            eventend=ictus[edit-1][3]        
        if ev_event_editing_2==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):   
            while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                  or int(eventend[4:])<0 or int(eventend[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' DIALEPTIC event END in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app           
                    eventend=value
                    print(eventend+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventend=read_value
                try:
                    event_end=int(eventend)
                except:
                    eventend=''
                if len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                  or int(eventend[4:])<0 or int(eventend[4:])>59:
                      now = datetime.now()
                      current_time = now.strftime("%H:%M:%S")
                      print(current_time)
                      print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                      software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
        #--------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 3 - Control the error, when the end of the event defined earlier than it's start 
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==0:
                eventstartend=''
                wx_text='''SOMETHING WRONG, '''+nm+'''! Write the time of'''+event_numb+''' DIALEPTIC event START AND END
            in the form hhmmss,,hhmmss  in the row above and then press this button.'''
                print('\a')
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while len (eventstartend) !=14 or int(eventstartend[0:2])<0 or int(eventstartend[0:2])>24 or int(eventstartend[2:4])<0 or int(eventstartend[2:4])>59\
                      or int(eventstartend[4:6])<0 or int(eventstartend[4:6])>59 or int(eventstartend[8:10])<0 or int(eventstartend[8:10])>24 or int(eventstartend[10:12])<0\
                      or int(eventstartend[10:12])>59 or int(eventstartend[12:])<0 or int(eventstartend[12:])>59\
                      or int(eventstartend[0:2])*60**2+int(eventstartend[2:4])*60+int(eventstartend[4:6])>int(eventstartend[8:10])*60**2+int(eventstartend[10:12])*60+int(eventstartend[12:]):
    
                    print('\a')
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app
                    eventstartend=value
                    print(eventstartend+'\n')
                    software_user_dialogue+=value+"\n"
                    eventstart=eventstartend[0:6]
                    eventend=eventstartend[8:]
                    try:
                        event_start=int(eventstartend[0:6])
                        event_end=int(eventstartend[8:])
                    except:
                         eventstartend=''
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==1:
             eventstart=''
             while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
             or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                 wx_text='''SOMETHING WRONG, '''+nm+'''! You inserted event end earlier than  event start! 
                 Insert the time of'''+event_numb+''' DIALEPTIC event START in the form hhmmss'''
                 print('\a')
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 ev_timing=''
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventstart=read_value
                 
             eventend=''
             while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
             or int(eventend[4:])<0 or int(eventend[4:])>59:  
                 wx_text= nm+'''! You inserted event end earlier than  event start! 
             Insert the time of'''+event_numb+''' DIALEPTIC event END in the form hhmmss'''
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventend=read_value
#------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 4 Types of dialeptic behavior
        
        dialeptic_behavior[i]=[6,i,eventstart,eventend]
        admove='y'
        if ev_event_editing_3==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while admove=='y':
                wx_text=nm+''', push the buttons corresponding to dialeptic behaviors.
              You can choose only one type of behavior (only one button).'''    
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"            
                dialeptic=['']*13 #Diaaleptic behaviors.
                global ev_dialept_1, ev_dialept_2, ev_dialept_3, ev_dialept_4, ev_dialept_5
                global ev_dialept_6, ev_dialept_7, ev_dialept_8, ev_dialept_9, ev_dialept_10
                global ev_dialept_11, ev_dialept_12
                ev_dialept_1=''
                ev_dialept_2=''
                ev_dialept_3=''
                ev_dialept_4=''
                ev_dialept_5=''
                ev_dialept_6=''
                ev_dialept_7=''
                ev_dialept_8=''
                ev_dialept_9=''
                ev_dialept_10=''
                ev_dialept_11=''
                ev_dialept_12=''
              
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_dialeptic()    
                    app.MainLoop()
                del app
                    
                if ev_dialept_1==1:
                    dialeptic[0]=1
                if ev_dialept_2==1:
                    dialeptic[1]=1
                if ev_dialept_3==1:
                    dialeptic[2]=1
                if ev_dialept_4==1:
                    dialeptic[3]=1
                if ev_dialept_5==1:
                    dialeptic[4]=1
                if ev_dialept_6==1:
                    dialeptic[5]=1
                if ev_dialept_7==1:
                    dialeptic[6]=1
                if ev_dialept_8==1:
                    dialeptic[7]=1
                if ev_dialept_9==1:
                    dialeptic[8]=1
                if ev_dialept_10==1:
                    dialeptic[9]=1
                if ev_dialept_12==1:
                    dialeptic[12]=1
                if ev_dialept_11==1:
                    dialeptic[10]=1                
                    wx_text=nm+''', please, select whether you want to add the comment 
                    for "other" dialeptic behavior'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                    global ev_comment_1, ev_comment_2, ev_comment_3 
                    ev_comment_1=''
                    ev_comment_2=''
                    ev_comment_3=''                
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_free_text_comment()    
                        app.MainLoop()
                    del app
                    if ev_comment_1==1:
                        wx_text=nm+''', please, write your comment for "other" dialeptic behavior
                        and push this button.'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_write()
                            app.MainLoop()
                        del app
                        dialeptic[11]=value
                        print(value+"\n")
                        software_user_dialogue+=value+"\n"
                    if ev_comment_2==1:                    
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print('''\nSoftware:\n'''+nm+''', please, write your comment to "other" dialeptic behavior and push Enter\n''' )
                        software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+nm+''', please, write your comment to "other" dialeptic behavior and push Enter\n'''
                        dialeptic[11]=input (nm+', please, write your comment to "other" dialeptic behavior and push Enter\n')
                        software_user_dialogue+='''\n'''+current_time+'''\nUser typed:'''+'''\n'''+dialeptic[11]+'''\n'''
                    if ev_comment_3==1:
                        dialeptic[11]='No comment for "other" dialeptic behavior'                    
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print('''Software:\n'''+dialeptic[11])
                        software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+dialeptic[11]+'''\n'''
               
                wx_text=''
    
                wx_text=nm+''', if it is additional dialeptic behavior(s) in this event,
                                  push "yes", if not -"no"'''    
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                admove=''
                ev_yesno_1=''
                ev_yesno_2=''
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_yes_no()    
                    app.MainLoop()
                del app
                wx_text=''
                if ev_yesno_1=='y':
                    admove='y'
                if ev_yesno_2=='n':
                    admove='n'
                #print (admove)    
                
                dialeptic_behavior[i] = dialeptic_behavior[i]+[dialeptic]
    return dialeptic_behavior
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_gtcs(ds_starter, editing_mode):
    global ev_yesno_1, ev_yesno_2, wx_text
    global ev_gtcsendposition_1, ev_gtcsendposition_2, ev_gtcsendposition_3, ev_gtcsendposition_4
    global ev_timing
    global software_user_dialogue
    global ev_event_editing_1, ev_event_editing_2, ev_event_editing_3, edit, event_editor    
    nm=ds_starter[0]
    if event_editor==0:
        ev_event_editing_1=''
        ev_event_editing_2=''
        ev_event_editing_3=''
    if editing_mode==0:
        gtcs_features=[0]*ds_starter[14]
        repititions=ds_starter[14]
    if editing_mode==1:
        gtcs_features=[0]
        repititions=1
    for i in range (0,repititions):
        #Step 1 - Introduction of timing of the event start in hour minute second.
        if editing_mode==0:
            event_numb='('+str(i+1)+' of '+str(ds_starter[14])+')'
        else:
            event_numb=''
        if ev_event_editing_1==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventstart=''
        else:
            eventstart=ictus[edit-1][2]
        if ev_event_editing_1==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                  or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' GENERALIZED TONIC-CLONIC event START in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    eventstart=value
                    print(eventstart+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventstart=read_value
                try:
                    event_start=int(eventstart)
                except:
                    eventstart=''
                    if len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                    or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                        software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
    #----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 2 - Introduction  timing of the end of the event in hour minute second.
        if ev_event_editing_2==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventend=''
        else:
            eventend=ictus[edit-1][3]        
        if ev_event_editing_2==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):   
            while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                  or int(eventend[4:])<0 or int(eventend[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' GENERALIZED TONIC-CLONIC event END in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:                    
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    eventend=value
                    print(eventend+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventend=read_value
                try:
                    event_end=int(eventend)
                except:
                    eventend=''
                if len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                  or int(eventend[4:])<0 or int(eventend[4:])>59:
                      now = datetime.now()
                      current_time = now.strftime("%H:%M:%S")
                      print(current_time)
                      print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                      software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
        #--------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 3 - Control the error, when the end of the event defined earlier than it's start 
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==0:
                eventstartend=''
                wx_text='''SOMETHING WRONG, '''+nm+'''! Write the time of'''+event_numb+''' GENERALIZED TONIC-CLONIC event START AND END
            in the form hhmmss,,hhmmss  in the row above and then press this button.'''
                print('\a')
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while len (eventstartend) !=14 or int(eventstartend[0:2])<0 or int(eventstartend[0:2])>24 or int(eventstartend[2:4])<0 or int(eventstartend[2:4])>59\
                      or int(eventstartend[4:6])<0 or int(eventstartend[4:6])>59 or int(eventstartend[8:10])<0 or int(eventstartend[8:10])>24 or int(eventstartend[10:12])<0\
                      or int(eventstartend[10:12])>59 or int(eventstartend[12:])<0 or int(eventstartend[12:])>59\
                      or int(eventstartend[0:2])*60**2+int(eventstartend[2:4])*60+int(eventstartend[4:6])>int(eventstartend[8:10])*60**2+int(eventstartend[10:12])*60+int(eventstartend[12:]):
    
                    print('\a')
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    eventstartend=value
                    print(eventstartend+'\n')
                    software_user_dialogue+=value+"\n"
                    eventstart=eventstartend[0:6]
                    eventend=eventstartend[8:]
                    try:
                        event_start=int(eventstartend[0:6])
                        event_end=int(eventstartend[8:])
                    except:
                         eventstartend=''
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==1:
             eventstart=''
             while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
             or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                 wx_text='''SOMETHING WRONG, '''+nm+'''! You inserted event end earlier than  event start! 
                 Insert the time of'''+event_numb+''' GENERALIZED TONIC-CLONIC event START in the form hhmmss'''
                 print('\a')
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 ev_timing=''
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventstart=read_value
                 
             eventend=''
             while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
             or int(eventend[4:])<0 or int(eventend[4:])>59:  
                 wx_text= nm+'''! You inserted event end earlier than  event start! 
             Insert the time of'''+event_numb+''' GENERALIZED TONIC-CLONIC event END in the form hhmmss'''
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventend=read_value
        #------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 4 Types of GTCS behavior
        gtcs_features[i]=[7,i,eventstart,eventend]
        admove='y'
        if ev_event_editing_3==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):        
            while admove=='y':
                gtcs=['','','']
               
            #Time of transition from tonic to clonic phaze of GTCS
                ton2clon=''
                while len (ton2clon) !=6 or int(ton2clon[0:2])<0 or int(ton2clon[0:2])>24 or int(ton2clon[2:4])<0 or int(ton2clon[2:4])>59\
                      or int(ton2clon[4:])<0 or int(ton2clon[4:])>59:
                    wx_text=nm+''', write the time of the transition from tonic to clonic phaze of GTCS in the form hhmmss'''
                    if videoplayer==0:
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_write()
                            app.MainLoop()
                        del app           
                        ton2clon=value
                        print(ton2clon+'\n')
                        software_user_dialogue+=value+"\n"
                    if videoplayer==1:
                        offset_1=99999999
                        text_file=open("intercode.txt", "w", encoding='utf-8')
                        text_file.write(str(offset_1))
                        text_file.close()
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_video_player_event()    
                            app.MainLoop()
                        del app
                        if ev_timing==1:
                            text_file=open("intercode.txt", "r", encoding='utf-8')
                            read_value=text_file.read(10)
                            print(read_value+'\n')
                            software_user_dialogue+=read_value+"\n"
                            text_file.close()
                            ton2clon=read_value
                    try:
                        ton2_clon=int(ton2clon)
                        if len (ton2clon) !=6 or int(ton2clon[0:2])<0 or int(ton2clon[0:2])>24 or int(ton2clon[2:4])<0 or int(ton2clon[2:4])>59\
                        or int(ton2clon[4:])<0 or int(ton2clon[4:])>59\
                        or int(ton2clon[0:2])*60**2+int(ton2clon[2:4])*60+int(ton2clon[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
                        or int(ton2clon[0:2])*60**2+int(ton2clon[2:4])*60+int(ton2clon[4:])<int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:]):                       
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
                            ton2clon=''
                    except:
                        ton2clon=''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                        software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
                        
                gtcs[2]=ton2clon
                        
                #Position at the end of GTCS
                wx_text=nm+''', push the button corresponding to position at the end of GTCS.
              You can choose only one  position (only one button).'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                ev_gtcsendposition_1=''
                ev_gtcsendposition_2=''
                ev_gtcsendposition_3=''
                ev_gtcsendposition_4=''
                
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_gtcs_end_turn_position()    
                    app.MainLoop()
                del app
                
                if ev_gtcsendposition_1==1:
                    gtcs[0]=1
                if ev_gtcsendposition_2==1:
                    gtcs[0]=2
                if ev_gtcsendposition_3==1:
                    gtcs[0]=3
                if ev_gtcsendposition_4==1:
                    gtcs[0]=4
                
                #Position after the turn after the end of GTCS
                wx_text=nm+''', push the button corresponding to position after the turn after the end of GTCS.
              You can choose only one  position (only one button).'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                ev_gtcsendposition_1=''
                ev_gtcsendposition_2=''
                ev_gtcsendposition_3=''
                ev_gtcsendposition_4=''
                
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_gtcs_end_turn_position()    
                    app.MainLoop()
                del app
                
                if ev_gtcsendposition_1==1:
                    gtcs[1]=1
                if ev_gtcsendposition_2==1:
                    gtcs[1]=2
                if ev_gtcsendposition_3==1:
                    gtcs[1]=3
                if ev_gtcsendposition_4==1:
                    gtcs[1]=4
                                                
                wx_text=nm+''', if it is additional gtcs behavior(s) in this event,
                                  push "yes", if not -"no"'''    
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                admove=''
                ev_yesno_1=''
                ev_yesno_2=''
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_yes_no()    
                    app.MainLoop()
                del app
                wx_text=''
                if ev_yesno_1=='y':
                    admove='y'
                if ev_yesno_2=='n':
                    admove='n'
                #print (admove)
                
                gtcs_features[i] = gtcs_features[i]+[gtcs]
    return gtcs_features
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_aura(ds_starter, editing_mode):
    global ev_yesno_1, ev_yesno_2, wx_text
    global ev_verbauras_1, ev_verbauras_2, ev_verbauras_3, ev_verbauras_4, ev_verbauras_5
    global ev_verbauras_6, ev_verbauras_7, ev_verbauras_8, ev_verbauras_9, ev_verbauras_10, ev_verbauras_11
    global ev_timing
    global software_user_dialogue
    global ev_event_editing_1, ev_event_editing_2, ev_event_editing_3, edit, event_editor 
    nm=ds_starter[0]
    if event_editor==0:
        ev_event_editing_1=''
        ev_event_editing_2=''
        ev_event_editing_3=''
    if editing_mode==0:
        aura_report=[0]*ds_starter[16]
        repititions=ds_starter[16]
    if editing_mode==1:
        aura_report=[0]
        repititions=1
    for i in range (0,repititions):
        #Step 1 - Introduction of timing of the event start in hour minute second.
        if editing_mode==0:
            event_numb='('+str(i+1)+' of '+str(ds_starter[16])+')'
        else:
            event_numb=''
        if ev_event_editing_1==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventstart=''
        else:
            eventstart=ictus[edit-1][2]
        if ev_event_editing_1==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                  or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' AURA REPORTING event START in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app           
                    eventstart=value
                    print(eventstart+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventstart=read_value
                try:
                    event_start=int(eventstart)
                except:
                    eventstart=''
                if len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                  or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                       now = datetime.now()
                       current_time = now.strftime("%H:%M:%S")
                       print(current_time)
                       print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                       software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
  #----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 2 - Introduction  timing of the end of the event in hour minute second.
        if ev_event_editing_2==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventend=''
        else:
            eventend=ictus[edit-1][3]        
        if ev_event_editing_2==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):   
            while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                  or int(eventend[4:])<0 or int(eventend[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' AURA REPORTING event END in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app           
                    eventend=value
                    print(eventend+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventend=read_value
                try:
                    event_end=int(eventend)
                except:
                    eventend=''
                if len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                  or int(eventend[4:])<0 or int(eventend[4:])>59:
                      now = datetime.now()
                      current_time = now.strftime("%H:%M:%S")
                      print(current_time)
                      print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                      software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
  #--------------------------------------------------------------------------------------------------------------------------------------------------------------
         #Step 3 - Control the error, when the end of the event defined earlier than it's start 
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==0:
                eventstartend=''
                wx_text='''SOMETHING WRONG, '''+nm+'''! Write the time of'''+event_numb+''' AURA REPORTING event START AND END
            in the form hhmmss,,hhmmss  in the row above and then press this button.'''
                print('\a')
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while len (eventstartend) !=14 or int(eventstartend[0:2])<0 or int(eventstartend[0:2])>24 or int(eventstartend[2:4])<0 or int(eventstartend[2:4])>59\
                      or int(eventstartend[4:6])<0 or int(eventstartend[4:6])>59 or int(eventstartend[8:10])<0 or int(eventstartend[8:10])>24 or int(eventstartend[10:12])<0\
                      or int(eventstartend[10:12])>59 or int(eventstartend[12:])<0 or int(eventstartend[12:])>59\
                      or int(eventstartend[0:2])*60**2+int(eventstartend[2:4])*60+int(eventstartend[4:6])>int(eventstartend[8:10])*60**2+int(eventstartend[10:12])*60+int(eventstartend[12:]):
    
                    print('\a')
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    del app
                    eventstartend=value
                    print(eventstartend+'\n')
                    software_user_dialogue+=value+"\n"
                    eventstart=eventstartend[0:6]
                    eventend=eventstartend[8:]
                    try:
                        event_start=int(eventstartend[0:6])
                        event_end=int(eventstartend[8:])
                    except:
                         eventstartend=''
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==1:
             eventstart=''
             while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
             or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                 wx_text='''SOMETHING WRONG, '''+nm+'''! You inserted event end earlier than  event start! 
                 Insert the time of'''+event_numb+''' AURA REPORTING event START in the form hhmmss'''
                 print('\a')
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 ev_timing=''
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventstart=read_value
                 
             eventend=''
             while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
             or int(eventend[4:])<0 or int(eventend[4:])>59:  
                 wx_text= nm+'''! You inserted event end earlier than  event start! 
             Insert the time of'''+event_numb+''' AURA REPORTING event END in the form hhmmss'''
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventend=read_value
        #------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 4 Types of aura reporting
        aura_report[i]=[8,i,eventstart,eventend]
        admove='y'
        if ev_event_editing_3==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while admove=='y':
                wx_text=nm+''', push the button corresponding to aura report.
              You can choose only one  type of aura report (only one button).'''    
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"          
                aurareport=['']*133
                global ev_aurarep_1, ev_aurarep_2, ev_aurarep_3, ev_aurarep_4
                ev_aurarep_1=''
                ev_aurarep_2=''
                ev_aurarep_3=''
                ev_aurarep_4=''
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_aura_report()    
                    app.MainLoop()
                del app
                wx_text=''
                if ev_aurarep_1==1:
                    aurareport[0]=0
                if ev_aurarep_2==1:
                    aurareport[0]=1
                if ev_aurarep_3==1:
                    aurareport[0]=2
                if ev_aurarep_4==1:
                    aurareport[0]=3
                    
                if aurareport[0]==0: #Verbal aura
                    wx_text=nm+''', push the buttons corresponding to type of aura reported by patient.
              At this stage, You can choose only one type of aura (only one button).'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                    ev_verbauras_1=''
                    ev_verbauras_2=''
                    ev_verbauras_3=''
                    ev_verbauras_4=''
                    ev_verbauras_5=''
                    ev_verbauras_6=''
                    ev_verbauras_7=''
    #                ev_verbauras_8=''
                    ev_verbauras_9=''
                    ev_verbauras_10=''
                    ev_verbauras_11=''
                        
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_auras_verbal_1st_degree_resolution()    
                        app.MainLoop()
                    del app
                    
                    if ev_verbauras_1==1:
                        aurareport[36]=1
                    if ev_verbauras_2==1:
                        aurareport[36]=2
                    if ev_verbauras_3==1:
                        aurareport[36]=3
                    if ev_verbauras_4==1:
                        aurareport[36]=4
                    if ev_verbauras_5==1:
                        aurareport[36]=5
                    if ev_verbauras_6==1:
                        aurareport[36]=6
                    if ev_verbauras_7==1:
                        aurareport[36]=7
                    if ev_verbauras_9==1:
                        aurareport[36]=9
                    if ev_verbauras_10==1:
                        aurareport[36]=10
                    if ev_verbauras_11==1:
                        aurareport[36]=11
                        wx_text=nm+''', please, select whether you want to add the comment 
                        for "other" verbally reported aura'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        global ev_comment_1, ev_comment_2, ev_comment_3
                        ev_comment_1=''
                        ev_comment_2=''
                        ev_comment_3=''                
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_free_text_comment()    
                            app.MainLoop()
                        del app
                        if ev_comment_1==1:
                            wx_text=nm+''', please, write your comment for "other" verbally reported aura
                            and push this button.'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_write()
                                app.MainLoop()
                            del app
                            aurareport[127]=value
                            print(value+"\n")
                            software_user_dialogue+=value+"\n"
                        if ev_comment_2==1:                        
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print('''\nSoftware:\n'''+nm+''', please, write your comment to "other" verbally reported aura and push Enter\n''' )
                            software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+nm+''',
                            please, write your comment to "other" verbally reported aura and push Enter\n'''
                            aurareport[127]=input (nm+', please, write your comment to "other" verbally reported aura and push Enter\n')
                            software_user_dialogue+='''\n'''+current_time+'''\nUser typed:'''+'''\n'''+aurareport[127]+'''\n'''
                        if ev_comment_3==1:
                            aurareport[127]='No comment for "other" verbally reported aura'
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print('''Software:\n'''+aurareport[127])
                            software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+aurareport[127]+'''\n'''
                        
                    if aurareport[36]==1: #Somatosensory aura
                        global ev_somataura_1, ev_somataura_2, ev_somataura_3, ev_somataura_4, ev_somataura_5, ev_somataura_6
                        wx_text=nm+''', push the buttons corresponding to sensations indicated by the patient.
              You can choose more than one  sensation (more than one button). 
              At the end push button "Next step".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        ev_somataura_1=''
                        ev_somataura_2=''
                        ev_somataura_3=''
                        ev_somataura_4=''
                        ev_somataura_5=''
                        ev_somataura_6=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_auras_somatosensory()    
                            app.MainLoop()
                        del app
                        if ev_somataura_1==1:
                            aurareport[37]=1
                        if ev_somataura_2==1:
                            aurareport[38]=1
                        if ev_somataura_3==1:
                            aurareport[39]=1
                        if ev_somataura_4==1:
                            aurareport[40]=1
                        if ev_somataura_5==1:
                            aurareport[41]=1
                        if ev_somataura_6==1:
                            aurareport[121]=1
                            wx_text=nm+''', please, select whether you want to add the comment 
                            for "other" somatosensory aura'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            ev_comment_1=''
                            ev_comment_2=''
                            ev_comment_3=''                
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_free_text_comment()    
                                app.MainLoop()
                            del app
                            if ev_comment_1==1:
                                wx_text=nm+''', please, write your comment for "other" somatosensory aura
                                and push this button.'''
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print("Software:\n" +wx_text+"\n")
                                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                                if __name__ == '__main__':
                                    app = wx.App()
                                    frame = MyFrame_write()
                                    app.MainLoop()
                                del app
                                aurareport[128]=value
                                print(value+"\n")
                                software_user_dialogue+=value+"\n"
                            if ev_comment_2==1:                            
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print('''\nSoftware:\n'''+nm+''', please, write your comment to "other" somatosensory aura and push Enter\n''' )
                                software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+nm+''', please, write your comment to "other" somatosensory aura and push Enter\n'''
                                aurareport[128]=input (nm+', please, write your comment to "other" somatosensory aura and push Enter\n')
                                software_user_dialogue+='''\n'''+current_time+'''\nUser typed:'''+'''\n'''+aurareport[128]+'''\n'''
                            if ev_comment_3==1:
                                aurareport[128]='No comment for "other" somatosensory aura'
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print('''Software:\n'''+aurareport[128])
                                software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+aurareport[128]+'''\n'''
                                
                     
                    if aurareport[36]==2: #Visual aura
                        wx_text=nm+''', push the buttons corresponding to visual aura types.
              You can choose more than one  aura type (more than one button). 
              At the end push button "Next step".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        global ev_visaura_1, ev_visaura_2, ev_visaura_3, ev_visaura_4, ev_visaura_5
                        global ev_visaura_6, ev_visaura_7, ev_visaura_8, ev_visaura_9
                        global ev_visaura_10, ev_visaura_11, ev_visaura_12, ev_visaura_13
                        global ev_visaura_14, ev_visaura_15, ev_visaura_16  
                        ev_visaura_1=''
                        ev_visaura_2=''
                        ev_visaura_3=''
                        ev_visaura_4=''
                        ev_visaura_5=''
                        ev_visaura_6=''
                        ev_visaura_7=''
                        ev_visaura_8=''
                        ev_visaura_9=''
                        ev_visaura_10=''
                        ev_visaura_11=''
                        ev_visaura_12=''
                        ev_visaura_13=''
                        ev_visaura_14=''
                        ev_visaura_15=''
                        ev_visaura_16=''
                        
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_auras_visual()    
                            app.MainLoop()
                        del app
                        
                        if ev_visaura_1==1:
                            aurareport[45]=1
                        if ev_visaura_2==1:
                            aurareport[46]=1
                        if ev_visaura_3==1:
                            aurareport[47]=1
                        if ev_visaura_4==1:
                            aurareport[48]=1
                        if ev_visaura_5==1:
                            aurareport[49]=1
                        if ev_visaura_6==1:
                            aurareport[50]=1
                        if ev_visaura_7==1:
                            aurareport[51]=1
                        if ev_visaura_8==1:
                            aurareport[52]=1
                        if ev_visaura_9==1:
                            aurareport[53]=1
                        if ev_visaura_10==1:
                            aurareport[54]=1
                        if ev_visaura_11==1:
                            aurareport[55]=1
                        if ev_visaura_12==1:
                            aurareport[56]=1
                        if ev_visaura_13==1:
                            aurareport[57]=1
                        if ev_visaura_14==1:
                            aurareport[58]=1
                        if ev_visaura_15==1:
                            aurareport[59]=1
                        if ev_visaura_16==1:
                            aurareport[122]=1
                            wx_text=nm+''', please, select whether you want to add the comment 
                            for "other" visual aura'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            ev_comment_1=''
                            ev_comment_2=''
                            ev_comment_3=''                
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_free_text_comment()    
                                app.MainLoop()
                            del app
                            if ev_comment_1==1:
                                wx_text=nm+''', please, write your comment for "other" visual aura
                                and push this button.'''
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print("Software:\n" +wx_text+"\n")
                                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                                if __name__ == '__main__':
                                    app = wx.App()
                                    frame = MyFrame_write()
                                    app.MainLoop()
                                del app
                                aurareport[129]=value
                                print(value+"\n")
                                software_user_dialogue+=value+"\n"
                            if ev_comment_2==1:                            
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print('''\nSoftware:\n'''+nm+''', please, write your comment to "other" visual aura and push Enter\n''' )
                                software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+nm+''', please, write your comment to "other" visual aura and push Enter\n'''
                                aurareport[129]=input (nm+', please, write your comment to "other" visual aura and push Enter\n')
                                software_user_dialogue+='''\n'''+current_time+'''\nUser typed:'''+'''\n'''+aurareport[129]+'''\n'''
                            if ev_comment_3==1:
                                aurareport[129]='No comment for "other" visual aura'
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print('''Software:\n'''+aurareport[129])
                                software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+aurareport[129]+'''\n'''
                            
                        global ev_visauraloc_1, ev_visauraloc_2, ev_visauraloc_3, ev_visauraloc_4, ev_visauraloc_5
                        global ev_visauraloc_6, ev_visauraloc_7, ev_visauraloc_8, ev_visauraloc_9
                        global ev_visauraloc_10
                        wx_text=nm+''', push the buttons corresponding to visual aura location.
              You can choose more than one  aura type (more than one button). 
              At the end push button "Next step".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        ev_visauraloc_1=''
                        ev_visauraloc_2=''
                        ev_visauraloc_3=''
                        ev_visauraloc_4=''
                        ev_visauraloc_5=''
                        ev_visauraloc_6=''
                        ev_visauraloc_7=''
                        ev_visauraloc_8=''
                        ev_visauraloc_9=''
                        ev_visauraloc_10=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_auras_visual_location()    
                            app.MainLoop()
                        del app
                        if ev_visauraloc_1==1:
                            aurareport[60]=1
                        if ev_visauraloc_2==1:
                            aurareport[61]=1
                        if ev_visauraloc_3==1:
                            aurareport[62]=1
                        if ev_visauraloc_4==1:
                            aurareport[63]=1
                        if ev_visauraloc_5==1:
                            aurareport[64]=1
                        if ev_visauraloc_6==1:
                            aurareport[65]=1
                        if ev_visauraloc_7==1:
                            aurareport[66]=1
                        if ev_visauraloc_8==1:
                            aurareport[67]=1
                        if ev_visauraloc_9==1:
                            aurareport[68]=1
                        if ev_visauraloc_10==1:
                            aurareport[69]=1
                            
                        global ev_visauramov_1, ev_visauramov_2, ev_visauramov_3, ev_visauramov_4, ev_visauramov_5
                        global ev_visauramov_6, ev_visauramov_7
                        wx_text=nm+''', push the buttons corresponding to visual aura location.
              You can choose more than one  aura type (more than one button). 
              At the end push button "Next step".'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        ev_visauramov_1=''
                        ev_visauramov_2=''
                        ev_visauramov_3=''
                        ev_visauramov_4=''
                        ev_visauramov_5=''
                        ev_visauramov_6=''
                        ev_visauramov_7=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_auras_visual_motion()    
                            app.MainLoop()
                        del app
                        if ev_visauramov_1==1:
                            aurareport[70]=1
                        if ev_visauramov_2==1:
                            aurareport[71]=1
                        if ev_visauramov_3==1:
                            aurareport[72]=1
                        if ev_visauramov_4==1:
                            aurareport[73]=1
                        if ev_visauramov_5==1:
                            aurareport[74]=1
                        if ev_visauramov_6==1:
                            aurareport[75]=1
                        if ev_visauramov_7==1:
                            aurareport[76]=1
                            
                            
                    if aurareport[36]==3: #Auditory aura
                        global ev_audiaura_1, ev_audiaura_2, ev_audiaura_3, ev_audiaura_4, ev_audiaura_5, ev_audiaura_6, ev_audiaura_7
                        wx_text=nm+''', push the buttons corresponding to auditory aura types.
              You can choose more than one  aura type (more than one button).'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        ev_audiaura_1=''
                        ev_audiaura_2=''
                        ev_audiaura_3=''
                        ev_audiaura_4=''
                        ev_audiaura_5=''
                        ev_audiaura_6=''
                        ev_audiaura_7=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_auras_auditory()    
                            app.MainLoop()
                        del app
                        if ev_audiaura_1==1:
                            aurareport[77]=1
                        if ev_audiaura_2==1:
                            aurareport[78]=1
                        if ev_audiaura_3==1:
                            aurareport[79]=1
                        if ev_audiaura_4==1:
                            aurareport[80]=1
                        if ev_audiaura_5==1:
                            aurareport[81]=1
                        if ev_audiaura_6==1:
                            aurareport[82]=1
                        if ev_audiaura_7==1:
                            aurareport[123]=1
                            wx_text=nm+''', please, select whether you want to add the comment 
                            for "other" auditory aura'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            ev_comment_1=''
                            ev_comment_2=''
                            ev_comment_3=''                
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_free_text_comment()    
                                app.MainLoop()
                            del app
                            if ev_comment_1==1:
                                wx_text=nm+''', please, write your comment for "other" auditory aura
                                and push this button.'''
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print("Software:\n" +wx_text+"\n")
                                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                                if __name__ == '__main__':
                                    app = wx.App()
                                    frame = MyFrame_write()
                                    app.MainLoop()
                                del app
                                aurareport[130]=value
                                print(value+"\n")
                                software_user_dialogue+=value+"\n"
                            if ev_comment_2==1:                            
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print('''\nSoftware:\n'''+nm+''', please, write your comment to "other" auditory aura and push Enter\n''' )
                                software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+nm+''', please, write your comment to "other" auditory aura and push Enter\n'''
                                aurareport[130]=input (nm+', please, write your comment to "other" auditory aura and push Enter\n')
                                software_user_dialogue+='''\n'''+current_time+'''\nUser typed:'''+'''\n'''+aurareport[130]+'''\n'''
                            if ev_comment_3==1:
                                aurareport[130]='No comment for "other" auditory aura'
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print('''Software:\n'''+aurareport[130])
                                software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+aurareport[130]+'''\n'''
                            
                        global ev_audiauraside_1, ev_audiauraside_2, ev_audiauraside_3                    
                        wx_text=nm+''', push the buttons corresponding to 
                        auditory aura lateralization.
              You can choose only one lateralization option (only one button).'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        ev_audiauraside_1=''
                        ev_audiauraside_2=''
                        ev_audiauraside_3=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_auras_auditory_side()    
                            app.MainLoop()
                        del app
                        if ev_audiauraside_1==1:
                            aurareport[83]=1
                        if ev_audiauraside_2==1:
                            aurareport[84]=1
                        if ev_audiauraside_3==1:
                            aurareport[85]=1
                            
                    if aurareport[36]==7 or aurareport[36]==8:
                        global ev_autonomaura_1, ev_autonomaura_2, ev_autonomaura_3, ev_autonomaura_4, ev_autonomaura_5, ev_autonomaura_6 
                        global ev_autonomaura_7, ev_autonomaura_8, ev_autonomaura_9
                        global ev_visceraura_1, ev_visceraura_2, ev_visceraura_3, ev_visceraura_4, ev_visceraura_5    
                        global ev_visceraura_6, ev_visceraura_7, ev_visceraura_8
                        wx_text=nm+''', push the buttons corresponding to autonomic/viscral aura types.
              You can choose more than one  aura type (more than one button).'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        ev_autonomaura_1=''
                        ev_autonomaura_2=''
                        ev_autonomaura_3=''
                        ev_autonomaura_4=''
                        ev_autonomaura_5=''
                        ev_autonomaura_6=''
                        ev_autonomaura_7=''
                        ev_autonomaura_8=''
                        ev_autonomaura_9=''
                        ev_visceraura_1=''
                        ev_visceraura_2=''
                        ev_visceraura_3=''
                        ev_visceraura_4=''
                        ev_visceraura_5=''
                        ev_visceraura_6=''
                        ev_visceraura_7=''
                        ev_visceraura_8=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_auras_autonomic()    
                            app.MainLoop()
                        del app
                        if ev_autonomaura_1==1:
                            aurareport[86]=1
                        if ev_autonomaura_2==1:
                            aurareport[87]=1
                        if ev_autonomaura_3==1:
                            aurareport[88]=1
                        if ev_autonomaura_4==1:
                            aurareport[89]=1
                        if ev_autonomaura_5==1:
                            aurareport[90]=1
                        if ev_autonomaura_6==1:
                            aurareport[91]=1
                        if ev_autonomaura_7==1:
                            aurareport[92]=1
                        if ev_autonomaura_8==1:
                            aurareport[93]=1
                        if ev_visceraura_8==1:
                            aurareport[125]=1
                        if ev_visceraura_1==1:
                            aurareport[94]=1
                        if ev_visceraura_2==1:
                            aurareport[95]=1
                        if ev_visceraura_3==1:
                            aurareport[96]=1
                        if ev_visceraura_4==1:
                            aurareport[97]=1
                        if ev_visceraura_5==1:
                            aurareport[98]=1
                        if ev_visceraura_6==1:
                            aurareport[99]=1
                        if ev_visceraura_7==1:
                            aurareport[100]=1
                        if ev_autonomaura_9==1:
                            aurareport[124]=1
                            wx_text=nm+''', please, select whether you want to add the comment 
                            for "other" autonomic/visceral aura'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            ev_comment_1=''
                            ev_comment_2=''
                            ev_comment_3=''                
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_free_text_comment()    
                                app.MainLoop()
                            del app
                            if ev_comment_1==1:
                                wx_text=nm+''', please, write your comment for "other" autonomic/visceral aura
                                and push this button.'''
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print("Software:\n" +wx_text+"\n")
                                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                                if __name__ == '__main__':
                                    app = wx.App()
                                    frame = MyFrame_write()
                                    app.MainLoop()
                                del app
                                aurareport[131]=value
                                print(value+"\n")
                                software_user_dialogue+=value+"\n"
                            if ev_comment_2==1:                            
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print('''\nSoftware:\n'''+nm+''', please, write your comment to "other" autonomic/visceral aura and push Enter\n''' )
                                software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+nm+''',
                                please, write your comment to "other" autonomic/visceral aura and push Enter\n'''
                                aurareport[131]=input (nm+', please, write your comment to "other" autonomic/visceral aura and push Enter\n')
                                now = datetime.now()                
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print("User typed:")
                                print(aurareport[131])
                                software_user_dialogue+='''\n'''+current_time+'''\nUser typed:'''+'''\n'''+aurareport[131]+'''\n'''
                            if ev_comment_3==1:
                                aurareport[131]='No comment for "other" autonomic/visceral aura'
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print('''Software:\n'''+aurareport[131])
                                software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+aurareport[131]+'''\n'''
                                                                    
                    if aurareport[36]==9:
                        wx_text=nm+''', push the buttons corresponding to experiential aura types.
              You can choose more than one  aura type (more than one button).'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        global ev_experaura_1, ev_experaura_2, ev_experaura_3, ev_experaura_4, ev_experaura_5    
                        global ev_experaura_6, ev_experaura_7, ev_experaura_8, ev_experaura_9
                        global ev_experaura_10, ev_experaura_11, ev_experaura_12, ev_experaura_13
                        global ev_experaura_14, ev_experaura_15, ev_experaura_16, ev_experaura_17, ev_experaura_18 
                        ev_experaura_1=''
                        ev_experaura_2=''
                        ev_experaura_3=''
                        ev_experaura_4=''
                        ev_experaura_5=''
                        ev_experaura_6=''
                        ev_experaura_7=''
                        ev_experaura_8=''
                        ev_experaura_9=''
                        ev_experaura_10=''
                        ev_experaura_11=''
                        ev_experaura_12=''
                        ev_experaura_13=''
                        ev_experaura_14=''
                        ev_experaura_15=''
                        ev_experaura_16=''
                        ev_experaura_17=''
                        ev_experaura_18=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_auras_experiential()    
                            app.MainLoop()
                        del app
                        if ev_experaura_1==1:
                            aurareport[101]=1
                        if ev_experaura_2==1:
                            aurareport[102]=1
                        if ev_experaura_3==1:
                            aurareport[103]=1
                        if ev_experaura_4==1:
                            aurareport[104]=1
                        if ev_experaura_5==1:
                            aurareport[105]=1
                        if ev_experaura_6==1:
                            aurareport[106]=1
                        if ev_experaura_7==1:
                            aurareport[107]=1
                        if ev_experaura_8==1:
                            aurareport[108]=1
                        if ev_experaura_9==1:
                            aurareport[109]=1
                        if ev_experaura_10==1:
                            aurareport[110]=1
                        if ev_experaura_11==1:
                            aurareport[111]=1
                        if ev_experaura_12==1:
                            aurareport[112]=1
                        if ev_experaura_13==1:
                            aurareport[113]=1
                        if ev_experaura_14==1:
                            aurareport[114]=1
                        if ev_experaura_15==1:
                            aurareport[115]=1
                        if ev_experaura_16==1:
                            aurareport[116]=1
                        if ev_experaura_18==1:
                            aurareport[126]=1
                        if ev_experaura_17==1:
                            aurareport[117]=1
                            wx_text=nm+''', please, select whether you want to add the comment 
                            for "other" experiential aura'''
                            now = datetime.now()
                            current_time = now.strftime("%H:%M:%S")
                            print(current_time)
                            print("Software:\n" +wx_text+"\n")
                            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                            ev_comment_1=''
                            ev_comment_2=''
                            ev_comment_3=''                
                            if __name__ == '__main__':
                                app = wx.App()
                                frame = MyFrame_free_text_comment()    
                                app.MainLoop()
                            del app
                            if ev_comment_1==1:
                                wx_text=nm+''', please, write your comment for "other" experiential aura
                                and push this button.'''
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print("Software:\n" +wx_text+"\n")
                                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                                if __name__ == '__main__':
                                    app = wx.App()
                                    frame = MyFrame_write()
                                    app.MainLoop()
                                del app
                                aurareport[132]=value
                                print(value+"\n")
                                software_user_dialogue+=value+"\n"
                            if ev_comment_2==1:                            
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print('''\nSoftware:\n'''+nm+''', please, write your comment to "other" experiential aura and push Enter\n''' )
                                software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+nm+''', please, write your comment to "other" expiriential aura and push Enter\n'''
                                aurareport[132]=input (nm+', please, write your comment to "other" experiential aura and push Enter\n')
                                now = datetime.now()                
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print("User typed:")
                                print(aurareport[132])
                                software_user_dialogue+='''\n'''+current_time+'''\nUser typed:'''+'''\n'''+aurareport[132]+'''\n'''
                            if ev_comment_3==1:
                                aurareport[132]='No comment for "other" experiential aura'
                                now = datetime.now()
                                current_time = now.strftime("%H:%M:%S")
                                print(current_time)
                                print('''Software:\n'''+aurareport[132])
                                software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+aurareport[132]+'''\n'''
                            
                    if aurareport[36]==5:
                        global ev_olfacaura_1, ev_olfacaura_2, ev_olfacaura_3
                        wx_text=nm+''', push the buttons corresponding to olfactory aura characteristics.
              You can choose only one  aura characteristic (only one button).'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        ev_olfacaura_1=''
                        ev_olfacaura_2=''
                        ev_olfacaura_3=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_auras_olfactory()    
                            app.MainLoop()
                        del app
                        if ev_olfacaura_1==1:
                             aurareport[118]=1
                        if ev_olfacaura_2==1:
                             aurareport[119]=1
                        if ev_olfacaura_3==1:
                             aurareport[120]=1
                    
                
                if aurareport[0]==2 or aurareport[36]==1: #Parts of the body indicated by the patient
                    wx_text=nm+''', push the buttons corresponding to body parts indicated by the patient.
              You can choose more than one  body part (more than one button). 
              At the end push button "Next step".'''    
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                      
                    global ev_aura_bp_1, ev_aura_bp_2, ev_aura_bp_3, ev_aura_bp_4, ev_aura_bp_5
                    global ev_aura_bp_6, ev_aura_bp_7, ev_aura_bp_8, ev_aura_bp_9
                    ev_aura_bp_1=''
                    ev_aura_bp_2=''
                    ev_aura_bp_3=''
                    ev_aura_bp_4=''
                    ev_aura_bp_5=''
                    ev_aura_bp_6=''
                    ev_aura_bp_7=''
                    ev_aura_bp_8=''
                    ev_aura_bp_9=''
                        
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_aura_bp()    
                        app.MainLoop()
                    del app
                    wx_text=''
                    if ev_aura_bp_6==1: #aura in genital area
                        aurareport[34]=1
                        
                       
                    if ev_aura_bp_1==1: #Parts of the head indicated by the patient
                        wx_text=nm+''', Push the buttons corresponding to areas of the head indicated by the patient.
              You can choose more than one  area (more than one button). 
              At the end push button "Next step".'''    
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                  
                        global ev_aura_head_1, ev_aura_head_2, ev_aura_head_3, ev_aura_head_4, ev_aura_head_5
                        global ev_aura_head_6, ev_aura_head_7, ev_aura_head_8, ev_aura_head_9, ev_aura_head_10
                        global ev_aura_head_11
                        ev_aura_head_1=''
                        ev_aura_head_2=''
                        ev_aura_head_3=''
                        ev_aura_head_4=''
                        ev_aura_head_5=''
                        ev_aura_head_6=''
                        ev_aura_head_7=''
                        ev_aura_head_8=''
                        ev_aura_head_9=''
                        ev_aura_head_10=''
                        ev_aura_head_11=''
                        
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_aura_head()    
                            app.MainLoop()
                        del app
                        wx_text=''
                            
                        if ev_aura_head_1==1:
                            aurareport[1]=1
                        if ev_aura_head_2==1:
                            aurareport[2]=1
                        if ev_aura_head_3==1:
                            aurareport[3]=1
                        if ev_aura_head_4==1:
                            aurareport[4]=1
                        if ev_aura_head_5==1:
                            aurareport[5]=1
                        if ev_aura_head_6==1:
                            aurareport[6]=1
                        if ev_aura_head_7==1:
                            aurareport[7]=1
                        if ev_aura_head_8==1:
                            aurareport[8]=1
                        if ev_aura_head_9==1:
                            aurareport[9]=1
                        if ev_aura_head_10==1:
                            aurareport[10]=1
                        if ev_aura_head_11==1:
                            aurareport[11]=1
                                                                                                   
                    if ev_aura_bp_2==1: #Parts of the neck indicated by the patient
                        wx_text=nm+''', Push the buttons corresponding to neck areas indicated by the patient.
              You can choose more than one area (more than one button). At the end push button "Next step".'''    
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                  
                        global ev_aura_neck_1, ev_aura_neck_2, ev_aura_neck_3, ev_aura_neck_4
                        ev_aura_neck_1=''
                        ev_aura_neck_2=''
                        ev_aura_neck_3=''
                        ev_aura_neck_4=''
                        
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_aura_neck()    
                            app.MainLoop()
                        del app
                        wx_text=''
                        
                        if ev_aura_neck_1==1:
                            aurareport[12]=1
                        if ev_aura_neck_2==1:
                            aurareport[13]=1
                        if ev_aura_neck_3==1:
                            aurareport[14]=1
                        if ev_aura_neck_4==1:
                            aurareport[15]=1
                        
                    if ev_aura_bp_3==1: #Parts of the trunk indicated by the patient
                        wx_text=nm+''', push the buttons corresponding to neck areas indicated by the patient.
              You can choose more than one area (more than one button). At the end push button "Next step".'''    
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                  
                        global ev_aura_trunk_1, ev_aura_trunk_2, ev_aura_trunk_3, ev_aura_trunk_4
                        global ev_aura_trunk_5, ev_aura_trunk_6, ev_aura_trunk_7, ev_aura_trunk_8
                        ev_aura_trunk_1=''
                        ev_aura_trunk_2=''
                        ev_aura_trunk_3=''
                        ev_aura_trunk_4=''
                        ev_aura_trunk_5=''
                        ev_aura_trunk_6=''
                        ev_aura_trunk_7=''
                        ev_aura_trunk_8=''
                        
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_aura_trunk()    
                            app.MainLoop()
                        del app
                        wx_text=''
                        
                        if ev_aura_trunk_1==1:
                            aurareport[16]=1 
                        if ev_aura_trunk_2==1:
                            aurareport[17]=1
                        if ev_aura_trunk_3==1:
                            aurareport[18]=1
                        if ev_aura_trunk_4==1:
                            aurareport[19]=1
                        if ev_aura_trunk_5==1:
                            aurareport[20]=1
                        if ev_aura_trunk_6==1:
                            aurareport[21]=1
                        if ev_aura_trunk_7==1:
                            aurareport[22]=1
                        if ev_aura_trunk_8==1:
                            aurareport[23]=1                                    
    
                    if ev_aura_bp_4==1: #Limbs indicated by the patient
                        wx_text=nm+''', push the buttons corresponding to limbs indicated by the patient.
              You can choose more than one limb (more than one button). At the end push button "Next step".'''    
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                   
                        global ev_aura_limb_1, ev_aura_limb_2, ev_aura_limb_3, ev_aura_limb_4, ev_aura_limb_5
                        global ev_aura_limb_6, ev_aura_limb_7, ev_aura_limb_8
                        ev_aura_limb_1=''
                        ev_aura_limb_2=''
                        ev_aura_limb_3=''
                        ev_aura_limb_4=''
                        ev_aura_limb_5=''
                        ev_aura_limb_6=''
                        ev_aura_limb_7=''
                        ev_aura_limb_8=''
                                            
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_aura_limbs()    
                            app.MainLoop()
                        del app
                        wx_text=''
                        
                        if ev_aura_limb_1==1:
                            aurareport[24]=1
                        if ev_aura_limb_2==1:
                            aurareport[25]=1
                        if ev_aura_limb_3==1:
                            aurareport[26]=1
                        if ev_aura_limb_4==1:
                            aurareport[27]=1
                        if ev_aura_limb_5==1:
                            aurareport[28]=1
                        if ev_aura_limb_6==1:
                            aurareport[29]=1
                        if ev_aura_limb_7==1:
                            aurareport[30]=1
                        if ev_aura_limb_8==1:
                            aurareport[31]=1
                        
                    if ev_aura_bp_5==1:
                        wx_text=nm+''', push the buttons corresponding to side of buttock region,
                        indicated by the patient.
              You can choose both sides (push sequentually two buttons). At the end push button "Next step".'''    
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                    
                        global ev_aura_but_1, ev_aura_but_2
                        ev_aura_but_1=''
                        ev_aura_but_2=''
                        
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_aura_buttock()    
                            app.MainLoop()
                        del app
                        wx_text=''
                        if ev_aura_but_1==1:
                            aurareport[32]=1
                        if ev_aura_but_2==1:
                            aurareport[33]=1
                            
                    if ev_aura_bp_7==1:
                        aurareport[42]=1
                    if ev_aura_bp_8==1:
                        aurareport[43]=1
                    if ev_aura_bp_9==1:
                        aurareport[44]=1
                                                      
                elif aurareport[0]==3: #Buttock indicated by the patient
                    wx_text=nm+''', push the button corresponding to aura report: general alarming.
                  You can choose only one  type of aura report (only one button).'''    
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                 
                    global ev_alarm_1, ev_alarm_2, ev_alarm_3
                    ev_alarm_1=''
                    ev_alarm_2=''
                    ev_alarm_3=''
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_aura_report_general_alarming()    
                        app.MainLoop()
                    del app
                    wx_text=''
                    if ev_alarm_1==1:
                        aurareport[35]=0
                    if ev_alarm_2==1:
                        aurareport[35]=1
                    if ev_alarm_3==1:
                        aurareport[35]=2
                        
                wx_text=nm+''', if it is additional aura reporting behavior(s) in this event,
                                  push "yes", if not -"no"'''    
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                admove=''
                ev_yesno_1=''
                ev_yesno_2=''
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_yes_no()    
                    app.MainLoop()
                del app
                wx_text=''
                if ev_yesno_1=='y':
                    admove='y'
                if ev_yesno_2=='n':
                    admove='n'
                #print (admove)                               
               
                aura_report[i] = aura_report[i]+[aurareport]
    return aura_report
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_other(ds_starter, editing_mode):
    global ev_yesno_1, ev_yesno_2, wx_text
    global ev_timing
    global software_user_dialogue
    global ev_event_editing_1, ev_event_editing_2, ev_event_editing_3, edit, event_editor
    if event_editor==0:
        ev_event_editing_1=''
        ev_event_editing_2=''
        ev_event_editing_3=''
    nm=ds_starter[0]
    if editing_mode==0:
        other_event=[0]*ds_starter[17]
        repititions=ds_starter[17]
    if editing_mode==1:
        other_event=[0]
        repititions=1
    for i in range (0,repititions):
        #Step 1 - Introduction of timing of the event start in hour minute second.
        if editing_mode==0:
            event_numb='('+str(i+1)+' of '+str(ds_starter[17])+')'
        else:
            event_numb=''
        if ev_event_editing_1==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventstart=''
        else:
            eventstart=ictus[edit-1][2]
        if ev_event_editing_1==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                  or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' "OTHER" event START in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None) 
                    del app
                    eventstart=value
                    print(eventstart+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventstart=read_value
                try:
                    event_start=int(eventstart)
                except:
                    eventstart=''
                if len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                  or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                      now = datetime.now()
                      current_time = now.strftime("%H:%M:%S")
                      print(current_time)
                      print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                      software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
        #----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 2 - Introduction  timing of the end of the event in hour minute second.
        if ev_event_editing_2==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventend=''
        else:
            eventend=ictus[edit-1][3]        
        if ev_event_editing_2==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):   
            while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                  or int(eventend[4:])<0 or int(eventend[4:])>59:
                wx_text=nm+''', write the time of the '''+event_numb+''' "OTHER" event END in the form hhmmss'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    eventend=value
                    print(eventend+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventend=read_value
                try:
                    event_end=int(eventend)
                except:
                    eventend=''
                if len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                  or int(eventend[4:])<0 or int(eventend[4:])>59:
                     now = datetime.now()
                     current_time = now.strftime("%H:%M:%S")
                     print(current_time)
                     print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                     software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
        #--------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 3 - Control the error, when the end of the event defined earlier than it's start 
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==0:
                eventstartend=''
                wx_text='''SOMETHING WRONG, '''+nm+'''! Write the time of'''+event_numb+''' "OTHER" event START AND END
            in the form hhmmss,,hhmmss  in the row above and then press this button.'''
                print('\a')
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                while len (eventstartend) !=14 or int(eventstartend[0:2])<0 or int(eventstartend[0:2])>24 or int(eventstartend[2:4])<0 or int(eventstartend[2:4])>59\
                      or int(eventstartend[4:6])<0 or int(eventstartend[4:6])>59 or int(eventstartend[8:10])<0 or int(eventstartend[8:10])>24 or int(eventstartend[10:12])<0\
                      or int(eventstartend[10:12])>59 or int(eventstartend[12:])<0 or int(eventstartend[12:])>59\
                      or int(eventstartend[0:2])*60**2+int(eventstartend[2:4])*60+int(eventstartend[4:6])>int(eventstartend[8:10])*60**2+int(eventstartend[10:12])*60+int(eventstartend[12:]):
    
                    print('\a')
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    eventstartend=value
                    print(eventstartend+'\n')
                    software_user_dialogue+=value+"\n"
                    eventstart=eventstartend[0:6]
                    eventend=eventstartend[8:]
                    try:
                        event_start=int(eventstartend[0:6])
                        event_end=int(eventstartend[8:])
                    except:
                         eventstartend=''
        while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
        and videoplayer==1:
             eventstart=''
             while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
             or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                 wx_text='''SOMETHING WRONG, '''+nm+'''! You inserted event end earlier than  event start! 
                 Insert the time of'''+event_numb+''' "OTHER" event START in the form hhmmss'''
                 print('\a')
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 ev_timing=''
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventstart=read_value
                 
             eventend=''
             while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
             or int(eventend[4:])<0 or int(eventend[4:])>59:  
                 wx_text= nm+'''! You inserted event end earlier than  event start! 
             Insert the time of'''+event_numb+''' "OTHER" event END in the form hhmmss'''
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventend=read_value
        #------------------------------------------------------------------------------------------------------------------------------------------------------------
        #Step 4 Types of 'other' event
        other_event[i]=[9,i,eventstart,eventend]
        admove='y'
        if ev_event_editing_3==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            while admove=='y':
                print('''          
              "PLMS" - periodic limb movements of sleep
               RLS - restless leg syndrom''')
                wx_text=nm+''', push the button corresponding to "other" behaviors.
              You can choose only one  type of "other" behavior (only one button).'''    
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                        
                otherevent=['']*28
                global ev_other_1, ev_other_2, ev_other_3, ev_other_4, ev_other_5, ev_other_6, ev_other_7
                global ev_other_8, ev_other_9, ev_other_10, ev_other_11, ev_other_12, ev_other_13, ev_other_14, ev_other_15
                global ev_other_16, ev_other_17, ev_other_18, ev_other_19, ev_other_20, ev_other_21, ev_other_22, ev_other_23
                global ev_other_24, ev_other_25, ev_other_26, ev_other_27, ev_other_28, ev_other_29
                ev_other_25='' 
                ev_other_1=''
                ev_other_2=''
                ev_other_3=''
                ev_other_4=''
                ev_other_5=''
                ev_other_6=''
                ev_other_7=''
                ev_other_8=''
                ev_other_9=''
                ev_other_10=''
                ev_other_11=''
                ev_other_12=''
                ev_other_13=''
                ev_other_14=''
                ev_other_15=''
                ev_other_16=''
                ev_other_17=''
                ev_other_18=''
                ev_other_19=''
                ev_other_20=''
                ev_other_21=''
                ev_other_22=''
                ev_other_23=''
                ev_other_24=''
                ev_other_25=''
                ev_other_26=''
                ev_other_27=''
                ev_other_28=''
                ev_other_29=''               
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_other()    
                    app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                wx_text=''
                if ev_other_1==1:
                    otherevent[0]=0
                if ev_other_2==1:
                    otherevent[0]=1
                if ev_other_3==1:
                    otherevent[0]=2
                if ev_other_4==1:
                    otherevent[0]=3
                if ev_other_5==1:
                    otherevent[0]=4
                if ev_other_6==1:
                    otherevent[0]=5
                if ev_other_7==1:
                    otherevent[0]=6
                if ev_other_8==1:
                    otherevent[0]=7
                if ev_other_9==1:
                    otherevent[0]=8
                if ev_other_10==1:
                    otherevent[0]=9
                if ev_other_11==1:
                    otherevent[0]=10
                if ev_other_12==1:
                    otherevent[0]=11
                if ev_other_13==1:
                    otherevent[0]=12
                if ev_other_14==1:
                    otherevent[0]=13
                if ev_other_15==1:
                    otherevent[0]=14
                if ev_other_16==1:
                    otherevent[0]=15
                if ev_other_17==1:
                    otherevent[0]=16
                if ev_other_18==1:
                    otherevent[0]=17
                if ev_other_19==1:
                    otherevent[0]=18
                if ev_other_20==1:
                    otherevent[0]=19
                if ev_other_21==1:
                    otherevent[0]=20
                if ev_other_22==1:
                    otherevent[0]=21
                if ev_other_23==1:
                    otherevent[0]=22
                if ev_other_24==1:
                    otherevent[0]=23
                if ev_other_25==1:
                    otherevent[0]=24
                if ev_other_26==1:
                    otherevent[0]=25                
                if ev_other_28==1:
                    otherevent[0]=27
                if ev_other_29==1:
                    otherevent[0]=28
                if ev_other_27==1:
                    otherevent[0]=26                
                    wx_text=nm+''', please, select whether you want to add the comment 
                    for "other" behavior in "other" event'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                    global ev_comment_1, ev_comment_2, ev_comment_3 
                    ev_comment_1=''
                    ev_comment_2=''
                    ev_comment_3=''                
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_free_text_comment()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_comment_1==1:
                        wx_text=nm+''', please, write your comment for "other" behavior in "other" event
                        and push this button.'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_write()
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        otherevent[27]=value
                        print(value+"\n")
                        software_user_dialogue+=value+"\n"
                    if ev_comment_2==1:
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print('''\nSoftware:\n'''+nm+''', please, write your comment to "other" behavior in "other" event and push Enter\n''' )
                        software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+nm+''', please, write your comment to "other" behavior in "other" event and push Enter\n'''
                        otherevent[27]=input (nm+', please, write your comment to "other" behavior in "other" event and push Enter\n')
                        now = datetime.now()                
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("User typed:")
                        print(otherevent[27])
                        software_user_dialogue+='''\n'''+current_time+'''\nUser typed:'''+'''\n'''+otherevent[27]+'''\n'''
                    if ev_comment_3==1:
                        otherevent[27]='No comment for "other" behavior in "other" event'
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print('''Software:\n'''+otherevent[27])
                        software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+otherevent[27]+'''\n'''
                    
                if otherevent[0] in range(17,23) or otherevent[0]==24 or otherevent[0]==27:
                    global ev_other_bp_1, ev_other_bp_2, ev_other_bp_3, ev_other_bp_4, ev_other_bp_5
                    global ev_other_bp_6, ev_other_bp_7
                    wx_text=nm+''', push the button corresponding to body part involved in this behavior.
              You can choose more than one  body part (more than one button).'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                    
                    ev_other_bp_1=''
                    ev_other_bp_2=''
                    ev_other_bp_3=''
                    ev_other_bp_4=''
                    ev_other_bp_5=''
                    ev_other_bp_6=''
                    ev_other_bp_7=''
                                                    
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_otherevent_body_parts()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    
                    if ev_other_bp_1==1:
                        otherevent[18]=1
                    if ev_other_bp_2==1:
                        otherevent[19]=1
                    if ev_other_bp_3==1:
                        otherevent[20]=1
                    if ev_other_bp_4==1:
                        otherevent[21]=1
                    if ev_other_bp_5==1:
                        otherevent[22]=1
                    if ev_other_bp_6==1:
                        otherevent[23]=1
                    if ev_other_bp_7==1:
                        otherevent[24]=1
                                                 
                if otherevent[0]==0:
                    wx_text=nm+''', push the button corresponding to "other" behaviors: vigilance change.
              You can choose only one  type of vigilance change (only one button)'''    
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                    global ev_wigil_1, ev_wigil_2
                    ev_wigil_1=''
                    ev_wigil_2=''
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_other_vigilance_change()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    wx_text=''
                    if ev_wigil_1==1:
                        otherevent[1]=0
                    if ev_wigil_2==1:
                        otherevent[1]=1
    
    
                if otherevent[0]==1: #position change
                    wx_text=nm+''', push the button corresponding to possition change.
              You can choose only one  type of vigilance change (only one button)'''    
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                                
                    global ev_poschange_1, ev_poschange_2, ev_poschange_3, ev_poschange_4, ev_poschange_5
                    global ev_poschange_6, ev_poschange_7
                    ev_poschange_1=''
                    ev_poschange_2=''
                    ev_poschange_3=''
                    ev_poschange_4=''
                    ev_poschange_5=''
                    ev_poschange_6=''
                    ev_poschange_7=''
                                    
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_position_change()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    wx_text=''
                    if ev_poschange_1==1:
                        otherevent[2]=0
                    if ev_poschange_2==1:
                        otherevent[2]=1
                    if ev_poschange_3==1:
                        otherevent[2]=2
                    if ev_poschange_4==1:
                        otherevent[2]=3
                    if ev_poschange_5==1:
                        otherevent[2]=4
                    if ev_poschange_6==1:
                        otherevent[2]=5
                    if ev_poschange_7==1:
                        otherevent[2]=6
                    
                if otherevent[0]==9 or otherevent[0]==16:
                    wx_text=nm+''', push the buttons corresponding to limbs involved in this behavior.
              You can choose more than one limb (more than one button). At the end push button "Next step".'''    
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                    global ev_other_limb_1, ev_other_limb_2, ev_other_limb_3, ev_other_limb_4, ev_other_limb_5
                    global ev_other_limb_6, ev_other_limb_7, ev_other_limb_8
                    ev_other_limb_1=''
                    ev_other_limb_2=''
                    ev_other_limb_3=''
                    ev_other_limb_4=''
                    ev_other_limb_5=''
                    ev_other_limb_6=''
                    ev_other_limb_7=''
                    ev_other_limb_8=''
                    
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_otherevent_limbs()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    wx_text=''
                    if ev_other_limb_1==1:
                        otherevent[3]=1
                    if ev_other_limb_2==1:
                        otherevent[4]=1
                    if ev_other_limb_3==1:
                        otherevent[5]=1
                    if ev_other_limb_4==1:
                        otherevent[6]=1
                    if ev_other_limb_5==1:
                        otherevent[7]=1
                    if ev_other_limb_6==1:
                        otherevent[8]=1
                    if ev_other_limb_7==1:
                        otherevent[9]=1
                    if ev_other_limb_8==1:
                        otherevent[10]=1
                        
                if otherevent[0]==14:
                    wx_text=nm+''', push the buttons corresponding to body parts involved in trauma.
              You can choose more than one body part (more than one button). 
              At the end push button "Next step".'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                    global ev_trauma_1, ev_trauma_2, ev_trauma_3, ev_trauma_4, ev_trauma_5
                    global ev_trauma_6, ev_trauma_7
                    ev_trauma_1=''
                    ev_trauma_2=''
                    ev_trauma_3=''
                    ev_trauma_4=''
                    ev_trauma_5=''
                    ev_trauma_6=''
                    ev_trauma_7=''
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_physical_trauma()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_trauma_1==1:
                        otherevent[11]=1
                    if ev_trauma_2==1:
                        otherevent[12]=1
                    if ev_trauma_3==1:
                        otherevent[13]=1
                    if ev_trauma_4==1:
                        otherevent[14]=1
                    if ev_trauma_5==1:
                        otherevent[15]=1
                    if ev_trauma_6==1:
                        otherevent[16]=1
                    if ev_trauma_7==1:
                        otherevent[17]=1
                        
                if otherevent[0]==10: #Yes or no drop attack
                    wx_text=nm+''', please, selsct: whether or not this fall is drop attack'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                    global ev_drop_1, ev_drop_2
                    ev_drop_1=''
                    ev_drop_2=''                
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_drop()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_drop_1==1:
                        otherevent[25]=1
                    if ev_drop_2==1:
                        otherevent[25]=2
                        
                if otherevent[25]==2:
                    wx_text=nm+''', please, select whether or not this fall was under controll'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                    global ev_fallcontrol_1, ev_fallcontrol_2, ev_fallcontrol_3, ev_fallcontrol_4, ev_fallcontrol_5
                    ev_fallcontrol_1=''
                    ev_fallcontrol_2=''
                    ev_fallcontrol_3=''
                    ev_fallcontrol_4=''
                    ev_fallcontrol_5=''
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_fall_control()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_fallcontrol_1==1:
                        otherevent[26]=1
                    if ev_fallcontrol_2==1:
                        otherevent[26]=2
                    if ev_fallcontrol_3==1:
                        otherevent[26]=3
                    if ev_fallcontrol_4==1:
                        otherevent[26]=4
                    if ev_fallcontrol_5==1:
                        otherevent[26]=5
    
                wx_text=nm+''', if it is additional "other" behavior(s) in this event,
                                  push "yes", if not -"no"'''    
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                admove=''
                ev_yesno_1=''
                ev_yesno_2=''
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_yes_no()    
                    app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                wx_text=''
                if ev_yesno_1=='y':
                    admove='y'
                if ev_yesno_2=='n':
                    admove='n'
                #print (admove)            
                
                other_event[i] = other_event[i]+[otherevent]
    return other_event
#---------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------
def ds_triger(ds_starter):
    global ev_yesno_1, ev_yesno_2, wx_text
    global ev_timing
    global software_user_dialogue
    global ev_event_editing_1, ev_event_editing_2, ev_event_editing_3, edit, event_editor    
    nm=ds_starter[0]
    if event_editor==0:
        ev_event_editing_1=''
        ev_event_editing_2=''
        ev_event_editing_3=''
    #Step 1 - Introduction of timing of the event start in hour minute second.
    if ev_event_editing_1==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventstart=''
    else:
        eventstart=ictus[edit-1][2]
    if ev_event_editing_1==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
        wx_text=nm+''', write the time of the TRIGGER event start in the form hhmmss'''
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("Software:\n" +wx_text+"\n")
        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"   
        while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                     or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    eventstart=value
                    print(eventstart+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventstart=read_value
                try:
                    event_start=int(eventstart)
                except:
                    eventstart=''
                if len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
                     or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                         now = datetime.now()
                         current_time = now.strftime("%H:%M:%S")
                         print(current_time)
                         print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                         software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
    
    #----------------------------------------------------------------------------------------------------------------------------------------------------------------
    #Step 2 - Introduction  timing of the end of the event in hour minute second.
    if ev_event_editing_2==1 or (ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
            eventend=''
    else:
        eventend=ictus[edit-1][3]        
    if ev_event_editing_2==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):   
        wx_text=nm+''', write the time of the TRIGGER event end in the form hhmmss'''
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("Software:\n" +wx_text+"\n")
        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
        while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                     or int(eventend[4:])<0 or int(eventend[4:])>59:
                if videoplayer==0:
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    eventend=value
                    print(eventend+'\n')
                    software_user_dialogue+=value+"\n"
                if videoplayer==1:
                    offset_1=99999999
                    text_file=open("intercode.txt", "w", encoding='utf-8')
                    text_file.write(str(offset_1))
                    text_file.close()
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_video_player_event()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_timing==1:
                        text_file=open("intercode.txt", "r", encoding='utf-8')
                        read_value=text_file.read(10)
                        print(read_value+'\n')
                        software_user_dialogue+=read_value+"\n"
                        text_file.close()
                        eventend=read_value
                try:
                    event_end=int(eventend)
                except:
                    eventend=''
                if len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
                     or int(eventend[4:])<0 or int(eventend[4:])>59:
                         now = datetime.now()
                         current_time = now.strftime("%H:%M:%S")
                         print(current_time)
                         print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                         software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
                      
    #--------------------------------------------------------------------------------------------------------------------------------------------------------------
    #Step 3 - Control the error, when the end of the event defined earlier than it's start 
    while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
    and videoplayer==0:
        eventstartend=''
        wx_text='''SOMETHING WRONG, '''+nm+'''! Write the time of TRIGGER event START AND END
        in the form hhmmss,,hhmmss  in the row above and then press this button.'''
        print('\a')
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("Software:\n" +wx_text+"\n")
        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
        while len (eventstartend) !=14 or int(eventstartend[0:2])<0 or int(eventstartend[0:2])>24 or int(eventstartend[2:4])<0 or int(eventstartend[2:4])>59\
        or int(eventstartend[4:6])<0 or int(eventstartend[4:6])>59 or int(eventstartend[8:10])<0 or int(eventstartend[8:10])>24 or int(eventstartend[10:12])<0\
        or int(eventstartend[10:12])>59 or int(eventstartend[12:])<0 or int(eventstartend[12:])>59\
        or int(eventstartend[0:2])*60**2+int(eventstartend[2:4])*60+int(eventstartend[4:6])>int(eventstartend[8:10])*60**2+int(eventstartend[10:12])*60+int(eventstartend[12:]):
    
                    print('\a')
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_write()
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    eventstartend=value
                    print(eventstartend+'\n')
                    software_user_dialogue+=value+"\n"
                    eventstart=eventstartend[0:6]
                    eventend=eventstartend[8:]
                    try:
                        event_start=int(eventstartend[0:6])
                        event_end=int(eventstartend[8:])
                    except:
                         eventstartend=''
    while int(eventstart[0:2])*60**2+int(eventstart[2:4])*60+int(eventstart[4:])>int(eventend[0:2])*60**2+int(eventend[2:4])*60+int(eventend[4:])\
    and videoplayer==1:
             eventstart=''
             while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
             or int(eventstart[4:])<0 or int(eventstart[4:])>59:
                 wx_text='''SOMETHING WRONG, '''+nm+'''! You inserted event end earlier than  event start! 
                 Insert the time of TRIGGER event START in the form hhmmss'''
                 print('\a')
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 ev_timing=''
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 app=[]; app = wx.App(None)
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventstart=read_value
                 
             eventend=''
             while len (eventend) !=6 or int(eventend[0:2])<0 or int(eventend[0:2])>24 or int(eventend[2:4])<0 or int(eventend[2:4])>59\
             or int(eventend[4:])<0 or int(eventend[4:])>59:  
                 wx_text= nm+'''! You inserted event end earlier than  event start! 
             Insert the time of TRIGGER event END in the form hhmmss'''
                 now = datetime.now()
                 current_time = now.strftime("%H:%M:%S")
                 print(current_time)
                 print("Software:\n" +wx_text+"\n")
                 software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                 offset_1=99999999
                 text_file=open("intercode.txt", "w", encoding='utf-8')
                 text_file.write(str(offset_1))
                 text_file.close()
                 if __name__ == '__main__':
                     app = wx.App()
                     frame = MyFrame_video_player_event()    
                     app.MainLoop()
                 app=[]; app = wx.App(None)
                 del app
                 if ev_timing==1:
                     text_file=open("intercode.txt", "r", encoding='utf-8')
                     read_value=text_file.read(10)
                     print(read_value+'\n')
                     software_user_dialogue+=read_value+"\n"
                     text_file.close()
                     eventend=read_value
                          
    #-------------------------------------------------------------------------------------------------------------------------------------------------
    if ev_event_editing_3==1 or(ev_event_editing_1=='' and ev_event_editing_2=='' and ev_event_editing_3==''):
        triger=[0]*9
        global ev_trig_1, ev_trig_2, ev_trig_3, ev_trig_4, ev_trig_5, ev_trig_6, ev_trig_7, ev_trig_8  
        ev_trig_1=''
        ev_trig_2=''
        ev_trig_3=''
        ev_trig_4=''
        ev_trig_5=''
        ev_trig_6=''
        ev_trig_7=''
        ev_trig_8=''
        wx_text=nm+''', push button corresponding to type of trigger event.
        You can choose more than one trigger type (more than one button).'''    
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("Software:\n" +wx_text+"\n")
        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
        
        if __name__ == '__main__':
            app = wx.App()
            frame = MyFrame_trigger()    
            app.MainLoop()
        app=[]; app = wx.App(None)
        del app
        wx_text=''
        if ev_trig_1==1:
            triger[0]=1
        if ev_trig_2==1:
            triger[1]=1
        if ev_trig_3==1:
            triger[2]=1
        if ev_trig_4==1:
            triger[3]=1
        if ev_trig_8==1:
            triger[7]=1
        if ev_trig_6==1:
            triger[5]=1
        if ev_trig_7==1:
            triger[6]=1
        if ev_trig_5==1:
            triger[4]=1
            wx_text=nm+''', please, select whether you want to add the comment 
                    for "other" trigger'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
            global ev_comment_1, ev_comment_2, ev_comment_3 
            ev_comment_1=''
            ev_comment_2=''
            ev_comment_3=''                
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_free_text_comment()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            if ev_comment_1==1:
                wx_text=nm+''', please, write your comment for "other" trigger
                        and push this button.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_write()
                    app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                triger[8]=value
                print(value+"\n")
                software_user_dialogue+=value+"\n"
                if ev_comment_2==1:
                    now = datetime.now()                
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print('''\nSoftware:\n'''+nm+''', please, write your comment to "other" trigger and push Enter\n''' )
                    software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+nm+''', please, write your comment to "other" trigger and push Enter\n'''
                    triger[8]=input (nm+', please, write your comment to "other" trigger and push Enter\n')
                    now = datetime.now()                
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("User typed:")
                    print(triger[8])
                    software_user_dialogue+='''\n'''+current_time+'''\nUser typed:'''+'''\n'''+triger[8]+'''\n'''
                if ev_comment_3==1:
                    triger[8]='No comment for "other" trigger'
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print('''Software:\n'''+triger[8])
                    software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+triger[8]+'''\n'''
        triger_event=[[10,0,eventstart,eventend,triger]]
    return triger_event
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------
def ds_terms_english():
    #Type of events
    global s, simp, automt, hypermt, eyemv, voi, dial, gener, autonm, aur, oth  
    s='''s'''#plural form
    simp='''simple motor event'''
    automt='''motor automatism event'''
    hypermt='''hyperkinetic event'''
    eyemv='''eye movement event'''
    voi='''voice event'''
    dial='''dialeptic behavior event'''
    gener='''generalized tonic-clonic event'''
    autonm='''autonomic event'''
    aur='''aura reporting event'''
    oth='''type "other" event'''
    #Body parts
    global hea, fac, ey, er, mou, tong, tong, nec, tr, che, abd, bc, bt, geni, ar, lg
    hea='''head'''
    fac='''face'''
    ey='''eye'''
    er='''ear'''
    mou='''mouth'''
    tong='''tongue'''
    nec='''neck'''
    tr='''trunk'''
    che='''chest'''
    abd='''abdomen'''
    bc='''back'''
    bt='''buttock'''
    geni='''genital area'''
    ar='''arm'''
    lg='''leg'''
    #Parts of body parts
    global rt, lt, dis, pro, up, low, ant, post, asp, und, nd, punct, bo, bilat
    rt='''right '''
    lt='''left '''
    dis='''distal '''
    pro='''proximal '''
    up='''upper part of the '''
    low='''lower part of the '''
    ant='''anterior '''
    post='''posterior '''
    asp='''aspect of the '''
    und=''' and '''
    nd=''', '''
    punkt='''.'''
    bo='''both '''
    bilat='''bilateral '''
    #Simple motor behaviors
    global ton, tonr, fenc, clon, mclon, negmclon, ato, atact, apract, trem, turn, forflex, backext, srong 
    ton='''tonic movement'''
    tonr='''dytonic movement'''
    fenc='''fencer's posturing'''
    clon='''clonic movement'''
    mclon='''myoclonus'''
    negmclon='''negative myoclonus'''
    ato='''atonia'''
    atact='''ataxia'''
    apract='''apraxia'''
    trem='''tremor'''
    turn='''turn'''
    forflex='''flexion forward'''
    backext='''extension backward'''
    strong='''forcefull '''
    #Automatic motor behaviors
    global gest, semipurp, raising, nwip, eplug, genman, stepping, pedal, oralaut, yaw, blink, elmclon, blsp, facexpr, spit, vom, cough, pthrust, urin, defec, mastic, swal, smack, kiss
    global tongmov, star, disguest, hapy, grimac, shapo
    gest ='''gesticulation/repetitive movements'''
    semipurp='''semipurposeful movements'''
    raising='''limb raising'''
    nwip='''nose wiping'''
    eplug='''ear plugging'''
    genman='''genital manipulations'''
    stepping='''stepping'''
    pedal='''pedalling'''
    oralaut='''oral automatisms'''
    yaw='''yawning'''
    blink='''blinking'''
    elmclon='''eyelid myoclonus'''
    blsp='''blepharospasm'''
    facexpr='''facial expression'''
    spit='''ictal spitting'''
    vom='''ictal vomiting'''
    cough='''ictal cough'''
    pthrust='''pelvic thrust'''
    urin='''ictal urinary urge behavior'''
    defec='''ictal defecation behavior'''
    mastic='''\n\tmasticator movement'''
    swal='''\n\tswallowing'''
    smack='''\n\tlip smacking'''
    kiss='''\n\tkissing'''
    tongmov='''\n\ttongue movements'''
    star='''starring'''
    disguest='''disquesting'''
    hapy='''hapy'''
    grimac='''grimacing'''
    shapo='''"shapo de gendarm" face'''
    #Autonomic events
    global hypervent, apn, dysp, strid, piloer, palor, flash, cyan, sweat, mydr, miosis, sneez
    hypervent=''' ictal hyperventilation'''
    apn=''' ictal apnea'''
    dysp=''' ictal dysnea'''
    strid=''' ictal stridor'''
    piloer=''' ictal piloerection'''
    palor='''ictal palor'''
    flash=''' ictal flashing'''
    cyan=''' ictal cyanosis'''
    sweat=''' ictal sweating'''
    mydr=''' ictal mydriasis'''
    miosis=''' ictal miosis'''
    sneez=''' ictal sneezing'''
    #Eye movement events
    global deviat, nyst, rtw, ltw, ltw, upw, downw, converg, diverg
    deviat=''' deviation'''
    nyst=''' nystagmus'''
    rtw='''rightwize'''
    ltw='''ltwize'''
    upw='''upward'''
    downw='''downward'''
    converg='''convergent''';
    diverg='''diveergent'''
    #Hyperkinetic events
    global bimanped, gyrat, fhtgyrat
    bimanped='''Bimanual-bipedal automatism.'''
    gyrat=''' Gyratory motion'''
    fhtgyrat='''. Forcefull headturn hapened before gyratory motion'''
    #Voice events
    global nvvoc, nvvocp, coher, panicsp, cursesp, confuse, persiver, paraphas, broka, vernike, anomia, loughter, cry, stut, forlanguage
    nvvoc='''non-verbal vocalization without panic behavior'''
    nvvocp='''non-verbal vocalizatiion with panic behavior'''
    coher='''coherent purposeful adequate speech'''
    panicsp='''panic speech'''
    cursesp='''curse speech'''
    confuse='''confused speech'''
    persiver='''persiverations'''
    paraphas='''paraphasias'''
    broka='''the patient understands verbal instructions but cannot speak (motor aphasia)'''
    vernike='''the patient does not understand verbal instructions but can communicate non-verbaly(sensory aphasia)'''
    anomia='''patient cnnot find the name of the object (anomia)'''
    loughter='''loughter'''
    cry='''crying'''
    stut='''stuttering'''
    forlanguage='''the patient speaks but the interpreter does not understang the language'''
    #Dialeptic events
    global part, comp, unresp, amnes, slow, hypoton, explor, nvagression, nvpanic
    part='''Patrtial'''
    comp='''Complete'''
    unresp='''unresponsiveness. '''
    amnes='''amnesia (but not anomia). '''
    slow='''slowing of activity. '''
    hypoton='''general muscle hypotonia. '''
    explor='''exploratory behavior. '''
    nvagression='''non-verbal agression. '''
    nvpanic='''non-verbal panic behavior. '''
    #GTCS events
    global tonasym, clonasym, post_4
    tonasym='''with tonic phase asymetry'''
    clonasym='''with clonic phase asymetry'''
    post_4='''with "figure of 4" posturing'''
    #"Other" events
    global vchange, pchange, walk, observer, outoffield, wakeup, asleep, sitfromlay, standfromsit, standfromlay, layfromsit, sitfromstand, layfromstand, layfromlay     
    vchange='''vigilance cange'''
    pchange='''patient's position change'''
    walk='''walking'''
    observer='''observer's behavior change'''
    outoffield='''patient moved out of the videeo-camera field'''
    wakeup='''waking up'''
    asleep='''falling asleep'''
    sitfromlay='''siting from laying'''
    standfromsit='''standing from siting'''
    standfromlay='''standing from laying'''
    layfromsit='''laying from siting'''
    sitfromstand='''siting from standing'''
    layfromstand='''laying from standing'''
    layfromlay='''change the laying position'''
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_reporter(ictus):
    report= '''---------------------------------------------------------------------
    \n\t\tDIGITAL SEMIOLOGY REPORT\n\n
    The date of this ictal episode is '''
    try:
        report+=ds_starter[1][0:2]+'.'+ds_starter[1][2:4]+'.20'+ds_starter[1][4:]+'.\n\n'
    except:
        report+='000000'
    report+='''This ictal episode includes following events:\n'''
    
    for i in range (0,len(ictus)):
        if ictus[i][0]==0:
            report+='Event number '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=simp+'\n'
        elif ictus[i][0]==1:
            report+='Event number '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=automt+'\n'
        elif ictus[i][0]==2:
            report+='Event number '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=autonm+'\n'
        elif ictus[i][0]==3:
            report+='Event number '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=eyemv+'\n'
        elif ictus[i][0]==4:
            report+='Event number '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=hypermt+'\n'
        elif ictus[i][0]==5:
            report+='Event number '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=voi+'\n'
        elif ictus[i][0]==6:
            report+='Event number '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=dial+'\n'
        elif ictus[i][0]==7:
            report+='Event number '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=gener+'\n'
        elif ictus[i][0]==8:
            report+='Event number '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=aur+'\n'
        elif ictus[i][0]==9:
            report+='Event number '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+='Other event\n'
        elif ictus[i][0]==10:
            report+='Event number '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+='Trigger\n'
    report+='\n\n'

    report+='The detailed descrption of the ictal episode:\n'
    for i in range (0,len(ictus)):
        if ictus[i][0]==0:
            report+='\n\nEVENT NUMBER '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=simp+'\n'
            report+='This event includes following behaviors:\n'
            rep=ds_simp_move_rep(i)
            report+=rep
        elif ictus[i][0]==1:
            report+='\n\nEVENT NUMBER '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=automt+'\n'
            report+='This event includes following behaviors:\n'
            rep=ds_automat_rep(i)
            report+=rep
        elif ictus[i][0]==2:
            report+='\n\nEVENT NUMBER '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=autonm+'\n'
            report+='This event includes following behaviors:\n'
            rep=ds_autonom_rep(i)
            report+=rep
        elif ictus[i][0]==3:
            report+='\n\nEVENT NUMBER '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=eyemv+'\n'
            report+='This event includes following behaviors:\n'
            rep=ds_eyemove_rep(i)
            report+=rep
        elif ictus[i][0]==4:
            report+='\n\nEVENT NUMBER '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=hypermt+'\n'
            report+='This event includes following behaviors:\n'
            rep=ds_hypermotor_rep(i)
            report+=rep
        elif ictus[i][0]==5:
            report+='\n\nEVENT NUMBER '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=voi+'\n'
            report+='This event includes following behaviors:\n'
            rep=ds_voice_rep(i)
            report+=rep
        elif ictus[i][0]==6:
            report+='\nEVENT NUMBER '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=dial+'\n'
            report+='This event includes following behaviors:\n'
            rep=ds_dialept_rep(i)
            report+=rep
        elif ictus[i][0]==7:
            report+='\n\nEVENT NUMBER '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=gener+'\n'
            report+='This event includes following behaviors:\n'
            rep=ds_gtcs_rep(i)
            report+=rep
        elif ictus[i][0]==8:
            report+='\n\nEVENT NUMBER '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=aur+'\n'
            report+='This event includes following behaviors:\n'
            rep=ds_aurareport_rep(i)
            report+=rep
        elif ictus[i][0]==9:
            report+='\n\nEVENT NUMBER '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+=oth+'\n'
            report+='This event includes following behaviors:\n'
            rep=rep=ds_other_rep(i)
            report+=rep
        elif ictus[i][0]==10:
            report+='\n\nEVENT NUMBER '+str(i+1)+' '+ictus[i][2][0:2]+':'+ictus[i][2][2:4]+':'+ictus[i][2][4:]+'-'+ictus[i][3][0:2]+':'+ictus[i][3][2:4]+':'+ictus[i][3][4:]+' '
            report+='Trigger\n'
            report+='This event includes following:\n'
            rep=rep=ds_triger_rep(i)
            report+=rep
            
    if ds_starter[20]=='y':
        report+='''\n\nIt is possible that last event\s represent(s) postictal state. This, however, can not be defined
        without taking into account EEG''' 
    report+='\n------------------------------------------------------------------------------------------------------'

#    print (report)
    return report
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_simp_move_rep(i):
    for j in range(4,len(ictus[i])):
        if j==4:
            rep='\n'
       
        rep+=str(j-3)+')'
        if ictus[i][j][0]==0:
            rep+=ton+' involving:'
        elif ictus[i][j][0]==1:
            rep+=tonr+' involving:'

        elif ictus[i][j][0]==3:
            rep+=clon+' involving:'
        elif ictus[i][j][0]==4:
            rep+=mclon+' involving:'
        elif ictus[i][j][0]==5:
            rep+=negmclon+' involving:'
        elif ictus[i][j][0]==6 and ictus[i][j][47]==1:
            rep+=ato+' without fall involving:'
        elif ictus[i][j][0]==6 and ictus[i][j][47]==2:
            rep+=ato+' with fall involving:'
        elif ictus[i][j][0]==7:
            rep+=atact+' involving:'
        elif ictus[i][j][0]==8:
            rep+=apract+' involving:'
        elif ictus[i][j][0]==9:
            rep+=trem+' involving:'
        elif ictus[i][j][0]==10:
            rep+='paralysis involving:'
        elif ictus[i][j][0]==12:
            rep+='periodic limb movements of sleep'
        elif ictus[i][j][0]==11:
            rep+='epileptic sapsm/s involving:'        
            if ictus[i][j][1]==2:
                rep+='\n\tproximal part of '+rt+' '+ar+' (prominent flexion)'

            if ictus[i][j][2]==2:
                rep+='\n\tdistal part of '+rt+' '+ar+' (prominent flexion)'

            if ictus[i][j][3]==2:
                rep+='\n\tproximal part of '+lt+' '+ar+' (prominent flexion)'

            if ictus[i][j][4]==2:
                rep+='\n\tdistal part of '+lt+' '+ar+' (prominent flexion)'

            if ictus[i][j][5]==2:
                rep+='\n\tproximal part of '+rt+' '+lg+' (prominent flexion)'
                
            if ictus[i][j][6]==2:
                rep+='\n\tdistal part of '+rt+' '+lg+' (prominent flexion)'
                
            if ictus[i][j][7]==2:
                rep+='\n\tproximal part of '+lt+' '+lg+' (prominent flexion)'
                
            if ictus[i][j][8]==2:
                rep+='\n\tdistal part of '+lt+' '+lg+' (prominent flexion)'
                
            if ictus[i][j][1]==1:
                rep+='\n\tproximal part of '+rt+' '+ar+' (mild flexion)'

            if ictus[i][j][2]==1:
                rep+='\n\tdistal part of '+rt+' '+ar+' (mild flexion)'

            if ictus[i][j][3]==1:
                rep+='\n\tproximal part of '+lt+' '+ar+' (mild flexion)'

            if ictus[i][j][4]==1:
                rep+='\n\tdistal part of '+lt+' '+ar+' (mild flexion)'

            if ictus[i][j][5]==1:
                rep+='\n\tproximal part of '+rt+' '+lg+' (mild flexion)'
                
            if ictus[i][j][6]==1:
                rep+='\n\tdistal part of '+rt+' '+lg+' (mild flexion)'
                
            if ictus[i][j][7]==1:
                rep+='\n\tproximal part of '+lt+' '+lg+' (mild flexion)'
                
            if ictus[i][j][8]==1:
                rep+='\n\tdistal part of '+lt+' '+lg+' (mild flexion)'
                
            if ictus[i][j][1]==4:
                rep+='\n\tproximal part of '+rt+' '+ar+' (prominent extension)'

            if ictus[i][j][2]==4:
                rep+='\n\tdistal part of '+rt+' '+ar+' (prominent extension)'

            if ictus[i][j][3]==4:
                rep+='\n\tproximal part of '+lt+' '+ar+' (prominent extension)'

            if ictus[i][j][4]==4:
                rep+='\n\tdistal part of '+lt+' '+ar+' (prominent extension)'

            if ictus[i][j][5]==4:
                rep+='\n\tproximal part of '+rt+' '+lg+' (prominent extension)'
                
            if ictus[i][j][6]==4:
                rep+='\n\tdistal part of '+rt+' '+lg+' (prominent extension)'
                
            if ictus[i][j][7]==4:
                rep+='\n\tproximal part of '+lt+' '+lg+' (prominent extension)'
                
            if ictus[i][j][8]==4:
                rep+='\n\tdistal part of '+lt+' '+lg+' (prominent extension)'
                
            if ictus[i][j][1]==3:
                rep+='\n\tproximal part of '+rt+' '+ar+' (mild extension)'

            if ictus[i][j][2]==3:
                rep+='\n\tdistal part of '+rt+' '+ar+' (mild extension)'

            if ictus[i][j][3]==3:
                rep+='\n\tproximal part of '+lt+' '+ar+' (mild extension)'

            if ictus[i][j][4]==3:
                rep+='\n\tdistal part of '+lt+' '+ar+' (mild extension)'

            if ictus[i][j][5]==3:
                rep+='\n\tproximal part of '+rt+' '+lg+' (mild extension)'
                
            if ictus[i][j][6]==3:
                rep+='\n\tdistal part of '+rt+' '+lg+' (mild extension)'
                
            if ictus[i][j][7]==3:
                rep+='\n\tproximal part of '+lt+' '+lg+' (mild extension)'
                
            if ictus[i][j][8]==3:
                rep+='\n\tdistal part of '+lt+' '+lg+' (mild extension)'
                
        elif ictus[i][j][0]==13:
            rep+='figure-of-4:'
            if ictus[i][j][1]==1:
                rep+=' rt elbow extended.'
            if ictus[i][j][1]==2:
                rep+=' lt elbow extended.'
            if ictus[i][j][2]==1:
                rep+=' (complete figure-of-4).'
            if ictus[i][j][2]==2:
                rep+=' (partial figure-of-4).'
                
        elif ictus[i][j][0]==2:
            rep+=fenc+' involving:'
            if ictus[i][j][1]==1:
                rep+=' right arm.'
            if ictus[i][j][1]==2:
                rep+=' left arm.'
            if ictus[i][j][2]==1:
                rep+=' (complete fencer posturing).'
            if ictus[i][j][2]==2:
                rep+=' (partial fencer posturing).'
            
        if ictus[i][j][0]!=11 and ictus[i][j][0]!=13 and ictus[i][j][0]!=2: 
            if ictus[i][j][1]==2:
                rep+='\n\tproximal part of '+rt+' '+ar+' (prominent)'
    
            if ictus[i][j][2]==2:
                rep+='\n\tdistal part of '+rt+' '+ar+' (prominent)'
                if ictus[i][j][31]==1:
                    rep+='\n\t\tThumb'
                if ictus[i][j][32]==1:
                    rep+='\n\t\tIndex finger'
                if ictus[i][j][33]==1:
                    rep+='\n\t\tFingers 3, 4, 5'
                if ictus[i][j][34]==1:
                    rep+='\n\t\tWrist'
                if ictus[i][j][35]==1:
                    rep+='\n\t\tElbow'
                    
                if ictus[i][j][19]==0:
                    rep+=', hand posturing: fist'
                if ictus[i][j][19]==1:
                    rep+=''', hand posturing: "politician's fist"'''
                if ictus[i][j][19]==2:
                    rep+=', hand posturing: cup'
                if ictus[i][j][19]==3:
                    rep+=', hand posturing: pincer'
                if ictus[i][j][19]==4:
                    rep+=', hand posturing: extended hand'
                if ictus[i][j][19]==5:
                    rep+=', hand posturing: pointing'
                if ictus[i][j][19]==6:
                    rep+=', hand posturing: non-specific'
            
                if ictus[i][j][48]==0:
                    rep+=', elbow in flexion'
                if ictus[i][j][48]==1:
                    rep+=', elbow in extension'
    
            if ictus[i][j][3]==2:
                rep+='\n\tproximal part of '+lt+' '+ar+' (prominent)'
    
            if ictus[i][j][4]==2:
                rep+='\n\tdistal part of '+lt+' '+ar+' (prominent)'
                if ictus[i][j][36]==1:
                    rep+='\n\t\tThumb'
                if ictus[i][j][37]==1:
                    rep+='\n\t\tIndex finger'
                if ictus[i][j][38]==1:
                    rep+='\n\t\tFingers 3, 4, 5'
                if ictus[i][j][39]==1:
                    rep+='\n\t\tWrist'
                if ictus[i][j][40]==1:
                    rep+='\n\t\tElbow'
                    
                if ictus[i][j][20]==0:
                    rep+=', hand posturing: fist'
                if ictus[i][j][20]==1:
                    rep+=''', hand posturing: "politician's fist"'''
                if ictus[i][j][20]==2:
                    rep+=', hand posturing: cup'
                if ictus[i][j][20]==3:
                    rep+=', hand posturing: pincer'
                if ictus[i][j][20]==4:
                    rep+=', hand posturing: extended hand'
                if ictus[i][j][20]==5:
                    rep+=', hand posturing: pointing'
                if ictus[i][j][20]==6:
                    rep+=', hand posturing: non-specific'
                    
                if ictus[i][j][49]==0:
                    rep+=', elbow in flexion'
                if ictus[i][j][49]==1:
                    rep+=', elbow in extension'
                                        
            if ictus[i][j][5]==2:
                 rep+='\n\tproximal part of '+rt+' '+lg+' (prominent)'
            if ictus[i][j][6]==2:
                 rep+='\n\tdistal part of '+rt+' '+lg+' (prominent)'
                 if ictus[i][j][41]==1:
                    rep+='\n\t\tToes'
                 if ictus[i][j][42]==1:
                    rep+='\n\t\tAnkle'
                 if ictus[i][j][43]==1:
                    rep+='\n\t\tKnee'
            if ictus[i][j][7]==2:
                 rep+='\n\tproximal part of '+lt+' '+lg+' (prominent)'
            if ictus[i][j][8]==2:
                 rep+='\n\tdistal part of '+lt+' '+lg+' (prominent)'
                 if ictus[i][j][44]==1:
                    rep+='\n\t\tToes'
                 if ictus[i][j][45]==1:
                    rep+='\n\t\tAnkle'
                 if ictus[i][j][46]==1:
                    rep+='\n\t\tKnee'
            if ictus[i][j][9]==2:
                 rep+='\n\t'+rt+' half of '+fac+' (prominent)'
            if ictus[i][j][10]==2:
                 rep+='\n\t'+lt+' half of '+fac+' (prominent)'
            if ictus[i][j][11]==2:
                rep+='\n\t'+nec+' '+turn+' to the '+rt+' (prominent)'
            if ictus[i][j][12]==2:
                rep+='\n\t'+nec+' '+turn+' to the '+lt+' (prominent)'
            if ictus[i][j][13]==2:
                rep+='\n\t'+nec+' '+forflex+' (prominent)'
            if ictus[i][j][14]==2:
                rep+='\n\t'+nec+' '+backext+' (prominent)'
            if ictus[i][j][15]==2:
                rep+='\n\t'+tr+' '+turn+' to the '+rt+' (prominent)'
            if ictus[i][j][16]==2:
                rep+='\n\t'+tr+' '+turn+' to the '+lt+' (prominent)'
            if ictus[i][j][17]==2:
                rep+='\n\t'+tr+' '+forflex+' (prominent)'
            if ictus[i][j][18]==2:
                rep+='\n\t'+tr+' '+backext+' (prominent)'
                
            if ictus[i][j][1]==1:
                rep+='\n\tproximal part of '+rt+' '+ar+' (mild)'
    
            if ictus[i][j][2]==1:
                rep+='\n\tdistal part of '+rt+' '+ar+' (mild)'
                if ictus[i][j][31]==1:
                    rep+='\n\t\tThumb'
                if ictus[i][j][32]==1:
                    rep+='\n\t\tIndex finger'
                if ictus[i][j][33]==1:
                    rep+='\n\t\tFingers 3, 4, 5'
                if ictus[i][j][34]==1:
                    rep+='\n\t\tWrist'
                if ictus[i][j][35]==1:
                    rep+='\n\t\tElbow'
                    
                if ictus[i][j][19]==0:
                    rep+=', hand posturing: fist'
                if ictus[i][j][19]==1:
                    rep+=''', hand posturing: "politician's fist"'''
                if ictus[i][j][19]==2:
                    rep+=', hand posturing: cup'
                if ictus[i][j][19]==3:
                    rep+=', hand posturing: pincer'
                if ictus[i][j][19]==4:
                    rep+=', hand posturing: extended hand'
                if ictus[i][j][19]==5:
                    rep+=', hand posturing: pointing'
                if ictus[i][j][19]==6:
                    rep+=', hand posturing: non-specific'
            
                if ictus[i][j][48]==0:
                    rep+=', elbow in flexion'
                if ictus[i][j][48]==1:
                    rep+=', elbow in extension'
    
            if ictus[i][j][3]==1:
                rep+='\n\tproximal part of '+lt+' '+ar+' (mild)'
    
            if ictus[i][j][4]==1:
                rep+='\n\tdistal part of '+lt+' '+ar+' (mild)'
                if ictus[i][j][36]==1:
                    rep+='\n\t\tThumb'
                if ictus[i][j][37]==1:
                    rep+='\n\t\tIndex finger'
                if ictus[i][j][38]==1:
                    rep+='\n\t\tFingers 3, 4, 5'
                if ictus[i][j][39]==1:
                    rep+='\n\t\tWrist'
                if ictus[i][j][40]==1:
                    rep+='\n\t\tElbow'
                    
                if ictus[i][j][20]==0:
                    rep+=', hand posturing: fist'
                if ictus[i][j][20]==1:
                    rep+=''', hand posturing: "politician's fist"'''
                if ictus[i][j][20]==2:
                    rep+=', hand posturing: cup'
                if ictus[i][j][20]==3:
                    rep+=', hand posturing: pincer'
                if ictus[i][j][20]==4:
                    rep+=', hand posturing: extended hand'
                if ictus[i][j][20]==5:
                    rep+=', hand posturing: pointing'
                if ictus[i][j][20]==6:
                    rep+=', hand posturing: non-specific'
                    
                if ictus[i][j][49]==0:
                    rep+=', elbow in flexion'
                if ictus[i][j][49]==1:
                    rep+=', elbow in extension'
                
            if ictus[i][j][5]==1:
                 rep+='\n\tproximal part of '+rt+' '+lg+' (mild)'
            if ictus[i][j][6]==1:
                 rep+='\n\tdistal part of '+rt+' '+lg+' (mild)'
                 if ictus[i][j][41]==1:
                    rep+='\n\t\tToes'
                 if ictus[i][j][42]==1:
                    rep+='\n\t\tAnkle'
                 if ictus[i][j][43]==1:
                    rep+='\n\t\tKnee'
            if ictus[i][j][7]==1:
                 rep+='\n\tproximal part of '+lt+' '+lg+' (mild)'
            if ictus[i][j][8]==1:
                 rep+='\n\tdistal part of '+lt+' '+lg+' (mild)'
                 if ictus[i][j][44]==1:
                    rep+='\n\t\tToes'
                 if ictus[i][j][45]==1:
                    rep+='\n\t\tAnkle'
                 if ictus[i][j][46]==1:
                    rep+='\n\t\tKnee'
            if ictus[i][j][9]==1:
                 rep+='\n\t'+rt+' half of '+fac+' (mild)'
            if ictus[i][j][10]==1:
                 rep+='\n\t'+lt+' half of '+fac+' (mild)'
            if ictus[i][j][11]==1:
                rep+='\n\t'+nec+' '+turn+' to the '+rt+' (mild)'
            if ictus[i][j][12]==1:
                rep+='\n\t'+nec+' '+turn+' to the '+lt+' (mild)'
            if ictus[i][j][13]==1:
                rep+='\n\t'+nec+' '+forflex+' (mild)'
            if ictus[i][j][14]==1:
                rep+='\n\t'+nec+' '+backext+' (mild)'
            if ictus[i][j][15]==1:
                rep+='\n\t'+tr+' '+turn+' to the '+rt+' (mild)'
            if ictus[i][j][16]==1:
                rep+='\n\t'+tr+' '+turn+' to the '+lt+' (mild)'
            if ictus[i][j][17]==1:
                rep+='\n\t'+tr+' '+forflex+' (mild)'
            if ictus[i][j][18]==1:
                rep+='\n\t'+tr+' '+backext+' (mild)'
                                                    
            if ictus[i][j][21]==2:
                rep+='\n\tjaw movements at midline (prominent)'
            if ictus[i][j][22]==2:
                rep+='\n\tjaw movements to the right (prominent)'
            if ictus[i][j][23]==2:
                rep+='\n\tjaw movements to the left (prominent)'
            if ictus[i][j][24]==2:
                rep+='\n\ttongue midline (prominent)'
            if ictus[i][j][25]==2:
                rep+='\n\ttongue to the right (prominent)'
            if ictus[i][j][26]==2:
                rep+='\n\ttongue to the left (prominent)'
                
            if ictus[i][j][21]==1:
                rep+='\n\tjaw movements at midline (mild)'
            if ictus[i][j][22]==1:
                rep+='\n\tjaw movements to the right (mild)'
            if ictus[i][j][23]==1:
                rep+='\n\tjaw movements to the left (mild)'
            if ictus[i][j][24]==1:
                rep+='\n\ttongue midline (mild)'
            if ictus[i][j][25]==1:
                rep+='\n\ttongue to the right (mild)'
            if ictus[i][j][26]==1:
                rep+='\n\ttongue to the left (mild)'
                
            if ictus[i][j][27]==1:
                rep+=': mouth opening'
            if ictus[i][j][27]==2:
                rep+=': trismus'
            
            if ictus[i][j][28]==2:
                rep+='\n\tgeneraized body movements (prominent)'
            if ictus[i][j][29]==2:
                rep+='\n\tright hemibody movements (prominent)'
            if ictus[i][j][30]==2:
                rep+='\n\tleft hemibody movements (prominent)'
                
            if ictus[i][j][28]==1:
                rep+='\n\tgeneraized body movements (mild)'
            if ictus[i][j][29]==1:
                rep+='\n\tright hemibody movements (mild)'
            if ictus[i][j][30]==1:
                rep+='\n\tleft hemibody movements (mild)'
        if ictus[i][j][50]==1:
            rep+='\n\tRight jacksonian march was indicated by interpriter'
        if ictus[i][j][51]==1:
            rep+='\n\tLeft jacksonian march was indicated by interpriter'
                                  
        rep+='\n'
    return rep
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_automat_rep(i):
    for j in range(4,len(ictus[i])):
        if j==4:
            rep='\n'
        
        rep+=str(j-3)+')'
        if ictus[i][j][0]==0:
            rep+=gest+' and/or repetitive movements involving:'
        elif ictus[i][j][0]==1:
            rep+=semipurp+' involving:'
        elif ictus[i][j][0]==2:
            rep+=raising+' involving:'
        elif ictus[i][j][0]==3:
            rep+=nwip+' involving:'
        elif ictus[i][j][0]==4:
            rep+=eplug+' involving:'
        elif ictus[i][j][0]==5:
            rep+=genman+' involving:'
        elif ictus[i][j][0]==6:
            rep+=stepping+' involving:'
        elif ictus[i][j][0]==7:
            rep+=pedal+' involving:'
        elif ictus[i][j][0]==8:
            rep+=oralaut+': '
        elif ictus[i][j][0]==9:
            rep+=yaw

        elif ictus[i][j][0]==10:
            rep+=facexpr+': '
        elif ictus[i][j][0]==11:
            rep+=spit
        elif ictus[i][j][0]==12:
            rep+=vom
        elif ictus[i][j][0]==13:
            rep+=cough
        elif ictus[i][j][0]==14:
            rep+=' sneezing'
        elif ictus[i][j][0]==15:
            rep+=pthrust
        elif ictus[i][j][0]==16:
            rep+=urin
        elif ictus[i][j][0]==17:
            rep+=defec
        elif ictus[i][j][0]==18:
            rep+=' hand mouthing '
        elif ictus[i][j][0]==19:
            rep+=' other automatism.'
            rep+=' The comment for "other" automatism is \n/'+ictus[i][j][9]+'/'
            
        if (ictus[i][j][0] in range (0,3) or ictus[i][j][0]==18) and ictus[i][j][1]==2:
            rep+='\n\t'+rt+' '+ar+' (prominent)'
        if (ictus[i][j][0] in range (0,3) or ictus[i][j][0]==18) and ictus[i][j][2]==2:
            rep+='\n\t'+lt+' '+ar+' (prominent)'
        if ictus[i][j][0] in range (0,3) and ictus[i][j][3]==2:
            rep+='\n\t'+rt+' '+lg+' (prominent)'
        if ictus[i][j][0] in range (0,3) and ictus[i][j][4]==2:
            rep+='\n\t'+lt+' '+lg+' (prominent)'
        if ictus[i][j][0] in range (3,6) and ictus[i][j][1]==2:
            rep+='\n\t'+rt+' '+ar+' (prominent)'
        if ictus[i][j][0] in range (3,6) and ictus[i][j][2]==2:
            rep+='\n\t'+lt+' '+ar+' (prominent)'
        if ictus[i][j][0] in range (6,8) and ictus[i][j][1]==2:
            rep+='\n\t'+rt+' '+lg+' (prominent)'
        if ictus[i][j][0] in range (6,8) and ictus[i][j][2]==2:
            rep+='\n\t'+lt+' '+lg+' (prominent)'

        if (ictus[i][j][0] in range (0,3) or ictus[i][j][0]==18) and ictus[i][j][1]==1:
            rep+='\n\t'+rt+' '+ar+' (mild)'
        if (ictus[i][j][0] in range (0,3) or ictus[i][j][0]==18) and ictus[i][j][2]==1:
            rep+='\n\t'+lt+' '+ar+' (mild)'
        if ictus[i][j][0] in range (0,3) and ictus[i][j][3]==1:
            rep+='\n\t'+rt+' '+lg+' (mild)'
        if ictus[i][j][0] in range (0,3) and ictus[i][j][4]==1:
            rep+='\n\t'+lt+' '+lg+' (mild)'
        if ictus[i][j][0] in range (3,6) and ictus[i][j][1]==1:
            rep+='\n\t'+rt+' '+ar+' (mild)'
        if ictus[i][j][0] in range (3,6) and ictus[i][j][2]==1:
            rep+='\n\t'+lt+' '+ar+' (mild)'
        if ictus[i][j][0] in range (6,8) and ictus[i][j][1]==1:
            rep+='\n\t'+rt+' '+lg+' (mild)'
        if ictus[i][j][0] in range (6,8) and ictus[i][j][2]==1:
            rep+='\n\t'+lt+' '+lg+' (mild)'
            
        if ictus[i][j][0]==8 and ictus[i][j][1]==1:
            rep+=mastic
        if ictus[i][j][0]==8 and ictus[i][j][2]==1:
            rep+=swal
        if ictus[i][j][0]==8 and ictus[i][j][3]==1:
            rep+=smack
        if ictus[i][j][0]==8 and ictus[i][j][4]==1:
            rep+=kiss
        if ictus[i][j][0]==8 and ictus[i][j][5]==1:
            rep+=tongmov
        if ictus[i][j][0]==8 and ictus[i][j][6]==1:
            rep+='\n\tother oral automatism'
            rep+=' The comment for "other" oral automatism is \n/'+ictus[i][j][10]+'/'
        if ictus[i][j][0]==8 and ictus[i][j][7]==1:
            rep+='\n\tlip protrusion'
        if ictus[i][j][0]==8 and ictus[i][j][8]==1:
            rep+='\n\tlip licking'
       
        if ictus[i][j][0]==10 and ictus[i][j][1]==0:
            rep+=star
        if ictus[i][j][0]==10 and ictus[i][j][1]==1:
            rep+=disguest
        if ictus[i][j][0]==10 and ictus[i][j][1]==2:
            rep+=hapy
        if ictus[i][j][0]==10 and ictus[i][j][1]==3:
            rep+='sad'
        if ictus[i][j][0]==10 and ictus[i][j][1]==4:
            rep+='smiling'
        if ictus[i][j][0]==10 and ictus[i][j][1]==5:
            rep+=shapo
        if ictus[i][j][0]==10 and ictus[i][j][1]==6:
            rep+='laughter grimacing'
        if ictus[i][j][0]==10 and ictus[i][j][1]==7:
            rep+='unspecified grimacing'
        if ictus[i][j][0]==10 and ictus[i][j][1]==8:
            rep+='fearful'
        if ictus[i][j][0]==10 and ictus[i][j][1]==9:
            rep+='uncpecified face exression'
        if ictus[i][j][0]==10 and ictus[i][j][1]==10:
            rep+='other face exressio'
            rep+=' The comment for "other" face exression is \n/'+ictus[i][j][11]+'/'
            
        rep+='\n'
    return rep
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_autonom_rep(i):
    for j in range(4,len(ictus[i])):
        if j==4:
            rep='\n'
        
        rep+=str(j-3)+')'
        if ictus[i][j][0]==0:
            rep+=hypervent
        elif ictus[i][j][0]==1:
            rep+=' hypoventilation'
        elif ictus[i][j][0]==2:
            rep+=apn 
        elif ictus[i][j][0]==3:
            rep+=dysp 
        elif ictus[i][j][0]==4:
            rep+=strid 
        elif ictus[i][j][0]==5:
            rep+=piloer 
        elif ictus[i][j][0]==6:
            rep+=palor 
        elif ictus[i][j][0]==7:
            rep+=flash 
        elif ictus[i][j][0]==8:
            rep+=cyan 
        elif ictus[i][j][0]==9:
            rep+=sweat 
        elif ictus[i][j][0]==10:
            rep+=mydr+': '
        elif ictus[i][j][0]==11:
            rep+=miosis+': '
        elif ictus[i][j][0]==12:
            rep+=' Cheyne–Stokes respiration'
        elif ictus[i][j][0]==13:
            rep+=' irregular respiration'
        elif ictus[i][j][0]==14:
            rep+=' hiccups'
        elif ictus[i][j][0]==15:
            rep+=' salivation'
        elif ictus[i][j][0]==16:
            rep+=' urine loss without urination behavior'
        elif ictus[i][j][0]==17:
            rep+=' fecal loss without defecation behavior'
        elif ictus[i][j][0]==18:
            rep+=' other autonomic behavior'
            rep+=' The comment for "other" autonomic phenomenon is \n/'+ictus[i][j][3]+'/'
                                              
        if ictus[i][j][0] in range (10,12) and ictus[i][j][1]==0: 
            rep+='\n'+rt+' prominent'
        if ictus[i][j][0] in range (10,12) and ictus[i][j][1]==1:
            rep+='\n'+rt+' mild'
        if ictus[i][j][0] in range (10,12) and ictus[i][j][2]==0:
            rep+='\n'+lt+' prominent'
        if ictus[i][j][0] in range (10,12) and ictus[i][j][2]==1:
            rep+='\n'+lt+' mild'

        rep+='\n'
    return rep
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_eyemove_rep(i):
    for j in range(4,len(ictus[i])):
        if j==4:
            rep='\n'
        
        rep+=str(j-3)+')'
        if ictus[i][j][0]==0:
            rep+=deviat+': '
            if ictus[i][j][19]==1:
                rep+='conjugate: '
                if ictus[i][j][20]==1:
                    rep+='gaze up forced'
                if ictus[i][j][20]==2:
                    rep+='gaze down forced'
                if ictus[i][j][20]==3:
                    rep+='gaze right forced'
                if ictus[i][j][20]==4:
                    rep+='gaze left forced'
                if ictus[i][j][20]==5:
                    rep+='gaze up right forced'                    
                if ictus[i][j][20]==6:
                    rep+='gaze down right forced'
                if ictus[i][j][20]==7:
                    rep+='gaze up left forced'
                if ictus[i][j][20]==8:
                    rep+='gaze down left forced'
                if ictus[i][j][20]==9:
                     rep+='gaze up non-forced'
                if ictus[i][j][20]==10:
                    rep+='gaze down non-forced'
                if ictus[i][j][20]==11:
                    rep+='gaze right non-forced'
                if ictus[i][j][20]==12:
                    rep+='gaze left non-forced'
                if ictus[i][j][20]==13:
                    rep+='gaze up right non-forced'
                if ictus[i][j][20]==14:
                    rep+='gaze up left non-forced'
                if ictus[i][j][20]==15:
                    rep+='gaze down right non-forced'
                if ictus[i][j][20]==16:
                    rep+='gaze down left non-forced'
            if ictus[i][j][19]==2:
                rep+='dysconjugate: '
        elif ictus[i][j][0]==1:
            rep+=nyst+': '
        elif ictus[i][j][0]==2:
            rep+='chaotic eye movements: '
        elif ictus[i][j][0]==3:
            rep+='blinking: '
        elif ictus[i][j][0]==4:
            rep+='blepharospasm: '
        elif ictus[i][j][0]==5:
            rep+='eyelid retraction: '
        elif ictus[i][j][0]==6:
            rep+='eyelid myoclonus: '
        elif ictus[i][j][0]==7:
            rep+='eyelid flutter with eyes closed'
        elif ictus[i][j][0]==8:
            rep+='both eyes open'
        elif ictus[i][j][0]==9:
            rep+='both eyes closed'
        elif ictus[i][j][0]==10:
            rep+='one eye closed: Rt'
        elif ictus[i][j][0]==11:
            rep+='one eye closed: Lt'
        
            
        if ictus[i][j][0] in range (2,7) and ictus[i][j][1]==0: 
            rep+='\n'+rt+' prominent'
        if ictus[i][j][0] in range (2,7) and ictus[i][j][1]==1:
            rep+='\n'+rt+' mild'
        if ictus[i][j][0] in range (2,7) and ictus[i][j][2]==0:
            rep+='\n'+lt+' prominent'
        if ictus[i][j][0] in range (2,7) and ictus[i][j][2]==1:
            rep+='\n'+lt+' mild'
            
        if ictus[i][j][3]==0:
            rep+='\nright eye moves rightwise strong'
        if ictus[i][j][4]==0:
            rep+='\nright eye moves leftwise strong'
        if ictus[i][j][5]==0:
            rep+='\nright eye moves upward strong'
        if ictus[i][j][6]==0:
            rep+='\nright eye moves downward strong'
        if ictus[i][j][7]==0:
            rep+='\nright eye moves rightwise weak'
        if ictus[i][j][8]==0:
            rep+='\nright eye moves leftwise weak'
        if ictus[i][j][9]==0:
            rep+='\nright eye moves upward weak'
        if ictus[i][j][10]==0:
            rep+='\nright eye moves downward weak'
        if ictus[i][j][11]==0:
            rep+='\nleft eye moves rightwise strong'
        if ictus[i][j][12]==0:
            rep+='\nleft eye moves leftwise strong'
        if ictus[i][j][13]==0:
            rep+='\nleft eye moves upward strong'
        if ictus[i][j][14]==0:
            rep+='\nleft eye moves downward strong'
        if ictus[i][j][15]==0:
            rep+='\nleft eye moves rightwise weak'
        if ictus[i][j][16]==0:
            rep+='\nleft eye moves leftwise weak'
        if ictus[i][j][17]==0:
            rep+='\nleft eye moves upward weak'
        if ictus[i][j][18]==0:
            rep+='\nleft eye moves downward weak'
            
        if ictus[i][j][21]==0:
            rep+='\n\tIt was no atempt to open the eyes by observer'
        if ictus[i][j][21]==1:
            rep+='\n\tIt was an attempt to open the eyes by observer'
            
        if ictus[i][j][22]==0:
            rep+='\n\t\tThe patient did not resist this attempt'
        if ictus[i][j][22]==1:
            rep+='\n\t\tThe patient resisted this atempt'

        rep+='\n'
    return rep
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_hypermotor_rep(i):
    for j in range(4,len(ictus[i])):
        if j==4:
            rep='\n'
        
        rep+=str(j-3)+')'
        if ictus[i][j][0]==0:
            rep+='Hyperkinetic behavior'
        if ictus[i][j][0]==1:
            rep+='Hyperkinetic behavior with '+bimanped
        if ictus[i][j][1]==1:
            rep+='\n\twith '+gyrat+' to the right.'
        if ictus[i][j][1]==2:
            rep+='\n\twith '+gyrat+' to the left.'
        if ictus[i][j][9]==1:
            rep+='\n\twith rocking back and forth'
        if ictus[i][j][10]==1:
            rep+='\n\twith rocking side-to-side'
        if ictus[i][j][11]==1:
            rep+='\n\tAttempt of the patient to prevent movements'
        if ictus[i][j][2]==1:
            rep+='\n\tthe involvement of right arm is especially prominent'
        if ictus[i][j][3]==1:
            rep+='\n\tthe involvement of left arm is especially prominent'
        if ictus[i][j][4]==1:
            rep+='\n\tthe involvement of neck is especially prominent'
        if ictus[i][j][5]==1:
            rep+='\n\tthe involvement of face is especially prominent'
        if ictus[i][j][6]==1:
            rep+='\n\tthe involvement of right leg is especially prominent'
        if ictus[i][j][7]==1:
            rep+='\n\tthe involvement of left leg is especially prominent'
        if ictus[i][j][8]==1:
            rep+='\n\tthe involvement of trunk is especially prominent'
       
        
        rep+='\n'
    return rep
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_voice_rep(i):
    for j in range(4,len(ictus[i])):
        if j==4:
            rep='\n'
        
        rep+=str(j-3)+')'
        if ictus[i][j][0]==0:
            rep+=nvvoc
        elif ictus[i][j][0]==1:
            rep+=nvvocp
        elif ictus[i][j][0]==2:
            rep+=coher
            if ictus[i][j][1]==0:
                rep+=' (spontaneous)'
            if ictus[i][j][1]==1:
                rep+=' (answering questions)'
            if ictus[i][j][1]==2:
                rep+=' (both: spontaneous and answering questions)'
        elif ictus[i][j][0]==3:
            rep+=panicsp
        elif ictus[i][j][0]==4:
            rep+=cursesp
        elif ictus[i][j][0]==5:
            rep+=confuse
        elif ictus[i][j][0]==6:
            rep+=persiver
        elif ictus[i][j][0]==7:
            rep+=paraphas
        elif ictus[i][j][0]==8:
            rep+=broka
            if ictus[i][j][1]==0:
                rep+=' (partial)'
            if ictus[i][j][1]==1:
                rep+=' (complete)'            
        elif ictus[i][j][0]==9:
            rep+=vernike
            if ictus[i][j][1]==0:
                rep+=' (partial)'
            if ictus[i][j][1]==1:
                rep+=' (complete)'
        elif ictus[i][j][0]==10:
            rep+=anomia
        elif ictus[i][j][0]==11:
            rep+=loughter
        elif ictus[i][j][0]==12:
            rep+=cry
        elif ictus[i][j][0]==13:
            rep+=stut
        elif ictus[i][j][0]==14:
           rep+=forlanguage
        elif ictus[i][j][0]==15:
           rep+=' snoring'
        elif ictus[i][j][0]==16:
           rep+=' dysartria'
        elif ictus[i][j][0]==17:
           rep+=' hoarseness'
        elif ictus[i][j][0]==18:
           rep+=' sensorimotor aphasia'
           if ictus[i][j][1]==0:
                rep+=' (partial)'
           if ictus[i][j][1]==1:
                rep+=' (complete)'
        elif ictus[i][j][0]==19:
            rep+=' other voice behavior'
            rep+=' The comment for "other" voice phenomenon is \n/'+ictus[i][j][2]+'/'
        
        rep+='\n'
    return rep
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_dialept_rep(i):
    for j in range(4,len(ictus[i])):
        if j==4:
            rep='\n'
        
        rep+=str(j-3)+')'
        if ictus[i][j][0]==1:
            rep+=comp+' '+unresp
        if ictus[i][j][1]==1:
            rep+=part+' '+unresp
        if ictus[i][j][2]==1:
            rep+=amnes
        if ictus[i][j][3]==1:
            rep+=' cessation of activity.'
        if ictus[i][j][4]==1:
            rep+=slow
        if ictus[i][j][5]==1:
            rep+=hypoton
        if ictus[i][j][6]==1:
            rep+=explor
        if ictus[i][j][7]==1:
            rep+=nvagression
        if ictus[i][j][8]==1:
           rep+=nvpanic
        if ictus[i][j][9]==1:
           rep+=' agitation'
        if ictus[i][j][10]==1:
           rep+=' other dialeptic behavior'
           rep+=' The comment for "other" dialeptic phenomenon is \n/'+ictus[i][j][11]+'/'
        if ictus[i][j][12]==1:
           rep+=' disoriented behavior'
 
        rep+='\n'
    return rep
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_gtcs_rep(i):
    for j in range(4,len(ictus[i])):
        if j==4:
            rep='\n'
        

        rep+=str(j-3)+')'
        if ictus[i][j][0]==1:
            rep+=' GTCS ended in the position on the back. '
        if ictus[i][j][0]==2:
            rep+=' GTCS ended in the position on the abdomen. '
        if ictus[i][j][0]==3:
            rep+=' GTCS ended in the position on the Rt side. '            
        if ictus[i][j][0]==4:
            rep+=' GTCS ended in the position on the Lt side. '
            
        if ictus[i][j][1]==1:
            rep+='\n After GTCS the patient turned to position on the back. '
        if ictus[i][j][1]==2:
            rep+='\n After GTCS the patient turned to position on the abdomen. '
        if ictus[i][j][1]==3:
            rep+='\n After GTCS the patient turned to position on the Rt side. '
        if ictus[i][j][1]==4:
            rep+='\n After GTCS the patient turned to position on the Lt side. '        
        
        rep+='''\nThe time of trasition from tonic to cloic phaze of GTCS is '''+ictus[i][j][2][0:2]+''':'''+ictus[i][j][2][2:4]+''':'''+ictus[i][j][2][4:]+'''.'''
        rep+='\n'
    return rep
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_aurareport_rep(i):
    for j in range(4,len(ictus[i])):
        if j==4:
            rep='\n'
        

        rep+=str(j-3)+')'
        if ictus[i][j][0]==0:
            rep+='Verbal, certain, aura report.'
            if ictus[i][j][36]==1:
                rep+='\n Somatosensory aura:'
                if ictus[i][j][37]==1:
                    rep+='\n\tTingling'
                if ictus[i][j][38]==1:
                    rep+='\n\tAnesthesia'
                if ictus[i][j][39]==1:
                    rep+='\n\tPain'
                if ictus[i][j][40]==1:
                    rep+='\n\tWarm'
                if ictus[i][j][41]==1:
                    rep+='\n\tCold'
                if ictus[i][j][121]==1:
                    rep+='\n\t"Other" somatosensory aura'
                    rep+=' The comment for "other" somatosensory aura is \n/'+ictus[i][j][128]+'/'
            
            elif ictus[i][j][36]==2:
                rep+='\n Visual aura.'
                if ictus[i][j][45]==1:
                    rep+='\n\tFlashing lights'
                if ictus[i][j][46]==1:
                    rep+='\n\tScotoma'
                if ictus[i][j][47]==1:
                    rep+='\n\tColors'
                if ictus[i][j][48]==1:
                    rep+='\n\tDots'
                if ictus[i][j][49]==1:
                    rep+='\n\tLines'
                if ictus[i][j][50]==1:
                    rep+='\n\tFormed halucinations'
                if ictus[i][j][51]==1:
                    rep+='\n\tMicropsia'
                if ictus[i][j][52]==1:
                    rep+='\n\tMacropsia'
                if ictus[i][j][53]==1:
                    rep+='\n\tShape distortion'
                if ictus[i][j][54]==1:
                    rep+='\n\tDistance distortion'
                if ictus[i][j][55]==1:
                    rep+='\n\tLight intensity change'
                if ictus[i][j][56]==1:
                    rep+='\n\tColor intensity change'
                if ictus[i][j][57]==1:
                    rep+='\n\tPalinopsia'
                if ictus[i][j][58]==1:
                    rep+='\n\tOscilopsia'
                if ictus[i][j][59]==1:
                    rep+='\n\tLoss of vision'
                if ictus[i][j][122]==1:
                    rep+='\n\t"Other" visual aura'
                    rep+=' The comment for "other" visual aura is \n/'+ictus[i][j][129]+'/'
                if ictus[i][j][60]==1:
                    rep+='\n\tRt upper quadrant'
                if ictus[i][j][61]==1:
                    rep+='\n\tRt lower quadrant'
                if ictus[i][j][62]==1:
                    rep+='\n\tRt hemifield'
                if ictus[i][j][63]==1:
                    rep+='\n\tLt upper quadrant'
                if ictus[i][j][64]==1:
                    rep+='\n\tLt lower quadrant'
                if ictus[i][j][65]==1:
                    rep+='\n\tLt hemifield'
                if ictus[i][j][66]==1:
                    rep+='\n\tCentral visual area'
                if ictus[i][j][67]==1:
                    rep+='\n\tRt eye'
                if ictus[i][j][68]==1:
                    rep+='\n\tLt eye'
                if ictus[i][j][69]==1:
                    rep+='\n\tEnter visual area'
                if ictus[i][j][70]==1:
                    rep+='\n\tMoving clockwise'
                if ictus[i][j][71]==1:
                    rep+='\n\tMoving counterclockwise'
                if ictus[i][j][72]==1:
                    rep+='\n\tMoving up'
                if ictus[i][j][73]==1:
                    rep+='\n\tMoving down'
                if ictus[i][j][74]==1:
                    rep+='\n\tMoving right'
                if ictus[i][j][75]==1:
                    rep+='\n\tMoving left'
                if ictus[i][j][76]==1:
                    rep+='\n\tStationary'
                            
            elif ictus[i][j][36]==3:
                rep+='\n Auditory aura.'
                if ictus[i][j][77]==1:
                    rep+='\n\tRinging'
                if ictus[i][j][78]==1:
                    rep+='\n\tBuzzing'
                if ictus[i][j][79]==1:
                    rep+='\n\tRoaring'
                if ictus[i][j][80]==1:
                    rep+='\n\tVoices'
                if ictus[i][j][81]==1:
                    rep+='\n\tMelodies'
                if ictus[i][j][82]==1:
                    rep+='\n\tSound distortion'
                if ictus[i][j][83]==1:
                    rep+=' (lateralized to the right)'
                if ictus[i][j][84]==1:
                    rep+=' (lateralized to the left)'
                if ictus[i][j][85]==1:
                    rep+=' (non-lateralized)'
                if ictus[i][j][123]==1:
                    rep+='\n\t"Other" auditory aura'
                    rep+=' The comment for "other" auditory aura is \n/'+ictus[i][j][130]+'/'
           
            elif ictus[i][j][36]==4:
                rep+='\n Gustatory aura.'
            
            elif ictus[i][j][36]==5:
                rep+='\n Olfactory aura.'
                if ictus[i][j][118]==1:
                    rep+='\n\tPleasant olfactory aura'
                if ictus[i][j][119]==1:
                    rep+='\n\tUnpleasant olfactory aura'
                if ictus[i][j][120]==1:
                    rep+='\n\tNeutral olfactory aura' 
            
            elif ictus[i][j][36]==6:
                rep+='\n Vertiginous aura.'
            
            elif ictus[i][j][36]==7:
                rep+='\n Autonomic/Visceral aura.'
                if ictus[i][j][86]==1:
                    rep+='\n\tPalpitation'
                if ictus[i][j][87]==1:
                    rep+='\n\tShortness of breath'
                if ictus[i][j][88]==1:
                    rep+='\n\tChoking'
                if ictus[i][j][89]==1:
                    rep+='\n\tUrinary urge'
                if ictus[i][j][90]==1:
                    rep+='\n\tDefecation urge'
                if ictus[i][j][91]==1:
                    rep+='\n\tSexual feelings'
                if ictus[i][j][92]==1:
                    rep+='\n\tFeeling hot'
                if ictus[i][j][93]==1:
                    rep+='\n\tFeeling cold'
                if ictus[i][j][124]==1:
                    rep+='\n\t"Other" autonomic/visceral aura'
                    rep+=' The comment for "other" autonomic/visceral aura is \n/'+ictus[i][j][131]+'/'   
                if ictus[i][j][94]==1:
                    rep+='\n\tNausea'
                if ictus[i][j][95]==1:
                    rep+='\n\tAbdominal discomfort'
                if ictus[i][j][96]==1:
                    rep+='\n\tStatic abdominal discomfort'
                if ictus[i][j][97]==1:
                    rep+='\n\tRising abdominal discomfort'
                if ictus[i][j][98]==1:
                    rep+='\n\tChest pain'
                if ictus[i][j][99]==1:
                    rep+='\n\tChest discomfort'
                if ictus[i][j][100]==1:
                    rep+='\n\tThroat sensation'
                
            
            elif ictus[i][j][36]==9:
                rep+='\n Experiential aura.'
                if ictus[i][j][101]==1:
                    rep+='\n\tFear'
                if ictus[i][j][102]==1:
                    rep+='\n\tAnxiety'
                if ictus[i][j][103]==1:
                    rep+='\n\tAnger'
                if ictus[i][j][104]==1:
                    rep+='\n\tElation'
                if ictus[i][j][105]==1:
                    rep+='\n\tPleasure'
                if ictus[i][j][106]==1:
                    rep+='\n\tForced thinking'
                if ictus[i][j][107]==1:
                    rep+='\n\tDisorganised thinking'
                if ictus[i][j][108]==1:
                    rep+='\n\tMultimodal halucinations'
                if ictus[i][j][109]==1:
                    rep+='\n\tComplex memories'
                if ictus[i][j][110]==1:
                    rep+='\n\tDeja vu'
                if ictus[i][j][111]==1:
                    rep+='\n\tJamais vu'
                if ictus[i][j][112]==1:
                    rep+='\n\tDepersonalization'
                if ictus[i][j][113]==1:
                    rep+='\n\tDerealization'
                if ictus[i][j][114]==1:
                    rep+='\n\tFeeling of presence'
                if ictus[i][j][115]==1:
                    rep+='\n\tOut-of-body experience'
                if ictus[i][j][116]==1:
                    rep+='\n\tAutoscopy'
                if ictus[i][j][117]==1:
                    rep+='\n\tOther experiential aura'
                    rep+=' The comment for "other" experiential aura is \n/'+ictus[i][j][132]+'/'
                if ictus[i][j][126]==1:
                    rep+='\n\tSadness'
                
            elif ictus[i][j][36]==10:
                rep+='\n Cephalic aura.'
            elif ictus[i][j][36]==11:
                rep+='\n "Other" aura.'
                rep+=' The comment for "other" verbally reported aura is \n/'+ictus[i][j][127]+'/'
            
        elif ictus[i][j][0]==1:
            rep+='Verbal, possible, aura report.'
        elif ictus[i][j][0]==2:
            rep+='Non-verbal, body part specific, aura report.\nThe patient indicated:'
        elif ictus[i][j][0]==3:
            rep+='Non-verbal general aura report.'
       
        if ictus[i][j][1]==1:
            rep+='\n\tright part of the face'
        if ictus[i][j][2]==1:
            rep+='\n\tleft part of the face'
        if ictus[i][j][3]==1:
            rep+='\n\tright eye'
        if ictus[i][j][4]==1:
            rep+='\n\tleft eye'
        if ictus[i][j][5]==1:
            rep+='\n\tright ear'
        if ictus[i][j][6]==1:
            rep+='\n\tleft ear'
        if ictus[i][j][7]==1:
            rep+='\n\tright scalp'
        if ictus[i][j][8]==1:
            rep+='\n\tleft scalp'
        if ictus[i][j][9]==1:
            rep+='\n\tocciput'
        if ictus[i][j][10]==1:
            rep+='\n\tnose'
        if ictus[i][j][11]==1:
            rep+='\n\toral cavity'
        if ictus[i][j][12]==1:
            rep+='\n\tanterior aspect of the neck'
        if ictus[i][j][13]==1:
            rep+='\n\tposterior aspect of the neck'
        if ictus[i][j][14]==1:
            rep+='\n\tright aspect of the neck'
        if ictus[i][j][15]==1:
            rep+='\n\tleft aspect of the neck'
        if ictus[i][j][16]==1:
            rep+='\n\tright part of the chest'
        if ictus[i][j][17]==1:
            rep+='\n\tleft part of the chest'
        if ictus[i][j][18]==1:
            rep+='\n\tright part of the abdomen'
        if ictus[i][j][19]==1:
            rep+='\n\tleft part of the abdomen'
        if ictus[i][j][20]==1:
            rep+='\n\tright part of the upper back'
        if ictus[i][j][21]==1:
            rep+='\n\tleft part of the upper back'
        if ictus[i][j][22]==1:
            rep+='\n\tright part of the lower back'
        if ictus[i][j][23]==1:
            rep+='\n\tleft part of the lower back'
        if ictus[i][j][24]==1:
            rep+='\n\tproximal part of the right arm'
        if ictus[i][j][25]==1:
            rep+='\n\tdistal part of the right arm'
        if ictus[i][j][26]==1:
            rep+='\n\tproximal part of the left arm'
        if ictus[i][j][27]==1:
            rep+='\n\tdistal part of the left arm'
        if ictus[i][j][28]==1:
            rep+='\n\tproximal part of the right leg'
        if ictus[i][j][29]==1:
            rep+='\n\tdistal part of the right leg'
        if ictus[i][j][30]==1:
            rep+='\n\tproximal part of the left leg'
        if ictus[i][j][31]==1:
            rep+='\n\tdistal part of the left leg'
        if ictus[i][j][32]==1:
            rep+='\n\tright part of the buttock'
        if ictus[i][j][33]==1:
            rep+='\n\tleft part of the buttock'
        if ictus[i][j][34]==1:
            rep+='\n\tgenital area'
        
        if ictus[i][j][42]==1:
            rep+='\n\tgeneralized'
        if ictus[i][j][43]==1:
            rep+='\n\tright hemibody'
        if ictus[i][j][44]==1:
            rep+='\n\tleft hemibody'
 
        if ictus[i][j][35]==0:
            rep+='Alarming button searching.'
        elif ictus[i][j][35]==1:
            rep+='Alarming button pushing.'
        elif ictus[i][j][35]==2:
            rep+='Alarming gesticulation/vocalization.'
        
        rep+='\n'
    return rep
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_other_rep(i):
    for j in range(4,len(ictus[i])):
        if j==4:
            rep='\n'
        

        rep+=str(j-3)+')'
        if ictus[i][j][0]==0:
            rep+='Vigilance change: '
        elif ictus[i][j][0]==1:
            rep+="Patient's position change:"
        elif ictus[i][j][0]==2:
            rep+='Walking.'
        elif ictus[i][j][0]==3:
            rep+="Observer's behavior change."
        elif ictus[i][j][0]==4:
            rep+='Patient moves out of the videeo-camera field.'

        elif ictus[i][j][0]==5:
            rep+='Head nodding.'
        elif ictus[i][j][0]==6:
            rep+='Head side-to-side movements ("no-no" sign).'
        elif ictus[i][j][0]==7:
            rep+='Unspecified head movements.'
        elif ictus[i][j][0]==8:
            rep+='Unspecified movements of trunk.'
        elif ictus[i][j][0]==9:
            rep+='Uspecified movements of limbs, involving:'
        elif ictus[i][j][0]==10 and ictus[i][j][25]==1:
            rep+='The patient falled: drop attack'
        elif ictus[i][j][0]==10 and ictus[i][j][25]==2:
            if ictus[i][j][26]==1:
                rep+=': the fall was uncontrolled'
            if ictus[i][j][26]==2:
                rep+=': the fall was completely controlled by patient'
            if ictus[i][j][26]==3:
                rep+=': the fall was partially controlled by patient'
            if ictus[i][j][26]==4:
                rep+=': the fall was controlled by other'
            if ictus[i][j][26]==5:
                rep+=': fall control is not clear'
            rep+='The patient falled: no drop attack'
        elif ictus[i][j][0]==11:
            rep+='Eating'
        elif ictus[i][j][0]==12:
            rep+='Drinking'
        elif ictus[i][j][0]==13:
            rep+='Electrode self detaching'
        elif ictus[i][j][0]==14:
            rep+='Physical trauma'
        elif ictus[i][j][0]==15:
            rep+='Sleep orofacial movements'
        elif ictus[i][j][0]==16:
            rep+='Periodic limb movement of sleep'
        elif ictus[i][j][0]==17:
            rep+='Chorea'
        elif ictus[i][j][0]==18:
            rep+='Athetosis'
        elif ictus[i][j][0]==19:
            rep+='Ticks'
        elif ictus[i][j][0]==20:
            rep+='Akathisia or restless leg syndrom'
        elif ictus[i][j][0]==21:
            rep+='Balismus'
        elif ictus[i][j][0]==22:
            rep+='Unspecified dyskynesia'
        elif ictus[i][j][0]==23:
            rep+='Unspecified movements of face.'
        elif ictus[i][j][0]==24:
            rep+='Unspecified dystonia'
        elif ictus[i][j][0]==25:
            rep+='Unspecified behavior change'
        elif ictus[i][j][0]==26:
            rep+='"Other" behavior in "other" cathegory'
            rep+=' The comment for "other" autonomic phenomenon is \n/'+ictus[i][j][27]+'/'
        elif ictus[i][j][0]==27:
            rep+='Body parts shaking'
        elif ictus[i][j][0]==28:
            rep+='Pelvic thrust (unspecified)'
            

        if ictus[i][j][1]==0:
            rep+='waking up.'
        elif ictus[i][j][1]==1:
            rep+='falling asleep. '
                
        if ictus[i][j][2]==0:
            rep+='siting from laying.'
        elif ictus[i][j][2]==1:
            rep+='standing from siting.'
        elif ictus[i][j][2]==2:
            rep+='standing from laying.'
        elif ictus[i][j][2]==3:
            rep+='laying from siting.'
        elif ictus[i][j][2]==4:
            rep+='siting from standing.'
        elif ictus[i][j][2]==5:
            rep+='laying from standing.'
        elif ictus[i][j][2]==6:
            rep+='change the laying position "laying to laying".'

        if ictus[i][j][3]==1:
            rep+='\n\tright proximal arm'
        if ictus[i][j][4]==1:
            rep+='\n\tleft proximal arm'
        if ictus[i][j][5]==1:
            rep+='\n\tright distal arm'
        if ictus[i][j][6]==1:
            rep+='\n\tleft distal arm'
        if ictus[i][j][7]==1:
            rep+='\n\tright proximal leg '
        if ictus[i][j][8]==1:
            rep+='\n\tleft proximal leg'
        if ictus[i][j][9]==1:
            rep+='\n\tright distal leg'
        if ictus[i][j][10]==1:
            rep+='\n\tleft distal leg'
            
        if ictus[i][j][11]==1:
            rep+='\n\tHead trauma'
        if ictus[i][j][12]==1:
            rep+='\n\tNeck trauma'
        if ictus[i][j][13]==1:
            rep+='\n\tTrunk trauma'
        if ictus[i][j][14]==1:
            rep+='\n\tRt arm trauma'
        if ictus[i][j][15]==1:
            rep+='\n\tLt arm trauma'
        if ictus[i][j][16]==1:
            rep+='\n\tRt leg trauma'
        if ictus[i][j][17]==1:
            rep+='\n\tLt leg trauma'
            
        if ictus[i][j][18]==1:
            rep+='\n\tRight arm'
        if ictus[i][j][19]==1:
            rep+='\n\tLeft arm'
        if ictus[i][j][20]==1:
            rep+='\n\tNeck/Head'
        if ictus[i][j][21]==1:
            rep+='\n\tFace'
        if ictus[i][j][22]==1:
            rep+='\n\tRight leg'
        if ictus[i][j][23]==1:
            rep+='\n\tLeft leg'
        if ictus[i][j][24]==1:
            rep+='\n\tTrunk'
       
       
        rep+='\n'
    return rep
#---------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------
def ds_triger_rep(i):
    for j in range(4,len(ictus[i])):
        if j==4:
            rep='\n'
           
    
       
        if ictus[i][j][0]==1:
            rep+='\n\tvisual trigger'
        if ictus[i][j][1]==1:
            rep+='\n\tmusical trigger'
        if ictus[i][j][2]==1:
            rep+='\n\tauditory non-musical trigger'
        if ictus[i][j][3]==1:
            rep+='\n\ttactile trigger'
        if ictus[i][j][4]==1:
            rep+='\n\tother trigger'
            rep+=' The comment for "other" trigger is \n/'+ictus[i][j][8]+'/'
        if ictus[i][j][5]==1:
            rep+='\n\tstartle trigger'
        if ictus[i][j][6]==1:
            rep+='\n\teating trigger'
        if ictus[i][j][7]==1:
            rep+='\n\tdrinking trigger'
            
        rep+='\n'
    return rep

#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def ds_event_editor(ds_starter, ictus):
    global wx_text
    global software_user_dialogue
    global edit, new_event, event_editor
    edit=''
    ds_starter=ds_starter[0:7]+[1]*10
    nm=ds_starter[0]
    while edit!=0:
        wx_text=nm+''', if you want to edit the reported event, write the event number, which should be revised in the row above. 
        Otherwise, write 0. At the end press this button'''
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("Software:\n" +wx_text+"\n")
        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
        if __name__ == '__main__':
            app = wx.App()
            frame = MyFrame_write()    
            app.MainLoop()
        app=[]; app = wx.App(None)
        del app
        edit=value
        print(value+"\n")
        software_user_dialogue+=value+"\n"
        try:
            edit=int(edit)
        except:
            edit=''
        if edit in range (1,len(ictus)+1):
            global ev_event_editing_1, ev_event_editing_2, ev_event_editing_3
            ev_event_editing_1=''
            ev_event_editing_2=''
            ev_event_editing_3=''
            event_editor=1
            wx_text=nm+''', Please write what part of event report you want to edit'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_event_editing()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            
            if ictus[edit-1][0]==0:
                simple_movements=ds_simple_movements(ds_starter, editing_mode)
                new_event=simple_movements
                if ev_event_editing_3==1:
                    ictus[edit-1]=new_event[0]
                else:
                    ictus[edit-1][2]=new_event[0][2]
                    ictus[edit-1][3]=new_event[0][3]
                ictus=sorted(ictus, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                report=ds_reporter(ictus)
                print(report)               
                
            elif ictus[edit-1][0]==1:
                automatic_movements=ds_automatisms(ds_starter, editing_mode)
                new_event=automatic_movements
                if ev_event_editing_3==1:
                    ictus[edit-1]=new_event[0]
                else:
                    ictus[edit-1][2]=new_event[0][2]
                    ictus[edit-1][3]=new_event[0][3]
                ictus=sorted(ictus, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                report=ds_reporter(ictus)
                print(report)                
              
            elif ictus[edit-1][0]==2:
                autonomic_phenomena=ds_autonomic(ds_starter, editing_mode)
                new_event=autonomic_phenomena
                if ev_event_editing_3==1:
                    ictus[edit-1]=new_event[0]
                else:
                    ictus[edit-1][2]=new_event[0][2]
                    ictus[edit-1][3]=new_event[0][3]
                ictus=sorted(ictus, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                report=ds_reporter(ictus)
                print (report)               
                
            elif ictus[edit-1][0]==3:
                eye_movements=ds_eye_movements(ds_starter, editing_mode)
                new_event=eye_movements
                if ev_event_editing_3==1:
                    ictus[edit-1]=new_event[0]
                else:
                    ictus[edit-1][2]=new_event[0][2]
                    ictus[edit-1][3]=new_event[0][3]
                ictus=sorted(ictus, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                report=ds_reporter(ictus)
                print(report)              
               
            elif ictus[edit-1][0]==4:
                hypermotor_movements=ds_hypermotor(ds_starter, editing_mode)
                new_event=hypermotor_movements
                if ev_event_editing_3==1:
                    ictus[edit-1]=new_event[0]
                else:
                    ictus[edit-1][2]=new_event[0][2]
                    ictus[edit-1][3]=new_event[0][3]
                ictus=sorted(ictus, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                report=ds_reporter(ictus)
                print(report)                
               
            elif ictus[edit-1][0]==5:
                voice_phenomena=ds_voice(ds_starter, editing_mode)
                new_event=voice_phenomena
                if ev_event_editing_3==1:
                    ictus[edit-1]=new_event[0]
                else:
                    ictus[edit-1][2]=new_event[0][2]
                    ictus[edit-1][3]=new_event[0][3]
                ictus=sorted(ictus, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                report=ds_reporter(ictus)
                print(report)                
               
            elif ictus[edit-1][0]==6:
                dialeptic_behavior=ds_dialeptic(ds_starter, editing_mode)
                new_event=dialeptic_behavior
                if ev_event_editing_3==1:
                    ictus[edit-1]=new_event[0]
                else:
                    ictus[edit-1][2]=new_event[0][2]
                    ictus[edit-1][3]=new_event[0][3]
                ictus=sorted(ictus, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                report=ds_reporter(ictus)
                print(report)               
                
            elif ictus[edit-1][0]==7:
                gtcs_features=ds_gtcs(ds_starter, editing_mode)
                new_event=gtcs_features
                if ev_event_editing_3==1:
                    ictus[edit-1]=new_event[0]
                else:
                    ictus[edit-1][2]=new_event[0][2]
                    ictus[edit-1][3]=new_event[0][3]
                ictus=sorted(ictus, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                report=ds_reporter(ictus)
                print(report)                
                
            elif ictus[edit-1][0]==8:
                aura_report=ds_aura(ds_starter, editing_mode)
                new_event=aura_report
                if ev_event_editing_3==1:
                    ictus[edit-1]=new_event[0]
                else:
                    ictus[edit-1][2]=new_event[0][2]
                    ictus[edit-1][3]=new_event[0][3]
                ictus=sorted(ictus, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                report=ds_reporter(ictus)
                print(report)                
                
            elif ictus[edit-1][0]==9:
                other_event=ds_other(ds_starter, editing_mode)
                new_event=other_event
                if ev_event_editing_3==1:
                    ictus[edit-1]=new_event[0]
                else:
                    ictus[edit-1][2]=new_event[0][2]
                    ictus[edit-1][3]=new_event[0][3]
                ictus=sorted(ictus, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                report=ds_reporter(ictus)
                print(report)                
                
            elif ictus[edit-1][0]==10:
                triger_event=ds_triger(ds_starter)
                new_event=triger_event
                if ev_event_editing_3==1:
                    ictus[edit-1]=new_event[0]
                else:
                    ictus[edit-1][2]=new_event[0][2]
                    ictus[edit-1][3]=new_event[0][3]
                ictus=sorted(ictus, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                report=ds_reporter(ictus)
                print(report)                
                
        elif edit==0:
            edit=0
        else:
            edit=''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
    ictus_x=copy.copy(ictus)    
    return ictus_x
#---------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------
def edit_introduction():
    global ev_yesno_1, ev_yesno_2, ev_yesno_3, ev_yesno_4, wx_text, ev_save_1, ev_save_2,ev_exit
    global software_user_dialogue, eventstart, ev_timing, ds_starter, i_starter
    nm=ds_starter[0]
#Sep 2 - Introducing the ictal episode code
    ictal_episode_code = ''
    print ('''The ictal episode code was defined as '''+ds_starter[18])
    wx_text=nm+''', please, write the CODE of ictal episode in the window above and then press this button '''
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print(current_time)
    print("Software:\n" +wx_text+"\n")
    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
    while ictal_episode_code == '':
        if __name__ == '__main__':
            app = wx.App()
            frame = MyFrame_write()
            app.MainLoop()
        app=[]; app = wx.App(None)
        del app
        ictal_episode_code=value
        print(value+"\n")
        software_user_dialogue+=value+"\n"
        if ictal_episode_code == '':
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
    #--------------------------------------------------------------------------------------------------------------------------------------
    #Step 3 - Introduction the date
    print ('''The ictal episode date was defined as '''+ds_starter[1])    
    eventdate='333333'       
    wx_text=nm+''', please, write the DATE of ictal episode in the form ddmmyy in the window above and then press this button'''
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print(current_time)
    print("Software:\n" +wx_text+"\n")
    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
    while len (eventdate) !=6 or int(eventdate[0:2])<0 or int(eventdate[0:2])>31 or int(eventdate[2:4])<0 or int(eventdate[2:4])>12\
          or int(eventdate[4:])<0 or int(eventdate[4:])>99:
        if __name__ == '__main__':
            app = wx.App()
            frame = MyFrame_write()
            app.MainLoop()
        app=[]; app = wx.App(None)
        del app
        eventdate=value
        print(value+"\n")
        software_user_dialogue+=value+"\n"
        try:
            event_date=int(eventdate)
        except:
            eventdate=''
        if len (eventdate) !=6 or int(eventdate[0:2])<0 or int(eventdate[0:2])>31 or int(eventdate[2:4])<0 or int(eventdate[2:4])>12\
        or int(eventdate[4:])<0 or int(eventdate[4:])>99:
          now = datetime.now()
          current_time = now.strftime("%H:%M:%S")
          print(current_time)
          print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
          software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''' 
    #-----------------------------------------------------------------------------------------
    #Seeing EEG during video interpritation
    print ('''The ictal episode date was defined as '''+i_starter[3]) 
    eeg=ds_starter[3]
    wx_text=nm+''', if you see EEG, when interpreting video of this
                  ictal episode, push "yes", if not -"no"'''
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print(current_time)
    print("Software:\n" +wx_text+"\n")
    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"    
    ev_yesno_1=''
    ev_yesno_2=''
    ev_yesno_3=''
    if __name__ == '__main__':
        app = wx.App()
        frame = MyFrame_yes_no_orexitsave()    
        app.MainLoop()
    app=[]; app = wx.App(None)
    del app
    wx_text=''
    if ev_yesno_1=='y':        
        eeg=1                         
    if ev_yesno_2=='n':
        eeg=0
    if ev_yesno_3==1:
            ev_save_1=''
            ev_save_2=''
            wx_text=nm+''', plesase select: whether or not you want to save your input to the ictal episode
            interpritation during this session'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_save_file()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            if ev_save_1==1:                                
                ed_starter=[nm, eventdate, ds_starter[2], ds_starter[3], ds_starter[4], ds_starter[5], ds_starter[6], ds_starter[7]]
                edit_starter=ed_starter+ds_starter[8:]
                edit_starter[18]=ictal_episode_code
                edit_starter[19]=ds_starter[19]
                ds_starter=copy.copy(edit_starter)
            #Saving file
                ictal_episode=Ictal(ictus,ds_starter,report)
                save_variable()                
                try:
                    os.remove('ictal_episode_' + ds_starter[18]+'_draft.dat')
                    print('The draft-file has been removed')
                except:
                    print("The drat-file doesn't exist")
                wx_text=nm+''', the new file was saved, thank you for finalizing ictal episode interpretation
                Please,  push the button "Exit" to close Digital Semiology.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                ev_exit=''
                if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_exit()    
                        app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                if ev_exit==1:
                    sys.exit()
            if ev_save_2==1:
                try:
                    os.remove('ictal_episode_' + ds_starter[18]+'_draft.dat')
                    print('The draft-file has been removed')
                except:
                    print("The drat-file doesn't exist")        
                print(nm+''', the new file was NOT saved''')                
                sys.exit()       
    #----------------------------------------------------------------------------------------------------------------------------------------
    #Step 4 - Introduction of timing of ictal episode start in hour minute second.
    print ('''The ictal episode date was defined as '''+ds_starter[2]) 
    eventstart=''
    print ('''The start time of ictal episode was defined as '''+ds_starter[2])           
    wx_text=nm+''', please, write the time of ictal episode START in the form hhmmss'''
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print(current_time)
    print("Software:\n" +wx_text+"\n")
    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"
    while len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
    or int(eventstart[4:])<0 or int(eventstart[4:])>59:
        if videoplayer==0: 
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_write()
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            eventstart=value
            print(eventstart+'\n')
        if videoplayer==1:
            offset_1=99999999
            text_file=open("intercode.txt", "w", encoding='utf-8')
            text_file.write(str(offset_1))
            text_file.close()
            ev_timing=''
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_video_player_event()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            if ev_timing==1:
                text_file=open("intercode.txt", "r", encoding='utf-8')
                read_value=text_file.read(10)
                print(read_value+'\n')
                software_user_dialogue+=read_value+"\n"
                text_file.close()
                eventstart=read_value
        try:
            event_start=int(eventstart)
        except:
            eventstart=''
        if len (eventstart) !=6 or int(eventstart[0:2])<0 or int(eventstart[0:2])>24 or int(eventstart[2:4])<0 or int(eventstart[2:4])>59\
        or int(eventstart[4:])<0 or int(eventstart[4:])>59:
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
            software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''      

    #----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    #Step 7 - Definition the chance that this episode is just a baseline behavior.
    print ('''The chance tht this ictal episode is just a baseline behavior was defined as '''+i_starter[4]) 
    event_certainity=ds_starter[4]     
    global ev_sertainity_1, ev_sertainity_2, ev_sertainity_3, ev_sertainity_4, ev_sertainity_5 
    ev_sertainity_1=''
    ev_sertainity_2=''
    ev_sertainity_3=''
    ev_sertainity_4=''
    ev_sertainity_5=''
    wx_text=nm+''', please define the chance that this ictal episode is just a baseline behavior.'''
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print(current_time)
    print("Software:\n" +wx_text+"\n")
    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"       
    if __name__ == '__main__':
        app = wx.App()
        frame = MyFrame_certainity()    
        app.MainLoop()
    app=[]; app = wx.App(None)
    del app
    wx_text=''
    if ev_sertainity_1==1:
        event_certainity=0
    if ev_sertainity_2==1:
        event_certainity=1
    if ev_sertainity_3==1:
        event_certainity=2
    if ev_sertainity_4==1:
        event_certainity=3
    if ev_sertainity_5==1:
            ev_save_1=''
            ev_save_2=''
            wx_text=nm+''', plesase select: whether or not you want to save your input to the ictal episode
            interpritation during this session'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_save_file()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            if ev_save_1==1:                                
                ed_starter=[nm, eventdate, eventstart, eeg, ds_starter[4], ds_starter[5], ds_starter[6], ds_starter[7]]
                edit_starter=ed_starter+ds_starter[8:]
                edit_starter[18]=ictal_episode_code
                edit_starter[19]=ds_starter[19]
                ds_starter=copy.copy(edit_starter)
            #Saving file
                ictal_episode=Ictal(ictus,ds_starter,report)
                save_variable()                
                try:
                    os.remove('ictal_episode_' + ds_starter[18]+'_draft.dat')
                    print('The draft-file has been removed')
                except:
                    print("The drat-file doesn't exist")
                wx_text=nm+''', the new file was saved, thank you for finalizing ictal episode interpretation
                Please,  push the button "Exit" to close Digital Semiology.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                ev_exit=''
                if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_exit()    
                        app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                if ev_exit==1:
                    sys.exit()
            if ev_save_2==1:
                try:
                    os.remove('ictal_episode_' + ds_starter[18]+'_draft.dat')
                    print('The draft-file has been removed')
                except:
                    print("The drat-file doesn't exist")        
                print(nm+''', the new file was NOT saved''')                
                sys.exit()                
    
    #-----------------------------------------------------------------------------------------------------------------------------------------------------------
    #Step 8 - Definition  the chance that this episode is PNES
    print ('''The chance tht this ictal episode is PNES was defined as '''+i_starter[5]) 
    pnes_chance=ds_starter[5]
    ev_sertainity_1=''
    ev_sertainity_2=''
    ev_sertainity_3=''
    ev_sertainity_4=''
    ev_sertainity_5=''
    wx_text=nm+''', please define the chance that this ictal episode episode is PNES.'''
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print(current_time)
    print("Software:\n" +wx_text+"\n")
    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"      
    if __name__ == '__main__':
        app = wx.App()
        frame = MyFrame_certainity()    
        app.MainLoop()
    app=[]; app = wx.App(None)
    del app
    wx_text=''
    if ev_sertainity_1==1:
        pnes_chance=0
    if ev_sertainity_2==1:
        pnes_chance=1
    if ev_sertainity_3==1:
        pnes_chance=2
    if ev_sertainity_4==1:
        pnes_chance=3
    if ev_sertainity_5==1:
            ev_save_1=''
            ev_save_2=''
            wx_text=nm+''', plesase select: whether or not you want to save your input to the ictal episode
            interpritation during this session'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_save_file()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            if ev_save_1==1:                                
                ed_starter=[nm, eventdate, eventstart, eeg, event_certainity, ds_starter[5], ds_starter[6], ds_starter[7]]
                edit_starter=ed_starter+ds_starter[8:]
                edit_starter[18]=ictal_episode_code
                edit_starter[19]=ds_starter[19]
                ds_starter=copy.copy(edit_starter)
            #Saving file
                ictal_episode=Ictal(ictus,ds_starter,report)
                save_variable()                
                try:
                    os.remove('ictal_episode_' + ds_starter[18]+'_draft.dat')
                    print('The draft-file has been removed')
                except:
                    print("The drat-file doesn't exist")
                wx_text=nm+''', the new file was saved, thank you for finalizing ictal episode interpretation
                Please,  push the button "Exit" to close Digital Semiology.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                ev_exit=''
                if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_exit()    
                        app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                if ev_exit==1:
                    sys.exit()
            if ev_save_2==1:
                try:
                    os.remove('ictal_episode_' + ds_starter[18]+'_draft.dat')
                    print('The draft-file has been removed')
                except:
                    print("The drat-file doesn't exist")        
                print(nm+''', the new file was NOT saved''')                
                sys.exit()                 

    #------------------------------------------------------------------------------------------------------------------------------------------------------------
    #Step 9 - Definition  the chance that this episode is clinically significant , but it is not epileptic seizure and not PNES: patolgic non-psychogenic non-epileptic,
    #such as REM-sleep behavior, somnambulism, akathisia and others.
    print ('''The chance tht this ictal episode is pathologic not epileptic not psychogenic was defined as '''+i_starter[5]) 
    pnpne_chance=ds_starter[6]
    ev_sertainity_1=''
    ev_sertainity_2=''
    ev_sertainity_3=''
    ev_sertainity_4=''
    ev_sertainity_5=''       
    wx_text=nm+''', please define the chance that this ictal episode episode 
    is pathologic non-psychogenic non-epileptic.'''
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print(current_time)
    print("Software:\n" +wx_text+"\n")
    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
    if __name__ == '__main__':
        app = wx.App()
        frame = MyFrame_certainity()    
        app.MainLoop()
    app=[]; app = wx.App(None)
    del app
    wx_text=''
    if ev_sertainity_1==1:
        pnpne_chance=0
    if ev_sertainity_2==1:
        pnpne_chance=1
    if ev_sertainity_3==1:
        pnpne_chance=2
    if ev_sertainity_4==1:
        pnpne_chance=3
    if ev_sertainity_5==1:
            ev_save_1=''
            ev_save_2=''
            wx_text=nm+''', plesase select: whether or not you want to save your input to the ictal episode
            interpritation during this session'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_save_file()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            if ev_save_1==1:                                
                ed_starter=[nm, eventdate, eventstart, eeg, event_certainity, pnes_chance, ds_starter[6], ds_starter[7]]
                edit_starter=ed_starter+ds_starter[8:]
                edit_starter[18]=ictal_episode_code
                edit_starter[19]=ds_starter[19]
                ds_starter=copy.copy(edit_starter)
            #Saving file
                ictal_episode=Ictal(ictus,ds_starter,report)
                save_variable()                
                try:
                    os.remove('ictal_episode_' + ds_starter[18]+'_draft.dat')
                    print('The draft-file has been removed')
                except:
                    print("The drat-file doesn't exist")
                wx_text=nm+''', the new file was saved, thank you for finalizing ictal episode interpretation
                Please,  push the button "Exit" to close Digital Semiology.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                ev_exit=''
                if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_exit()    
                        app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                if ev_exit==1:
                    sys.exit()
            if ev_save_2==1:
                try:
                    os.remove('ictal_episode_' + ds_starter[18]+'_draft.dat')
                    print('The draft-file has been removed')
                except:
                    print("The drat-file doesn't exist")        
                print(nm+''', the new file was NOT saved''')                
                sys.exit()                 
    
    #-----------------------------------------------------------------------------------------------------------------------------------------------------------
    #Step 10 Definition the chance that this ictal episode started from sleep
    print ('''The chance tht this ictal episode started from sleep was defined as '''+i_starter[19]) 
    sleep_chance=ds_starter[19]
    ev_sertainity_1=''
    ev_sertainity_2=''
    ev_sertainity_3=''
    ev_sertainity_4=''
    ev_sertainity_5=''        
    wx_text=nm+''', please define the chance that this ictal episode episode started from sleep.'''
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print(current_time)
    print("Software:\n" +wx_text+"\n")
    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
    if __name__ == '__main__':
        app = wx.App()
        frame = MyFrame_certainity()    
        app.MainLoop()
    app=[]; app = wx.App(None)
    del app
    wx_text=''
    if ev_sertainity_1==1:
        sleep_chance=0
    if ev_sertainity_2==1:
        sleep_chance=1
    if ev_sertainity_3==1:
        sleep_chance=2
    if ev_sertainity_4==1:
        sleep_chance=3
    if ev_sertainity_5==1:
            ev_save_1=''
            ev_save_2=''
            wx_text=nm+''', plesase select: whether or not you want to save your input to the ictal episode
            interpritation during this session'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_save_file()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            if ev_save_1==1:                                
                ed_starter=[nm, eventdate, eventstart, eeg, event_certainity, pnes_chance, pnpne_chance, ds_starter[7]]
                edit_starter=ed_starter+ds_starter[8:]
                edit_starter[18]=ictal_episode_code
                edit_starter[19]=ds_starter[19]
                ds_starter=copy.copy(edit_starter)
            #Saving file
                ictal_episode=Ictal(ictus,ds_starter,report)
                save_variable()                
                try:
                    os.remove('ictal_episode_' + ds_starter[18]+'_draft.dat')
                    print('The draft-file has been removed')
                except:
                    print("The drat-file doesn't exist")
                wx_text=nm+''', the new file was saved, thank you for finalizing ictal episode interpretation
                Please,  push the button "Exit" to close Digital Semiology.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                ev_exit=''
                if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_exit()    
                        app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                if ev_exit==1:
                    sys.exit()
            if ev_save_2==1:
                try:
                    os.remove('ictal_episode_' + ds_starter[18]+'_draft.dat')
                    print('The draft-file has been removed')
                except:
                    print("The drat-file doesn't exist")        
                print(nm+''', the new file was NOT saved''')                
                sys.exit()                 
                     
    #-----------------------------------------------------------------------------------------------------------------------------------------------------------
    #Step 11 - Whether or not cognitive tests where performed during ictal episode
    print ('''The question: whether cognitive or motor testing was done during this ictal episode was aswered as '''+i_starter[19])
    wx_text=nm+''', if cognitive and/or motor testing was performed during this ictal episode,
                  push "yes", if not -"no"'''
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print(current_time)
    print("Software:\n" +wx_text+"\n")
    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
    y_n_cognitest=ds_starter[3]
    ev_yesno_1=''
    ev_yesno_2=''
    ev_yesno_3=''
    ev_yesno_4=''
    if __name__ == '__main__':
        app = wx.App()
        frame = MyFrame_cognitest()    
        app.MainLoop()
    app=[]; app = wx.App(None)
    del app
    wx_text=''
    if ev_yesno_1=='y':
        y_n_cognitest='y'
    if ev_yesno_2=='n':
        y_n_cognitest='n'
    if ev_yesno_3==1:
        y_n_cognitest=3
    if ev_yesno_4==1:
            ev_save_1=''
            ev_save_2=''
            wx_text=nm+''', plesase select: whether or not you want to save your input to the ictal episode
            interpritation during this session'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_save_file()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            if ev_save_1==1:                                
                ed_starter=[nm, eventdate, eventstart, eeg, event_certainity, pnes_chance, pnpne_chance, ds_starter[7]]
                edit_starter=ed_starter+ds_starter[8:]
                edit_starter[18]=ictal_episode_code
                edit_starter[19]=sleep_chance
                ds_starter=copy.copy(edit_starter)
            #Saving file
                ictal_episode=Ictal(ictus,ds_starter,report)
                save_variable()                
                try:
                    os.remove('ictal_episode_' + ds_starter[18]+'_draft.dat')
                    print('The draft-file has been removed')
                except:
                    print("The drat-file doesn't exist")
                wx_text=nm+''', the new file was saved, thank you for finalizing ictal episode interpretation
                Please,  push the button "Exit" to close Digital Semiology.'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"                
                ev_exit=''
                if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_exit()    
                        app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                if ev_exit==1:
                    sys.exit()
            if ev_save_2==1:
                try:
                    os.remove('ictal_episode_' + ds_starter[18]+'_draft.dat')
                    print('The draft-file has been removed')
                except:
                    print("The drat-file doesn't exist")        
                print(nm+''', the new file was NOT saved''')                
                sys.exit()                 
                
    ed_starter=[nm, eventdate, eventstart, eeg, event_certainity, pnes_chance, pnpne_chance, y_n_cognitest]
    edit_starter=ed_starter+ds_starter[8:]
    edit_starter[18]=ictal_episode_code
    edit_starter[19]=sleep_chance    
#--------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------
def Jacksonian(ictus):
    rt_jacksonian=[0]
    lt_jacksonian=[0]
    jacksonian_report=''
    jack_2=[]
    # INCLUSION
    for i in range (0,len(ictus)):
        if ictus[i][0]==0:
            jack_1=[0]*30
            for j in range(4,len(ictus[i])):
                if ictus [i][j][0]==3:
                    if ictus[i][j][9]!='':# Rt face
                        jack_1[0]=1
                    if ictus[i][j][1]!='':# Rt proximal arm
                        jack_1[1]=1
                    if ictus[i][j][2]!='':# Rt distal arm
                        jack_1[2]=1
                    if ictus[i][j][31]!='':# Rt thumb
                        jack_1[3]=1
                    if ictus[i][j][32]!='':# Rt index
                        jack_1[4]=1
                    if ictus[i][j][33]!='':# Rt 3-5 fingers
                        jack_1[5]=1
                    if ictus[i][j][34]!='':# Rt wrist
                        jack_1[6]=1
                    if ictus[i][j][35]!='':# Rt elbow
                        jack_1[7]=1
                    if ictus[i][j][5]!='':# Rt proximal leg
                        jack_1[8]=1
                    if ictus[i][j][6]!='':# Rt distal leg
                        jack_1[9]=1
                    if ictus[i][j][41]!='':# Rt toes
                        jack_1[10]=1
                    if ictus[i][j][42]!='':# Rt ankle
                        jack_1[11]=1
                    if ictus[i][j][43]!='':# Rt knee
                        jack_1[12]=1
                    if ictus[i][j][29]!='':# Rt hemibody
                        jack_1[13]=1
                    if ictus[i][j][10]!='':# Lt face
                        jack_1[14]=1
                    if ictus[i][j][3]!='':# Lt proximal arm
                        jack_1[15]=1
                    if ictus[i][j][4]!='':# Lt distal arm
                        jack_1[16]=1
                    if ictus[i][j][36]!='':# Lt thumb
                        jack_1[17]=1
                    if ictus[i][j][37]!='':# Lt index
                        jack_1[18]=1
                    if ictus[i][j][38]!='':# Lt fingers 3-5
                        jack_1[19]=1
                    if ictus[i][j][39]!='':# Lt wrist
                        jack_1[20]=1
                    if ictus[i][j][40]!='':# Lt elbow
                        jack_1[21]=1
                    if ictus[i][j][7]!='':# Lt proximal leg
                        jack_1[22]=1
                    if ictus[i][j][8]!='':# Lt distal leg
                        jack_1[23]=1
                    if ictus[i][j][23]!='':# Lt toes
                        jack_1[24]=1
                    if ictus[i][j][45]!='':# Lt ankle
                        jack_1[25]=1
                    if ictus[i][j][46]!='':# Lt knee
                        jack_1[26]=1
                    if ictus[i][j][30]!='':# Lt hemibody
                        jack_1[27]=1
            jack_1[28]=ictus[i][2] #Event start
            jack_1[29]=ictus[i][3] #Event end
            if  i==0: 
                jack_2=[jack_1]
            if i>0: 
                jack_2=jack_2+[jack_1]
            
    #---------------------------------------------------------------------------------------------------------------------------
    # EXCLUSION
    if len (jack_2)>1:
        jack_3=jack_2.copy()
    #fusion of events with the same time of start and of end
        for i in range(0,len(jack_3)-1):         
            if jack_2[i][28]==jack_2[i+1][28] and jack_2[i][3]==jack_2[i+1][3] and len(jack_2)>2:
                for j in range(0,len(jack_3[i])-2):
                    jack_3[i][j]=jack_3[i][j]+jack_3[i+1][j]
                    if jack_3[i][j]!=0:
                        jack_3[i][j]=1
                jack_3[i+1]=['']
        jack_4=[jack_3[0]]
        if jack_3!=[]:
            for i in range(1,len(jack_3)):
                if jack_3[i]!=['']:                    
                    jack_4+=[jack_3[i]]
            if jack_3[0]==['']:
                jack_4=jack_4[1:]
    #Exclusion events with bilateral (simultaneous) clonic movements
        jack_5=jack_4.copy()
        for i in range(0,len(jack_4)):
            if (jack_4[i][0]==1 or jack_4[i][1]==1 or jack_4[i][2]==1 or jack_4[i][3]==1 or jack_4[i][4]==1 or jack_4[i][5]==1 or\
                jack_4[i][6]==1 or jack_4[i][7]==1 or jack_4[i][8]==1 or jack_4[i][9]==1 or jack_4[i][10]==1 or jack_4[i][11]==1 or\
                jack_4[i][12]==1 or jack_4[i][13]==1) and\
                (jack_4[i][14]==1 or jack_4[i][15]==1 or jack_4[i][16]==1 or jack_4[i][17]==1 or jack_4[i][18]==1 or jack_4[i][19]==1 or\
                jack_4[i][20]==1 or jack_4[i][21]==1 or jack_4[i][22]==1 or jack_4[i][23]==1 or jack_4[i][24]==1 or jack_4[i][25]==1 or\
                jack_4[i][26]==1 or jack_4[i][27]==1):
                    jack_5[i]=['']
        jack_6=[jack_5[0]]
        if jack_5!=[]:
            for i in range(1,len(jack_5)):
                if jack_5[i]!=['']:                    
                    jack_6+=[jack_5[i]]
            if jack_5[0]==['']:
                jack_6=jack_6[1:]
                    
    #Separation betweeen Rt and Lt clonic behaviors    
        jack_10=jack_6.copy()
        jack_rt=[[]]
        jack_lt=[[]]    
        for i in range(0,len(jack_6)):
            if jack_10[i][13]==1 or jack_10[i][1]==1 or jack_10[i][2]==1 or jack_10[i][3]==1 or jack_10[i][4]==1 or jack_10[i][5]==1\
            or jack_10[i][6]==1 or jack_10[i][7]==1 or jack_10[i][0]==1 or jack_10[i][8]==1 or jack_10[i][9]==1 or\
            jack_10[i][10]==1 or jack_10[i][11]==1 or jack_10[i][12]==1:
                jack_rt+=[jack_10[i]]            
            else:
                jack_lt+=[jack_10[i]]
                
    #Definition  possible Rt. sequences
        
        if len(jack_rt)>2:
            jack_rt_1=jack_rt[1:]
        else:
            jack_rt_1=[]
    #Definition of separation points
        rt_sequences_3=[]
        rt_separation_points=['']
        for i in range(0,len(jack_rt_1)-1):            
            if (int(jack_rt_1[i+1][28][0:2])*60**2+int(jack_rt_1[i+1][28][2:4])*60+int(jack_rt_1[i+1][28][4:]))\
            -(int(jack_rt_1[i][29][0:2])*60**2+int(jack_rt_1[i][29][2:4])*60+int(jack_rt_1[i][29][4:]))>1:
                rt_separation_points+=[i]              
            if len(rt_separation_points)==1:#No separation points
                rt_sequences_2=[jack_rt_1.copy()]
                rt_sequences_3=rt_sequences_2.copy()
                
            elif len(rt_separation_points)>1:#Presence of separation poits
                rt_sep_points=rt_separation_points[1:]
                rt_sequences_1=[jack_rt_1[:rt_sep_points[0]+1]]#Definition of the first sequence
                #before the first separation point
                for i in range(1,len(rt_sep_points)):
                    rt_sequences_1+=[jack_rt_1[rt_sep_points[i]:rt_sep_points[i]+1]]
                rt_last_sep_point=rt_sep_points[len(rt_sep_points)-1]
                rt_sequences_1+=[jack_rt_1[rt_last_sep_point+1:]]#Seguence after the last separation point
                #Elimination of non-sequestional events
                rt_sequences_2=rt_sequences_1.copy()
                for i in range(0,len(rt_sequences_2)):
                    if len(rt_sequences_2[i])<2:
                        rt_sequences_2[i]=['']
                                        
                rt_sequences_3=[rt_sequences_2[0]]
                for i in range(1,len(rt_sequences_2)):        
                    if rt_sequences_2[i]!=['']:                    
                        rt_sequences_3+=[rt_sequences_2[i]]
                if rt_sequences_2[0]==['']:
                    rt_sequences_3=rt_sequences_3[1:]
    
    #Definition of possible Lt. sequences
        if len(jack_lt)>2:
            jack_lt_1=jack_lt[1:]
        else:
            jack_lt_1=[]
            #Definition of separation points
        lt_sequences_3=[]        
        lt_separation_points=['']
        for i in range(0,len(jack_lt_1)-1):            
            if (int(jack_lt_1[i+1][28][0:2])*60**2+int(jack_lt_1[i+1][28][2:4])*60+int(jack_lt_1[i+1][28][4:]))\
            -(int(jack_lt_1[i][29][0:2])*60**2+int(jack_lt_1[i][29][2:4])*60+int(jack_lt_1[i][29][4:]))>1:
                lt_separation_points+=[i]                
            if len(lt_separation_points)==1:#No separation points
                lt_sequences_2=[jack_lt_1.copy()]
                lt_sequences_3=lt_sequences_2.copy()
    
            elif len(lt_separation_points)>1:#Presence of separation poits
                lt_sep_points=lt_separation_points[1:]
                lt_sequences_1=[jack_lt_1[:lt_sep_points[0]+1]]#Definition of the first sequence
                #before the first separation point
                for i in range(1,len(lt_sep_points)):
                    lt_sequences_1+=[jack_lt_1[lt_sep_points[i]:lt_sep_points[i]+1]]
                lt_last_sep_point=lt_sep_points[len(lt_sep_points)-1]
                lt_sequences_1+=[jack_lt_1[lt_last_sep_point+1:]]#Seguence after the last separation point
                #Elimination of non-sequentional events
                lt_sequences_2=lt_sequences_1.copy()
                for i in range(0,len(lt_sequences_2)):
                    if len(lt_sequences_2[i])<2:
                        lt_sequences_2[i]=['']
                                        
                lt_sequences_3=[lt_sequences_2[0]]
                for i in range(1,len(lt_sequences_2)):        
                    if lt_sequences_2[i]!=['']:                    
                        lt_sequences_3+=[lt_sequences_2[i]]
                if lt_sequences_2[0]==['']:
                    lt_sequences_3=lt_sequences_3[1:]
                                     
        #Elimination sequences started with clonic movement of both face and leg
        rt_sequences_4=rt_sequences_3.copy()
        lt_sequences_4=lt_sequences_3.copy()
        if rt_sequences_4!=[]:
            for i in range(0,len(rt_sequences_3)):
                if (rt_sequences_4[i][0][0]==1 and (rt_sequences_4[i][0][8]==1 or rt_sequences_4[i][0][9]==1 or\
                   rt_sequences_4[i][0][10]==1 or rt_sequences_4[i][0][11]==1 or rt_sequences_4[i][0][12]==1))\
                    or rt_sequences_4[i][0][13]==1:
                        rt_sequences_4[i]=['']            
                                   
        if rt_sequences_4!=[]:
            rt_sequences_5=[rt_sequences_4[0]]
            for i in range(1,len(rt_sequences_4)):        
                if rt_sequences_4[i]!=['']: 
                    rt_sequences_5+=[rt_sequences_4[i]]
            if rt_sequences_4[0]==['']:
                rt_sequences_5=rt_sequences_5[1:]
        else:
            rt_sequences_5=[]
                
        if lt_sequences_4!=[]:
            for i in range(0,len(lt_sequences_3)):
                if (lt_sequences_4[i][0][14]==1 and (lt_sequences_4[i][0][22]==1 or lt_sequences_4[i][0][23]==1 or\
                    lt_sequences_4[i][0][24]==1 or lt_sequences_4[i][0][25]==1 or lt_sequences_4[i][0][26]==1))\
                    or lt_sequences_4[i][0][27]==1:
                        lt_sequences_4[i]=['']
                        
        if lt_sequences_4!=[]:
            lt_sequences_5=[lt_sequences_4[0]]        
            for i in range(1,len(lt_sequences_4)):        
                if lt_sequences_4[i]!=['']:                
                    lt_sequences_5+=[lt_sequences_4[i]]
            if lt_sequences_4[0]==['']:
                lt_sequences_5=lt_sequences_5[1:]
        else:
            lt_sequences_5=[]
                       
        #Trunkation of sequences after clonic movement of both face and leg as not the first event in the sequence
        rt_sequences_6=rt_sequences_5.copy()
        lt_sequences_6=lt_sequences_5.copy()
        
        if rt_sequences_5!=[]:
            for i in range(1,len(rt_sequences_5)):
                for j in range(0,len(rt_sequences_5[i])-1):
                    if (rt_sequences_5[i][j][0]==1 and (rt_sequences_5[i][j][8]==1 or rt_sequences_5[i][j][9]==1 or\
                        rt_sequences_5[i][j][10]==1 or rt_sequences_5[i][j][11]==1 or rt_sequences_5[i][j][12]==1))\
                        or rt_sequences_5[i][j][13]==1:
                            rt_sequences_6[i]=rt_sequences_5[i][:j+1]
                        
        if lt_sequences_5!=[]:
            for i in range(1,len(lt_sequences_5)):
                for j in range(0,len(lt_sequences_5[i])-1):
                    if (lt_sequences_5[i][j][14]==1 and (lt_sequences_5[i][j][22]==1 or lt_sequences_5[i][j][23]==1 or\
                    lt_sequences_5[i][j][24]==1 or lt_sequences_5[i][j][25]==1 or lt_sequences_5[i][j][26]==1))\
                    or lt_sequences_5[i][j][27]==1:
                        lt_sequences_6[i]=lt_sequences_5[i][:j+1]
                    
        #Elimination of sequences with only one event
        rt_sequences_7=rt_sequences_6.copy()
        lt_sequences_7=lt_sequences_6.copy()
        
        if rt_sequences_6!=[]:
            for i in range(0,len(rt_sequences_6)):
                if len(rt_sequences_6[i])==1:
                    rt_sequences_7[i]=['']
                
        if rt_sequences_7!=[]:
            rt_sequences_8=[rt_sequences_7[0]]
            for i in range(1,len(rt_sequences_7)):        
                if rt_sequences_7[i]!=['']:                
                    rt_sequences_8+=[rt_sequences_7[i]]
            if rt_sequences_7[0]==['']:
                rt_sequences_8=rt_sequences_7[1:]
        else:
            rt_sequences_8=[]
                                   
        if lt_sequences_6!=[]:
            for i in range(0,len(lt_sequences_6)):
                if len(lt_sequences_6[i])==1:
                    lt_sequences_7[i]=['']
                
        if lt_sequences_7!=[]:
            lt_sequences_8=[lt_sequences_7[0]]
            for i in range(1,len(lt_sequences_7)):        
                if lt_sequences_7[i]!=['']:                
                    lt_sequences_8+=[lt_sequences_7[i]]
            if lt_sequences_7[0]==['']:
                lt_sequences_8=lt_sequences_7[1:]
        else:
            lt_sequences_8=[]
                    
        #Spatial propagation marking
        if rt_sequences_8!=[]:
            rt_jacksonian_sequences=rt_sequences_8.copy()
            for i in range (0, len(rt_sequences_8)):
                for j in range (1, len(rt_sequences_8[i])):
                    for k in range(0,28):
                        if rt_sequences_8[i][j][k]!=0 and rt_sequences_8[i][j-1][k]==0:
                            rt_jacksonian_sequences[i][j][k]=2
        else:
            rt_jacksonian_sequences=[]
                            
        if rt_jacksonian_sequences!=[]:
            for i in range (0,len(rt_jacksonian_sequences)):
                for j in range (1,len(rt_jacksonian_sequences[i])):            
                    if 2 in rt_jacksonian_sequences[i][j]:
                        rt_jacksonian[0]=1
                        rt_jacksonian+=[rt_sequences_8[i][j][28]]
                            
                        
        if lt_sequences_8!=[]:
            lt_jacksonian_sequences=lt_sequences_8.copy()
            for i in range (0, len(lt_sequences_8)):
                for j in range (1, len(lt_sequences_8[i])):
                    for k in range(0,28):
                        if lt_sequences_8[i][j][k]!=0 and lt_sequences_8[i][j-1][k]==0:
                            lt_jacksonian_sequences[i][j][k]=2
        else:
            lt_jacksonian_sequences=[]
        
        if lt_jacksonian_sequences!=[]:            
            for i in range (0,len(lt_jacksonian_sequences)):
                for j in range (1,len(lt_jacksonian_sequences[i])):            
                    if 2 in lt_jacksonian_sequences[i][j]:
                        lt_jacksonian[0]=1
                        lt_jacksonian+=[lt_sequences_8[i][j][28]]
                            
    if rt_jacksonian[0]!=0 or lt_jacksonian[0]!=0:
        jacksonian_report='''\nAccordind to the reported semiology, this ictal episode includes 
        spatiotemporal pattern of unilateral clonic movement propagation (Jaksonian march).'''
        if rt_jacksonian[0]!=0:
            if len(rt_jacksonian)==2:
                jacksonian_report+='''\nRight side: 1 propagation step: '''+rt_jacksonian[1][:2]+''':'''+rt_jacksonian[1][2:4]+''':'''+rt_jacksonian[1][4:]+'''.'''
            if len(rt_jacksonian)>2:
                jacksonian_report+='''\nRight side: '''+str(len(rt_jacksonian)-1)+''' propagation steps: '''
                for i in range (1,len(rt_jacksonian)):           
                    jacksonian_report+=rt_jacksonian[i][:2]+''':'''+rt_jacksonian[i][2:4]+''':'''+rt_jacksonian[i][4:]+'''.  '''
                
        if lt_jacksonian[0]!=0:    
            if len(lt_jacksonian)==2:
                jacksonian_report+='''\nLeft side: 1 propagation step: '''+lt_jacksonian[1][:2]+''':'''+lt_jacksonian[1][2:4]+''':'''+lt_jacksonian[1][4:]+'''.'''                                                                            
            if len(lt_jacksonian)>2:
                jacksonian_report+='''\nLeftt side: '''+str(len(lt_jacksonian)-1)+''' propagation steps: '''
                for i in range (1,len(lt_jacksonian)):
                    jacksonian_report+=lt_jacksonian[i][:2]+''':'''+lt_jacksonian[i][2:4]+''':'''+lt_jacksonian[i][4:]+'''.  '''
            jacksonian_report+='''\n-----------------------------------------------------------------------------------------------------------'''
    else:
        jacksonian_report='''\nDigital Semiology decided to avoid any statement regarding presence of Jaksonian march during this ictal episode'''
        jacksonian_report+='''\n-----------------------------------------------------------------------------------------------------------'''            
    return jacksonian_report
#-------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------
def PNES_score(ictus, ds_starter):
    global pnescore, ict, ictus_end
    pnescore=[0]*8
    
    if ds_starter[25]!='':
        video_start_in_seconds=int(ds_starter[25][0:2])*60**2+int(ds_starter[25][2:4])\
        *60+int(ds_starter[25][4:])
        
        epistart_corrected=int(ds_starter[2][0:2])*60*60+int(ds_starter[2][2:4])*60+int(ds_starter[2][4:])\
        + video_start_in_seconds
        
        shniot = epistart_corrected % 60
        dakot = (epistart_corrected // 60) % 60
        shaot = (epistart_corrected // 60) // 60
        str_shniot=str(shniot)
        str_dakot=str(dakot)
        str_shaot=str(shaot)
        if len (str_shniot) == 2:
            seconds = str_shniot
        else:
            seconds = '0' + str_shniot
        if len (str_dakot) == 2:
            minutes = str_dakot
        else:
            minutes = '0' + str_dakot
        if len (str_shaot) == 2:
            hours = str_shaot
        else:
            hours = '0' + str_shaot
        new_epistart = hours + minutes + seconds
                    
    if ict!=[]:
        epistart=int(ds_starter[2][0:2])*60*60+int(ds_starter[2][2:4])*60+int(ds_starter[2][4:])
        ictus_end=sorted(ict, key=lambda c:int(c[3][0:2])*60**2+int(c[3][2:4])*60+int(c[3][4:]))
        epiend=int(ictus_end[len(ictus_end)-1][3][0:2])*60*60+int(ictus_end[len(ictus_end)-1][3][2:4])*60+int(ictus_end[len(ictus_end)-1][3][4:])
        
        for i in range (0,len(ictus)):
            for j in range(4,len(ictus[i])):
                if ictus[i][0]==3 and (ictus[i][j][0]==9 or ictus[i][j][0]==4 or ictus[i][j][0]==7): # eyes closed
                    pnescore[0]=1            
                if ictus[i][0]==3 and ictus[i][j][22]==1: #patient resists to eyes opening by observer
                    pnescore[1]=1
    #            if ictus[i][0]==9 and ictus[i][j][0]==6: #"no-no sign"
    #                pnescore[2]=1
    #            if ictus[i][0]==9 and ictus[i][j][0]==27 and ictus[i][j][21]==1: #Head shaking
    #                pnescore[3]=1
    #            if ictus[i][0]==9 and ictus[i][j][0]==28: #unspecified pelvic thrust
    #                pnescore[4]=1
                if ictus[i][0]==9 and ictus[i][j][26]==28: #The fall is under complite control of patient
                    pnescore[5]=1
                if epiend-epistart>300:
                    pnescore[6]=1
                    
        cry_loughter=0
        voc_len=0
        for i in range (0,len(ictus)):
                for j in range(4,len(ictus[i])):
                    if ictus[i][0]==5 and (ictus[i][j][0]==11 or ictus[i][j][0]==12):
                        cry_loughter==1
                                    
        if cry_loughter==0:
                for i in range (0,len(ictus)):
                    for j in range(4,len(ictus[i])):
                        if ictus[i][0]==5 and (ictus[i][j][0]==0 or ictus[i][j][0]==1):                    
                             voc_start_in_seconds=int(ictus[i][2][0:2])*60**2+int(ictus[i][2][2:4])\
                             *60+int(ictus[i][2][4:])
                             voc_end_in_seconds=int(ictus[i][3][0:2])*60**2+int(ictus[i][3][2:4])\
                             *60+int(ictus[i][3][4:]) 
                             voc_len = voc_end_in_seconds - voc_start_in_seconds
                             
        if voc_len >= 10:
          pnescore[7]=1  
    
        PNES_score_report=''
        if pnescore!=[0]*8:
           PNES_score_report='''\n\nAccording to the reported semiology, this ictal episode possibly includes the 
    features that relatively often can be seen during PNES:'''
           if pnescore[0]==1:
               PNES_score_report+='''\n # At least part of time the eyes of patient were closed during ictal episode'''       
           if pnescore[1]==1:
               PNES_score_report+=''',\n # and the patient resisted the attempt to open eyes by observer'''
    #       if pnescore[2]==1:
    #           PNES_score_report+='''\n # The patient moves head side-to-side ("no-no" sign) during ictal episode'''
    #       if pnescore[3]==1:
    #           PNES_score_report+='''\n # Head shaking was observed during ictal episode'''
    #       if pnescore[4]==1:
    #           PNES_score_report+='''\n # Unspecified pelvic thrust was observed during this ictal eisode'''
           if pnescore[5]==1:
               PNES_score_report+='''\n # The patient completely controlled her/his fall during ictal episode'''
           if pnescore[6]==1:
               PNES_score_report+='''\n # The duration of ictal episode was longer than 5 minutes'''
           if pnescore[7]==1:
              PNES_score_report+='''\n # The duration of ictal vocalization was longer than 9 seconds
              (excluding ictal cry and ictal loughter)'''
              
           if (ictus[i][0]==9 and (ictus[i][j][11]==1 or ictus[i][j][12]==1 or ictus[i][j][13]==1  or ictus[i][j][14]==1 or ictus[i][j][15]==1\
                or ictus[i][j][16]==1 or ictus[i][j][17]==1)) or\
                int(ds_starter[2][0:2])>=22 or int(ds_starter[2][0:2])<=6 or\
                (ictus[i][0]==2 and ictus[i][j][0]==16):
                    
                PNES_score_report+='''\nOn the other hand, there are some features, which increase the probability that this ictal
                episode is true epileptic seizure:'''
                
           if ictus[i][0]==9 and (ictus[i][j][11]==1 or ictus[i][j][12]==1 or ictus[i][j][13]==1  or ictus[i][j][14]==1 or ictus[i][j][15]==1\
                or ictus[i][j][16]==1 or ictus[i][j][17]==1):           
            PNES_score_report+='''\n # Ictal self-injury'''
            
           if ds_starter[25]!='':
                if int(new_epistart)>=22 or int(new_epistart)<=6:            
                    PNES_score_report+='''\n # This ictal episode occurred during night time'''
           
           else: 
               if int(ds_starter[2][0:2])>=22 or int(ds_starter[2][0:2])<=6:            
                  PNES_score_report+='''\n # This ictal episode occurred during night time'''
             
           if ictus[i][0]==2 and ictus[i][j][0]==16:
               PNES_score_report+='''\n # Urinary incontinence'''                         
               
           PNES_score_report+='''\n-----------------------------------------------------------------------------------------------------------'''
        else:
            PNES_score_report='''\nDigital Semiology decided to avoid any statement regarding PNES features in this ictal episode'''
            PNES_score_report+='''\n-----------------------------------------------------------------------------------------------------------'''
    return PNES_score_report            
#-------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------
def SUDEP_score(ictus, ds_starter):
    global gtcs_breath
    global sudepscore    
    sudepscore=[0]*6
    for i in range (0,len(ictus)):
        if ictus[i][0]==7 and ds_starter[19]==2: #GTCS seisure certainly starts from sleep
            sudepscore[0]=1
        if ictus[i][0]==7 and ds_starter[19]==1: #GTCS seisure possibly starts from sleep
            sudepscore[0]=2
    for i in range (0,len(ictus)):
        for j in range(4,len(ictus[i])):
            if ictus[i][0]==7 and ictus[i][j][0]==2: #GTCS ended in the position on abdomen
                sudepscore[1]=1
            if ictus[i][0]==7 and ictus[i][j][1]==2: #After GTCS the patient turned to abdomen
                sudepscore[2]=1
    #Apnea or cyanosis after GTCS           
    gtcs_breath=[0,0,0,0]
    while gtcs_breath[0]<len(ictus) and gtcs_breath[1]==0:
        if ictus[gtcs_breath[0]][0]==7:
            gtcs_breath[1]=int(ictus[gtcs_breath[0]][3][0:2])*60*60+int(ictus[gtcs_breath[0]][3][2:4])*60+int(ictus[gtcs_breath[0]][3][4:])
        gtcs_breath[0]+=1        
    #Apnea    
    for i in range (0,len(ictus)):
        for j in range(4,len(ictus[i])):
            if ictus[i][0]==2 and ictus[i][j][0]==2:
                gtcs_breath[2]=int(ictus[i][3][0:2])*60*60+int(ictus[i][3][2:4])*60+int(ictus[i][3][4:])
    if gtcs_breath[2]>gtcs_breath[1]:
        sudepscore[3]=1
    #Cyanosis        
    for i in range (0,len(ictus)):
        for j in range(4,len(ictus[i])):
            if ictus[i][0]==2 and ictus[i][j][0]==8:
                gtcs_breath[3]=int(ictus[i][3][0:2])*60*60+int(ictus[i][3][2:4])*60+int(ictus[i][3][4:])
    if gtcs_breath[3]>gtcs_breath[1]:
        sudepscore[4]=1
    #GTCS "only"
    if sudepscore[0]==0 and sudepscore[1]==0 and sudepscore[2]==0 and sudepscore[3]==0 and sudepscore[4]==0:
        for i in range (0,len(ictus)):
            if ictus[i][0]==7:
                sudepscore[5]=1
                                
    SUDEP_score_report=''
    if sudepscore!=[0]*6:
       SUDEP_score_report='''\n\nAccording to the reported semiology, this ictal episode possibly includes the 
features that indicate increased risk for SUDEP:'''
       if sudepscore[0]==1:
            SUDEP_score_report+='''\n # The generalized tonic clonic seizure started from sleep.'''
       if sudepscore[0]==2:
            SUDEP_score_report+='''\n # The generalized tonic clonic seizure possibly started from sleep.'''
       if sudepscore[1]==1:
           SUDEP_score_report+='''\n # The generalized tonic clonic seizure ended in the position on abdomen.'''
       if sudepscore[2]==1:
           SUDEP_score_report+='''\n # After generalized tonic clonic seizure the patient turned to abdomen.''' 
       if sudepscore[3]==1:
           SUDEP_score_report+='''\n # It was apnea after the end of generalized tonic clonic seizure.'''
       if sudepscore[4]==1:
           SUDEP_score_report+='''\n # It was cyanosis after the end of generalized tonic clonic seizure.'''
       if sudepscore[5]==1:
           SUDEP_score_report+='''\n # This ictal episodes includes generalized tonic clonic seizure.'''
       SUDEP_score_report+='''\n-----------------------------------------------------------------------------------------------------------'''
    else:
        SUDEP_score_report='''\nDigital Semiology decided to avoid any statement regarding SUDEP risk'''
        SUDEP_score_report+='''\n-----------------------------------------------------------------------------------------------------------'''
    return SUDEP_score_report

#-------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------
def Focality(ictus):
    focality_1=[[0,0,0]]*18
    #Inclusion
    for i in range (0,len(ictus)):
        for j in range(4,len(ictus[i])):
            if  focality_1[0][0]==0 and ictus[i][0]==8: #Aura reporting event
                focality_1[0]=[1,ictus[i][2],ictus[i][3]]
        
            if  focality_1[1][0]==0 and ictus[i][0]==4: #Hyperkinetic event
                focality_1[1]=[1,ictus[i][2],ictus[i][3]]
                
            if focality_1[2][0]==0 and ictus[i][0]==0 and ictus[i][j][0]==2\
            and ictus[i][j][1]==1: #Simple motor event: Rt fencer
                focality_1[2]=[1,ictus[i][2],ictus[i][3]]
                
            if focality_1[3][0]==0 and ictus[i][0]==0 and ictus[i][j][0]==2\
            and ictus[i][j][1]==2: #Simple motor event: Lt fencer
                focality_1[3]=[1,ictus[i][2],ictus[i][3]]
                
            if focality_1[4][0]==0 and ictus[i][0]==0 and ictus[i][j][0]==13\
            and ictus[i][j][1]==1: #Simple motor event: Rt figure of 4
                focality_1[4]=[1,ictus[i][2],ictus[i][3]]
                
            if focality_1[5][0]==0 and ictus[i][0]==0 and ictus[i][j][0]==13\
            and ictus[i][j][1]==2: #Simple motor event: Lt figure of 4
                focality_1[5]=[1,ictus[i][2],ictus[i][3]]
                
            if focality_1[6][0]==0 and ictus[i][0]==0 and ictus[i][j][0]==0\
            and (ictus[i][j][1]!='' or ictus[i][j][2]!='' or ictus[i][j][9]!=''\
                 or ictus[i][j][5]!='' or ictus[i][j][6]!='' or ictus[i][j][29]!=''): #Simple motor event: Rt tonic
                focality_1[6]=[1,ictus[i][2],ictus[i][3]]
                
            if focality_1[7][0]==0 and ictus[i][0]==0 and ictus[i][j][0]==1\
            and (ictus[i][j][1]!='' or ictus[i][j][2]!='' or ictus[i][j][9]!=''\
                 or ictus[i][j][5]!='' or ictus[i][j][6]!='' or ictus[i][j][29]!=''): #Simple motor event: Rt dystonic
                focality_1[7]=[1,ictus[i][2],ictus[i][3]]
                
            if focality_1[8][0]==0 and ictus[i][0]==0 and ictus[i][j][0]==3\
            and (ictus[i][j][1]!='' or ictus[i][j][2]!='' or ictus[i][j][9]!=''\
                 or ictus[i][j][5]!='' or ictus[i][j][6]!='' or ictus[i][j][29]!='' ): #Simple motor event: Rt clonic
                focality_1[8]=[1,ictus[i][2],ictus[i][3]]
                
            if focality_1[9][0]==0 and ictus[i][0]==0 and ictus[i][j][0]==10\
            and (ictus[i][j][1]!='' or ictus[i][j][2]!='' or ictus[i][j][9]!=''\
                 or ictus[i][j][5]!='' or ictus[i][j][6]!='' or ictus[i][j][29]!='' ): #Simple motor event: Rt paralysis
                focality_1[9]=[1,ictus[i][2],ictus[i][3]]
                
            if focality_1[10][0]==0 and ictus[i][0]==0 and ictus[i][j][0]==0\
            and (ictus[i][j][3]!='' or ictus[i][j][4]!='' or ictus[i][j][10]!=''\
                 or ictus[i][j][7]!='' or ictus[i][j][8]!='' or ictus[i][j][30]!='' ): #Simple motor event: Lt tonic
                focality_1[10]=[1,ictus[i][2],ictus[i][3]]
                
            if focality_1[11][0]==0 and ictus[i][0]==0 and ictus[i][j][0]==1\
            and (ictus[i][j][3]!='' or ictus[i][j][4]!='' or ictus[i][j][10]!=''\
                 or ictus[i][j][7]!='' or ictus[i][j][8]!='' or ictus[i][j][30]!='' ): #Simple motor event: Lt dystonic
                focality_1[11]=[1,ictus[i][2],ictus[i][3]]
                
            if focality_1[12][0]==0 and ictus[i][0]==0 and ictus[i][j][0]==3\
            and (ictus[i][j][3]!='' or ictus[i][j][4]!='' or ictus[i][j][10]!=''\
                 or ictus[i][j][7]!='' or ictus[i][j][8]!='' or ictus[i][j][30]!='' ): #Simple motor event: Lt clonic
                focality_1[12]=[1,ictus[i][2],ictus[i][3]]
                
            if focality_1[13][0]==0 and ictus[i][0]==0 and ictus[i][j][0]==10\
            and (ictus[i][j][3]!='' or ictus[i][j][4]!='' or ictus[i][j][10]!=''\
                 or ictus[i][j][7]!='' or ictus[i][j][8]!='' or ictus[i][j][30]!='' ): #Simple motor event: Lt paralysis
                focality_1[13]=[1,ictus[i][2],ictus[i][3]]
                
            if focality_1[14][0]==0 and focality_1[15][0]==0 and ictus[i][0]==0 and (ictus[i][j][0]==0\
            or ictus[i][j][0]==1) and ictus[i][j][11]==2: #Simple motor event: Rt forced neck turn
                focality_1[14]=[1,ictus[i][2],ictus[i][3]]
                
            if focality_1[15][0]==0 and focality_1[14][0]==0 and ictus[i][0]==0 and (ictus[i][j][0]==0\
            or ictus[i][j][0]==1) and ictus[i][j][12]==2: #Simple motor event: Lt forced neck turn
                focality_1[15]=[1,ictus[i][2],ictus[i][3]]
                
            if focality_1[16][0]==0 and focality_1[17][0]==0 and ictus[i][0]==3 and ictus[i][j][20]==3: #Eye movement event: Rt forced gaze deviation
                focality_1[16]=[1,ictus[i][2],ictus[i][3]]
                
            if focality_1[17][0]==0 and focality_1[16][0]==0 and ictus[i][0]==3 and ictus[i][j][20]==4: #Eye movement event: Lt forced gaze deviation
                focality_1[17]=[1,ictus[i][2],ictus[i][3]]
                
    #Exlusion
    focality_2=focality_1
    #If aura started less than 5 sec before other event exept of triger or other aura,
    #then it will be not a criterion for focality.
    for i in range (0,len(ictus)):
        if focality_1[0][0]==1:
            if ictus[i][0]!=8 and ictus[i][0]!=10:
                focality_2[0][0]=1
            elif int(ictus[i][2][0:2])*60**2+int(ictus[i][2][2:4])*60+int(ictus[i][2][4:])\
                -(int(focality_1[0][2][0:2])*60**2+int(focality_1[0][2][2:4])*60+int(focality_1[0][2][4:]))<5:
                focality_2[0]=[0,0,0]
                
    #If hyperkinetic event started less than 5 sec before GTPS,
    #then it will be not a criterion for focality.
    for i in range (0,len(ictus)):
        if focality_1[1][0]==1:
            if ictus[i][0]==7 and\
            int(ictus[i][2][0:2])*60**2+int(ictus[i][2][2:4])*60+int(ictus[i][2][4:])\
            -(int(focality_1[1][2][0:2])*60**2+int(focality_1[1][2][2:4])*60+int(focality_1[1][2][4:]))<5:
                focality_2[1]=[0,0,0]
                
    for i in range (0,len(ictus)):
        for j in range(4,len(ictus[i])):
            if focality_1[6][0]==1:#Rt tonic excusion
                if ictus[i][0]==0:
                    if (ictus[i][j][0]==0 or ictus[i][j][0]==1 or ictus[i][j][0]==3 or ictus[i][j][0]==10)and\
                    (ictus[i][j][3]!='' or ictus[i][j][4]!='' or ictus[i][j][10]!=''\
                     or ictus[i][j][7]!='' or ictus[i][j][8]!='' or ictus[i][j][30]!='') and\
                int(ictus[i][2][0:2])*60**2+int(ictus[i][2][2:4])*60+int(ictus[i][2][4:])\
                -(int(focality_1[6][2][0:2])*60**2+int(focality_1[6][2][2:4])*60+int(focality_1[6][2][4:]))<5:
                        focality_2[6]=[0,0,0]
                    
    for i in range (0,len(ictus)):
        for j in range(4,len(ictus[i])):
            if focality_1[7][0]==1: #Rt dystonic excusion
                if ictus[i][0]==0:
                    if (ictus[i][j][0]==0 or ictus[i][j][0]==1 or ictus[i][j][0]==3 or ictus[i][j][0]==10)and\
                    (ictus[i][j][3]!='' or ictus[i][j][4]!='' or ictus[i][j][10]!=''\
                     or ictus[i][j][7]!='' or ictus[i][j][8]!='' or ictus[i][j][30]!='') and\
                int(ictus[i][2][0:2])*60**2+int(ictus[i][2][2:4])*60+int(ictus[i][2][4:])\
                -(int(focality_1[7][2][0:2])*60**2+int(focality_1[7][2][2:4])*60+int(focality_1[7][2][4:]))<5:
                        focality_2[7]=[0,0,0]
                    
    for i in range (0,len(ictus)):
        for j in range(4,len(ictus[i])):
            if focality_1[8][0]==1: #Rt clonic excusion
                if ictus[i][0]==0:
                    if (ictus[i][j][0]==0 or ictus[i][j][0]==1 or ictus[i][j][0]==3 or ictus[i][j][0]==10)and\
                    (ictus[i][j][3]!='' or ictus[i][j][4]!='' or ictus[i][j][10]!=''\
                     or ictus[i][j][7]!='' or ictus[i][j][8]!='' or ictus[i][j][30]!='') and\
                int(ictus[i][2][0:2])*60**2+int(ictus[i][2][2:4])*60+int(ictus[i][2][4:])\
                -(int(focality_1[8][2][0:2])*60**2+int(focality_1[8][2][2:4])*60+int(focality_1[8][2][4:]))<5:
                        focality_2[8]=[0,0,0]
                        
    for i in range (0,len(ictus)):
        for j in range(4,len(ictus[i])):
            if focality_1[9][0]==1:#Rt paralysis excusion
                if ictus[i][0]==0:
                    if ictus[i][j][0]==10 and\
                    (ictus[i][j][3]!='' or ictus[i][j][4]!='' or ictus[i][j][10]!=''\
                     or ictus[i][j][7]!='' or ictus[i][j][8]!='' or ictus[i][j][30]!='') and\
                int(ictus[i][2][0:2])*60**2+int(ictus[i][2][2:4])*60+int(ictus[i][2][4:])\
                -(int(focality_1[6][2][0:2])*60**2+int(focality_1[6][2][2:4])*60+int(focality_1[6][2][4:]))<5:
                        focality_2[6]=[0,0,0]
                    
    for i in range (0,len(ictus)):
        for j in range(4,len(ictus[i])):
            if focality_1[10][0]==1: #Lt tonic excusion
                if ictus[i][0]==0:
                    if (ictus[i][j][0]==0 or ictus[i][j][0]==1 or ictus[i][j][0]==3 or ictus[i][j][0]==10)and\
                    (ictus[i][j][1]!='' or ictus[i][j][2]!='' or ictus[i][j][9]!=''\
                     or ictus[i][j][5]!='' or ictus[i][j][6]!='' or ictus[i][j][29]!='') and\
                int(ictus[i][2][0:2])*60**2+int(ictus[i][2][2:4])*60+int(ictus[i][2][4:])\
                -(int(focality_1[10][2][0:2])*60**2+int(focality_1[10][2][2:4])*60+int(focality_1[10][2][4:]))<5:
                        focality_2[10]=[0,0,0]
                    
    for i in range (0,len(ictus)):
        for j in range(4,len(ictus[i])):
            if focality_1[11][0]==1: #Lt dystonic excusion
                if ictus[i][0]==0:
                    if (ictus[i][j][0]==0 or ictus[i][j][0]==1 or ictus[i][j][0]==3 or ictus[i][j][0]==10)and\
                    (ictus[i][j][1]!='' or ictus[i][j][2]!='' or ictus[i][j][9]!=''\
                     or ictus[i][j][5]!='' or ictus[i][j][6]!='' or ictus[i][j][29]!='') and\
                int(ictus[i][2][0:2])*60**2+int(ictus[i][2][2:4])*60+int(ictus[i][2][4:])\
                -(int(focality_1[11][2][0:2])*60**2+int(focality_1[11][2][2:4])*60+int(focality_1[11][2][4:]))<5:
                        focality_2[11]=[0,0,0]
                
    for i in range (0,len(ictus)):
        for j in range(4,len(ictus[i])):
            if focality_1[12][0]==1: #Lt clonic excusion
                if ictus[i][0]==0:
                    if (ictus[i][j][0]==0 or ictus[i][j][0]==1 or ictus[i][j][0]==3 or ictus[i][j][0]==10)and\
                    (ictus[i][j][1]!='' or ictus[i][j][2]!='' or ictus[i][j][9]!=''\
                     or ictus[i][j][5]!='' or ictus[i][j][6]!='' or ictus[i][j][29]!='') and\
                int(ictus[i][2][0:2])*60**2+int(ictus[i][2][2:4])*60+int(ictus[i][2][4:])\
                -(int(focality_1[12][2][0:2])*60**2+int(focality_1[12][2][2:4])*60+int(focality_1[12][2][4:]))<5:
                        focality_2[12]=[0,0,0]
                        
    for i in range (0,len(ictus)):
        for j in range(4,len(ictus[i])):
            if focality_1[13][0]==1: #Lt paralysis excusion
                if ictus[i][0]==0:
                    if ictus[i][j][0]==10 and\
                    (ictus[i][j][1]!='' or ictus[i][j][2]!='' or ictus[i][j][9]!=''\
                     or ictus[i][j][5]!='' or ictus[i][j][6]!='' or ictus[i][j][29]!='') and\
                int(ictus[i][2][0:2])*60**2+int(ictus[i][2][2:4])*60+int(ictus[i][2][4:])\
                -(int(focality_1[12][2][0:2])*60**2+int(focality_1[12][2][2:4])*60+int(focality_1[12][2][4:]))<5:
                        focality_2[12]=[0,0,0]
    
    #reporting                
    focal=focality_2[0][0]
    for i in range (1,len(focality_2)):
        focal=focal+focality_2[i][0]
        
    focality_report=''    
    if focal!=0:
        focality_report='''\n\nBased of reported semiology, this ictal episode
        inclides features of focal seizure by following reasons:'''
        if focality_2[0][0]==1:
            focality_report+='''\nThe patient reported aura'''
        if focality_2[1][0]==1:
            focality_report+='''\nHyperkinetic event is part of this ictal episode'''
        if focality_2[2][0]==1:
            focality_report+='''\nRt fencer's posturing is part of this ictal episode'''
        if focality_2[3][0]==1:
            focality_report+='''\nLt fencer's posturing is part of this ictal episode'''
        if focality_2[4][0]==1:
            focality_report+='''\nRt Figure-of-4 posturing is part of this ictal episode'''
        if focality_2[5][0]==1:
            focality_report+='''\nLt Figure-of-4 posturing is part of this ictal episode'''
        if focality_2[6][0]==1:
            focality_report+='''\nRt unilateral tonic movement is part of this ictal episode'''
        if focality_2[7][0]==1:
            focality_report+='''\nRt unilateral dystonic movement is part of this ictal episode'''
        if focality_2[8][0]==1:
            focality_report+='''\nRt unilateral clonic movement is part of this ictal episode'''
        if focality_2[9][0]==1:
            focality_report+='''\nRt unilateral paralysis is part of this ictal episode'''
        if focality_2[10][0]==1:
            focality_report+='''\nLt unilateral tonic movement is part of this ictal episode'''
        if focality_2[11][0]==1:
            focality_report+='''\nLt unilateral dystonic movement is part of this ictal episode'''
        if focality_2[12][0]==1:
            focality_report+='''\nLt unilateral clonic movement is part of this ictal episode'''
        if focality_2[13][0]==1:
            focality_report+='''\nLt unilateral paralysis is part of this ictal episode'''
        if focality_2[14][0]==1:
            focality_report+='''\nForced head torn to the right is part of this ictal episode'''
        if focality_2[15][0]==1:
            focality_report+='''\nForced head torn to the left is part of this ictal episode'''
        if focality_2[16][0]==1:
            focality_report+='''\nForced gaze deviation to the right is part of this ictal episode'''
        if focality_2[17][0]==1:
            focality_report+='''\nForced gaze deviation to the left is part of this ictal episode'''    
            
        focality_report+='''\n\nWARNING! Features of focal seizure can 
    sometimes present also with primary generalized seizures.''' 
        focality_report+='''\n-----------------------------------------------------------------------------------------------------------------'''
    else:
        focality_report='''\nDigital Semiology decided to avoid any statement regarding focality of this ictal episode'''
        focality_report+='''\n-----------------------------------------------------------------------------------------------------------'''        
    return  focality_report                   
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Ictal(object):
    '''Ictal Episode'''
    Ictus=''
    Ds_starter=''
    Report=''
    def __init__(self, Ictus, Ds_starter, Report):
        self.Ictus=Ictus
        self.Ds_starter=Ds_starter
        self.Report=Report
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def save_variable():
    global ds_starter
    copy_filename='ictal_episode_' + ds_starter[0] + '_' + ds_starter[18] +'.dat'
    filename='ictal_episode_' + ds_starter[18] +'.dat'
    output=open(filename, 'wb')  # Overwrites any existing file with the same name.
    pickle.dump(ds_starter, output)
    pickle.dump(ictus, output)
    pickle.dump(report, output)
    pickle.dump(software_user_dialogue, output)
    output.close()
    output=open(copy_filename, 'wb')  # Overwrites any existing file with the same name.
    pickle.dump(ds_starter, output)
    pickle.dump(ictus, output)
    pickle.dump(report, output)
    pickle.dump(software_user_dialogue, output)
    output.close()

#----------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------
def save_variable_draft():
    filename='ictal_episode_' + ds_starter[18]+'_draft.dat'
    output=open(filename, 'wb')  # Overwrites any existing file with the same name.
    pickle.dump(ds_starter, output)
    pickle.dump(ictus, output)
    pickle.dump(report, output)
    pickle.dump(software_user_dialogue, output)
    output.close()
#----------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------
class MyFrame(wx.Frame): #Class definition for GUI 'Types of ictal events'.    
    def __init__(self):
        super().__init__(parent=None, title='Types of ictal events', size=(1000, 700))
        panel = wx.Panel(self)
    
        simple_btn = wx.Button(panel, label='Simple motor', pos=(5, 405))
        simple_btn.Bind(wx.EVT_BUTTON, self.on_simp)
        
        automatic_btn = wx.Button(panel, label='Automatisms', pos=(5, 455))
        automatic_btn.Bind(wx.EVT_BUTTON, self.on_automat)
        
        hypermotor_btn = wx.Button(panel, label='Hyperkinetic', pos=(5, 505))
        hypermotor_btn.Bind(wx.EVT_BUTTON, self.on_hypermot)
        
        eyemove_btn = wx.Button(panel, label='Eye movements', pos=(105, 405))
        eyemove_btn.Bind(wx.EVT_BUTTON, self.on_eyemove)
        
        voice_btn = wx.Button(panel, label='Voice event', pos=(105, 455))
        voice_btn.Bind(wx.EVT_BUTTON, self.on_voice)
        
        dialeptic_btn = wx.Button(panel, label='Dialeptic', pos=(105, 505))
        dialeptic_btn.Bind(wx.EVT_BUTTON, self.on_dialept)
        
        gtcs_btn = wx.Button(panel, label='GTCS', pos=(215, 405))
        gtcs_btn.Bind(wx.EVT_BUTTON, self.on_gtcs)
        
        autonomic_btn = wx.Button(panel, label='Autonomic', pos=(215, 455))
        autonomic_btn.Bind(wx.EVT_BUTTON, self.on_autonom)
        
        aura_btn = wx.Button(panel, label='Aura', pos=(215, 505))
        aura_btn.Bind(wx.EVT_BUTTON, self.on_aura)
        
        other_btn = wx.Button(panel, label='Other events', pos=(5, 555))
        other_btn.Bind(wx.EVT_BUTTON, self.on_other)
        
        triger_btn = wx.Button(panel, label='Trigger', pos=(105, 555))
        triger_btn.Bind(wx.EVT_BUTTON, self.on_triger)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(275, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                
        self.Show()
          
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_simp(self, event):
        global ev_1
        ev_1=1 
        global software_user_dialogue
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("User selected:\nSimple motor event\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSimple motor event\n"
    def on_automat(self, event):
        global ev_2
        ev_2=1
        global software_user_dialogue
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("User selected:\nAutomatism\n")
        software_user_dialogue+="\n"+current_time+"\nAutomatism\n"
        
    def on_hypermot(self,event):
        global ev_3
        ev_3=1
        global software_user_dialogue
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("User selected:\nHyperkinetic event\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nHyperkinetic event\n"
        
    def on_eyemove(self,event):
        global ev_4
        ev_4=1
        global software_user_dialogue
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("User selected:\nEye movement event\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nEye movement event\n"
        
    def on_voice(self,event):
        global ev_5
        ev_5=1
        global software_user_dialogue
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("User selected:\nVoice event\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nVoice event\n"
        
    def on_dialept(self,event):
        global ev_6
        ev_6=1
        global software_user_dialogue
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("User selected:\nDialeptic event\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDialeptic event\n"
        
    def on_gtcs(self,event):
        global ev_7
        ev_7=1
        global software_user_dialogue
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("User selected:\nGTCS\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nGTCS\n"
        
    def on_autonom(self,event):
        global ev_8
        ev_8=1
        global software_user_dialogue
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("User selected:\nAutonomic event\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAutonomic event\n"
        
    def on_aura(self,event):
        global ev_9
        ev_9=1
        global software_user_dialogue
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("User selected:\nAura\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAura\n"
    
    def on_other(self,event):
        global ev_10
        ev_10=1
        global software_user_dialogue
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("User selected:\nOther event\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOther event\n"
        
    def on_triger(self,event):
        global ev_11
        ev_11=1
        global software_user_dialogue
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("User selected:\nTrigger event\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nTrigger event\n"
#------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------
class MyFrame_simp(wx.Frame): #Class definition for GUI 'Simple motor behaviors: body parts'.      
    def __init__(self):
        super().__init__(parent=None, title='Simple motor behaviors: body parts', size=(1000, 400))
        panel = wx.Panel(self)
    
        rarmp_btn = wx.Button(panel, label='R arm prox', pos=(5, 105))
        rarmp_btn.Bind(wx.EVT_BUTTON, self.on_rarmp)
        
        rarmd_btn = wx.Button(panel, label='R arm dist', pos=(5, 145))
        rarmd_btn.Bind(wx.EVT_BUTTON, self.on_rarmd)
        
        larmp_btn = wx.Button(panel, label='L arm prox', pos=(5, 190))
        larmp_btn.Bind(wx.EVT_BUTTON, self.on_larmp)
        
        larmd_btn = wx.Button(panel, label='L arm dist', pos=(5, 235))
        larmd_btn.Bind(wx.EVT_BUTTON, self.on_larmd)
        
        rlegp_btn = wx.Button(panel, label='R leg prox', pos=(95, 105))
        rlegp_btn.Bind(wx.EVT_BUTTON, self.on_rlegp)
        
        rlegd_btn = wx.Button(panel, label='R leg dist', pos=(95, 145))
        rlegd_btn.Bind(wx.EVT_BUTTON, self.on_rlegd)
        
        llegp_btn = wx.Button(panel, label='L leg prox', pos=(95, 190))
        llegp_btn.Bind(wx.EVT_BUTTON, self.on_llegp)
        
        llegd_btn = wx.Button(panel, label='L leg dist', pos=(95, 235))
        llegd_btn.Bind(wx.EVT_BUTTON, self.on_llegd)
        
        necktor_btn = wx.Button(panel, label='Neck to R', pos=(185, 105))
        necktor_btn.Bind(wx.EVT_BUTTON, self.on_necktor)
        
        necktol_btn = wx.Button(panel, label='Neck to L', pos=(185, 145))
        necktol_btn.Bind(wx.EVT_BUTTON, self.on_necktol)
        
        neckforw_btn = wx.Button(panel, label='Neck forw', pos=(185, 190))
        neckforw_btn.Bind(wx.EVT_BUTTON, self.on_neckforw)
        
        neckbackw_btn = wx.Button(panel, label='Neck backw', pos=(185, 235))
        neckbackw_btn.Bind(wx.EVT_BUTTON, self.on_neckbackw)
        
        trunktor_btn = wx.Button(panel, label='Trunk to R', pos=(275, 105))
        trunktor_btn.Bind(wx.EVT_BUTTON, self.on_trunktor)
        
        trunktol_btn = wx.Button(panel, label='Trunk to L', pos=(275, 145))
        trunktol_btn.Bind(wx.EVT_BUTTON, self.on_trunktol)
        
        trunkforw_btn = wx.Button(panel, label='Trunk forw', pos=(275, 190))
        trunkforw_btn.Bind(wx.EVT_BUTTON, self.on_trunkforw)
        
        trunkbackw_btn = wx.Button(panel, label='Trunk backw', pos=(275, 235))
        trunkbackw_btn.Bind(wx.EVT_BUTTON, self.on_trunkbackw)
        
        rface_btn = wx.Button(panel, label='R face', pos=(5, 280))
        rface_btn.Bind(wx.EVT_BUTTON, self.on_rface)
        
        lface_btn = wx.Button(panel, label='L face', pos=(95, 280))
        lface_btn.Bind(wx.EVT_BUTTON, self.on_lface)
        
        jawmidline_btn = wx.Button(panel, label='Jaw midline', pos=(365, 105))
        jawmidline_btn.Bind(wx.EVT_BUTTON, self.on_jawmidline)
        
        jawtor_btn = wx.Button(panel, label='Jaw to R', pos=(365, 145))
        jawtor_btn.Bind(wx.EVT_BUTTON, self.on_jawtor)
        
        jawtol_btn = wx.Button(panel, label='Jaw to L', pos=(365, 190))
        jawtol_btn.Bind(wx.EVT_BUTTON, self.on_jawtol)
        
        tonguemidline_btn = wx.Button(panel, label='Tongue midline', pos=(455, 105))
        tonguemidline_btn.Bind(wx.EVT_BUTTON, self.on_tonguemidline)
        
        tonguetor_btn = wx.Button(panel, label='Tongue to R', pos=(455, 145))
        tonguetor_btn.Bind(wx.EVT_BUTTON, self.on_tonguetor)
        
        tonguetol_btn = wx.Button(panel, label='Tongue to L', pos=(455, 190))
        tonguetol_btn.Bind(wx.EVT_BUTTON, self.on_tonguetol)
        
        general_btn = wx.Button(panel, label='Generalized', pos=(555, 105))
        general_btn.Bind(wx.EVT_BUTTON, self.on_general)
        
        rthemibody_btn = wx.Button(panel, label='Rt hemibody', pos=(555, 145))
        rthemibody_btn.Bind(wx.EVT_BUTTON, self.on_rthemibody)
        
        lthemibody_btn = wx.Button(panel, label='Lt hemibody', pos=(555, 190))
        lthemibody_btn.Bind(wx.EVT_BUTTON, self.on_lthemibody)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(275, 280))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                        
        self.Show()
          
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_rarmp(self, event):
        global ev_simp_1
        ev_simp_1=1        
        global software_user_dialogue
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("User selected:\nRt arm proximal\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt arm proximal\n" 
       
    def on_rarmd(self, event):
        global ev_simp_2
        ev_simp_2=1
        global software_user_dialogue
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print("User selected:\nRt arm distal\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt arm distal\n"
        
    def on_larmp(self,event):
        global ev_simp_3
        ev_simp_3=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt arm proximal\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt arm proximal\n"
        
    def on_larmd(self,event):
        global ev_simp_4
        ev_simp_4=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt arm distal\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt arm distal\n"
        
    def on_rlegp(self,event):
        global ev_simp_5
        ev_simp_5=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt leg proximal\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt leg proximal\n"
        
    def on_rlegd(self,event):
        global ev_simp_6
        ev_simp_6=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt leg distal\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt leg distal\n"
        
    def on_llegp(self,event):
        global ev_simp_7
        ev_simp_7=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt leg proximal\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt leg proximal\n"
        
    def on_llegd(self,event):
        global ev_simp_8
        ev_simp_8=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt leg distal\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt leg distal\n"
        
    def on_necktor(self,event):
        global ev_simp_9
        ev_simp_9=1
        global software_user_dialogue       
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nNeck turn to Rt\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNeck turn to Rt\n"
        
    def on_necktol(self,event):
        global ev_simp_10
        ev_simp_10=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNeck turn to Lt\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNeck turn to Lt\n"
        
    def on_neckforw(self,event):
        global ev_simp_11
        ev_simp_11=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nNeck flexion forward\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNeck flexion forward\n"
        
    def on_neckbackw(self,event):
        global ev_simp_12
        ev_simp_12=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nNeck extension backward\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNeck extension backward\n"
        
    def on_trunktor(self,event):
        global ev_simp_13
        ev_simp_13=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nTrunk turn to Rt\n')
        software_user_dialogue+="\n"+current_time+"\nTrunk turn to Rt\n"
        
    def on_trunktol(self,event):
        global ev_simp_14
        ev_simp_14=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nTrunk turn to Lt\n')
        software_user_dialogue+="\n"+current_time+"\nTrunk turn to Lt\n"
        
    def on_trunkforw(self,event):
        global ev_simp_15
        ev_simp_15=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nTrunk flexion forward\n')
        software_user_dialogue+="\n"+current_time+"\nTrunk flexion forward\n"
        
    def on_trunkbackw(self,event):
        global ev_simp_16
        ev_simp_16=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nTrunk extension backward\n')
        software_user_dialogue+="\n"+current_time+"\nTrunk extension backward\n"
        
    def on_rface(self,event):
        global ev_simp_17
        ev_simp_17=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt side of the face\n')
        software_user_dialogue+="\n"+current_time+"\nRt side of the face\n"
        
    def on_lface(self,event):
        global ev_simp_18
        ev_simp_18=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt side of the face\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt arm proximal\n"
        
    def on_jawmidline(self,event):
        global ev_simp_19
        ev_simp_19=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nMidline movements of the jaw\n')
        software_user_dialogue+="\n"+current_time+"\nMidline movements of the jaw\n"
        
    def on_jawtor(self,event):
        global ev_simp_20
        ev_simp_20=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRightwise movements of the jaw\n')
        software_user_dialogue+="\n"+current_time+"\nRightwise movements of the jaw\n"
        
    def on_jawtol(self,event):
        global ev_simp_21
        ev_simp_21=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLeftwise movements of the jaw\n')
        software_user_dialogue+="\n"+current_time+"\nLeftwise movements of the jaw\n"
        
    def on_tonguemidline(self,event):
        global ev_simp_22
        ev_simp_22=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nMidline movements of the tongue\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMidline movements of the tongue\n"
        
    def on_tonguetor(self,event):
        global ev_simp_23
        ev_simp_23=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRightwise movements of the tongue\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRightwise movements of the tongue\n"
        
    def on_tonguetol(self,event):
        global ev_simp_24
        ev_simp_24=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLeftwise movements of the tongue\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLeftwise movements of the tongue\n"
        
    def on_general(self,event):
        global ev_simp_25
        ev_simp_25=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nGeneralized\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nGeneralized\n"
        
    def on_rthemibody(self,event):
        global ev_simp_26
        ev_simp_26=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt hemibody\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt hemibody\n"
        
    def on_lthemibody(self,event):
        global ev_simp_27
        ev_simp_27=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt hemibody\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt hemibody\n"
#------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------
class MyFrame_automat(wx.Frame): #Class definition for GUI 'Automatisms: limbs'.   
    def __init__(self):
        super().__init__(parent=None, title='Automatisms: limbs', size=(1000, 500))
        panel = wx.Panel(self)
            
                
        rarms_btn = wx.Button(panel, label='R arm strong', pos=(105, 205))
        rarms_btn.Bind(wx.EVT_BUTTON, self.on_rarms)
                
        rarmw_btn = wx.Button(panel, label='R arm weak', pos=(295, 205))
        rarmw_btn.Bind(wx.EVT_BUTTON, self.on_rarmw)
                
        larms_btn = wx.Button(panel, label='L arm strong', pos=(105, 245))
        larms_btn.Bind(wx.EVT_BUTTON, self.on_larms)
                
        larmw_btn = wx.Button(panel, label='L arm weak', pos=(295, 245))
        larmw_btn.Bind(wx.EVT_BUTTON, self.on_larmw)
                
        rlegs_btn = wx.Button(panel, label='R leg strong', pos=(105, 290))
        rlegs_btn.Bind(wx.EVT_BUTTON, self.on_rlegs)
                
        rlegw_btn = wx.Button(panel, label='R leg weak', pos=(295, 290))
        rlegw_btn.Bind(wx.EVT_BUTTON, self.on_rlegw)
                
        llegs_btn = wx.Button(panel, label='L leg strong', pos=(105, 335))
        llegs_btn.Bind(wx.EVT_BUTTON, self.on_llegs)
                
        llegw_btn = wx.Button(panel, label='L leg weak', pos=(295, 335))
        llegw_btn.Bind(wx.EVT_BUTTON, self.on_llegw)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(375, 400))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                                        
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
                
    def on_rarms(self, event):
        global ev_automat_1
        ev_automat_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt arm strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt arm strong\n"
               
    def on_rarmw(self, event):
        global ev_automat_2
        ev_automat_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt arm weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt arm weak\n"
                
    def on_larms(self,event):
        global ev_automat_3
        ev_automat_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt arm strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt arm strong\n"
                
    def on_larmw(self,event):
        global ev_automat_4
        ev_automat_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt arm weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt arm weak\n"
                
    def on_rlegs(self,event):
        global ev_automat_5
        ev_automat_5=1       
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt leg strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt leg strong\n"
                
    def on_rlegw(self,event):
        global ev_automat_6
        ev_automat_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt leg weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt leg weak\n"
                
    def on_llegs(self,event):
        global ev_automat_7
        ev_automat_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt leg strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt leg strong\n"
                
    def on_llegw(self,event):
        global ev_automat_8
        ev_automat_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt leg weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt leg weak\n"
#----------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------
class MyFrame_automat_arm(wx.Frame): #Class definition for GUI 'Automatisms: arms'.    
    def __init__(self):
        super().__init__(parent=None, title='Automatisms: arms', size=(1000, 400))
        panel = wx.Panel(self)
            
                
        rarms_btn = wx.Button(panel, label='R arm strong', pos=(105, 135))
        rarms_btn.Bind(wx.EVT_BUTTON, self.on_rarms)
                
        rarmw_btn = wx.Button(panel, label='R arm weak', pos=(395, 135))
        rarmw_btn.Bind(wx.EVT_BUTTON, self.on_rarmw)
                
        larms_btn = wx.Button(panel, label='L arm strong', pos=(105, 245))
        larms_btn.Bind(wx.EVT_BUTTON, self.on_larms)
                
        larmw_btn = wx.Button(panel, label='L arm weak', pos=(395, 245))
        larmw_btn.Bind(wx.EVT_BUTTON, self.on_larmw)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(675, 280))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                                                               
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
                
    def on_rarms(self, event):
        global ev_automat_1
        ev_automat_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt arm strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt arm strong\n"
               
    def on_rarmw(self, event):
        global ev_automat_2
        ev_automat_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt arm weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt arm weak\n"
                
    def on_larms(self,event):
        global ev_automat_3
        ev_automat_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt arm strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt arm strong\n"
                
    def on_larmw(self,event):
        global ev_automat_4
        ev_automat_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt arm weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt arm weak\n"
#-------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------
class MyFrame_automat_leg(wx.Frame): #Class definition for GUI 'Automatisms: legs'.     
    def __init__(self):
        super().__init__(parent=None, title='Automatisms: legs', size=(1000, 400)) 
        panel = wx.Panel(self)
                            
        rlegs_btn = wx.Button(panel, label='R leg strong', pos=(105, 135))
        rlegs_btn.Bind(wx.EVT_BUTTON, self.on_rlegs)
                
        rlegw_btn = wx.Button(panel, label='R leg weak', pos=(395, 135))
        rlegw_btn.Bind(wx.EVT_BUTTON, self.on_rlegw)
                
        llegs_btn = wx.Button(panel, label='L leg strong', pos=(105, 245))
        llegs_btn.Bind(wx.EVT_BUTTON, self.on_llegs)
                
        llegw_btn = wx.Button(panel, label='L leg weak', pos=(395, 245))
        llegw_btn.Bind(wx.EVT_BUTTON, self.on_llegw)
#        
        next_step_btn = wx.Button(panel, label='Next step', pos=(675, 280))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                                        
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()

                
    def on_rlegs(self,event):
        global ev_automat_5
        ev_automat_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt leg strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt leg strong\n"
                
    def on_rlegw(self,event):
        global ev_automat_6
        ev_automat_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt leg weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt leg weak\n"
        
                
    def on_llegs(self,event):
        global ev_automat_7
        ev_automat_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt leg strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt leg strong\n"
                
    def on_llegw(self,event):
        global ev_automat_8
        ev_automat_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt leg weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt leg weak\n"
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------
class MyFrame_aura_bp(wx.Frame): #Class definition for GUI 'Aura report: body parts'.     
    def __init__(self):
        super().__init__(parent=None, title='Aura report: body parts', size=(1000, 400))
        panel = wx.Panel(self)
                                           
        head_btn = wx.Button(panel, label='Head', pos=(100, 205))
        head_btn.Bind(wx.EVT_BUTTON, self.on_head)
                
        neck_btn = wx.Button(panel, label='Neck', pos=(100, 245))
        neck_btn.Bind(wx.EVT_BUTTON, self.on_neck)
                
        trunk_btn = wx.Button(panel, label='Trunk', pos=(100, 290))
        trunk_btn.Bind(wx.EVT_BUTTON, self.on_trunk)
                
        limbs_btn = wx.Button(panel, label='Limbs', pos=(250, 205))
        limbs_btn.Bind(wx.EVT_BUTTON, self.on_limbs)
                
        buttock_btn = wx.Button(panel, label='Buttock', pos=(250, 245))
        buttock_btn.Bind(wx.EVT_BUTTON, self.on_buttock)
        
        genital_btn = wx.Button(panel, label='Genital', pos=(250, 290))
        genital_btn.Bind(wx.EVT_BUTTON, self.on_genital)
        
        generalizedaura_btn = wx.Button(panel, label='Generalized', pos=(400, 205))
        generalizedaura_btn.Bind(wx.EVT_BUTTON, self.on_generalizedaura)
                
        rthemibodyaura_btn = wx.Button(panel, label='Rt hemibody', pos=(400, 245))
        rthemibodyaura_btn.Bind(wx.EVT_BUTTON, self.on_rthemibodyaura)
        
        lthemibodyaura_btn = wx.Button(panel, label='Lt hemibody', pos=(400, 290))
        lthemibodyaura_btn.Bind(wx.EVT_BUTTON, self.on_lthemibodyaura)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(550, 300))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
                
    def on_head(self, event):
        global ev_aura_bp_1
        ev_aura_bp_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nHead\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nHead\n"
               
    def on_neck(self, event):
        global ev_aura_bp_2
        ev_aura_bp_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNeck\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNeck\n"
                
    def on_trunk(self,event):
        global ev_aura_bp_3
        ev_aura_bp_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nTrunk\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nTrunk\n"
                
    def on_limbs(self,event):
        global ev_aura_bp_4
        ev_aura_bp_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLimbs\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLimbs\n"
                
    def on_buttock(self,event):
        global ev_aura_bp_5
        ev_aura_bp_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nButtock\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nButtock\n"
                
    def on_genital(self,event):
        global ev_aura_bp_6
        ev_aura_bp_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nGenital\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nGenital\n"
        
    def on_generalizedaura(self,event):
        global ev_aura_bp_7
        ev_aura_bp_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nGeneralized\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nGeneralized\n"
                
    def on_rthemibodyaura(self,event):
        global ev_aura_bp_8
        ev_aura_bp_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt hemibody\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt hemibody\n"
                
    def on_lthemibodyaura(self,event):
        global ev_aura_bp_9
        ev_aura_bp_9=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt hemibody\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt hemibody\n"
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------
class MyFrame_aura_head(wx.Frame): #Class definition for GUI 'Aura report: head'.   
    def __init__(self):
        super().__init__(parent=None, title='Aura report: head', size=(1000, 700))
        panel = wx.Panel(self)
                    
        rface_btn = wx.Button(panel, label='R face', pos=(5, 405))
        rface_btn.Bind(wx.EVT_BUTTON, self.on_rface)
                
        lface_btn = wx.Button(panel, label='L face', pos=(95, 405))
        lface_btn.Bind(wx.EVT_BUTTON, self.on_lface)
                
        reye_btn = wx.Button(panel, label='R eye', pos=(5, 445))
        reye_btn.Bind(wx.EVT_BUTTON, self.on_reye)
                
        leye_btn = wx.Button(panel, label='L eye', pos=(95, 445))
        leye_btn.Bind(wx.EVT_BUTTON, self.on_leye)
                
        rear_btn = wx.Button(panel, label='R ear', pos=(5, 490))
        rear_btn.Bind(wx.EVT_BUTTON, self.on_rear)
        
        lear_btn = wx.Button(panel, label='L ear', pos=(95, 490))
        lear_btn.Bind(wx.EVT_BUTTON, self.on_lear)
        
        rscalp_btn = wx.Button(panel, label='R scalp', pos=(5, 535))
        rscalp_btn.Bind(wx.EVT_BUTTON, self.on_rscalp)
                
        lscalp_btn = wx.Button(panel, label='L scalp', pos=(95, 535))
        lscalp_btn.Bind(wx.EVT_BUTTON, self.on_lscalp)
        
        occiput_btn = wx.Button(panel, label='Occiput', pos=(180, 405))
        occiput_btn.Bind(wx.EVT_BUTTON, self.on_occiput)
        
        nose_btn = wx.Button(panel, label='Nose', pos=(180, 445))
        nose_btn.Bind(wx.EVT_BUTTON, self.on_nose)
        
        oral_btn = wx.Button(panel, label='Oral caviy', pos=(180, 490))
        oral_btn.Bind(wx.EVT_BUTTON, self.on_oral)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(275, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
                
    def on_rface(self, event):
        global ev_aura_head_1
        ev_aura_head_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt face\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt face\n"
               
    def on_lface(self, event):
        global ev_aura_head_2
        ev_aura_head_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt face\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt face\n"
                
    def on_reye(self,event):
        global ev_aura_head_3
        ev_aura_head_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt eye\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt eye\n"
                
    def on_leye(self,event):
        global ev_aura_head_4
        ev_aura_head_4=1
        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt eye\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt eye\n"
                
    def on_rear(self,event):
        global ev_aura_head_5
        ev_aura_head_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt ear\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt ear\n"
                
    def on_lear(self,event):
        global ev_aura_head_6
        ev_aura_head_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt ear\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt ear\n"
                
    def on_rscalp(self,event):
        global ev_aura_head_7
        ev_aura_head_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt scalp\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt scalp\n"
                
    def on_lscalp(self,event):
        global ev_aura_head_8
        ev_aura_head_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt scalp\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt scalp\n"
        
    def on_occiput(self,event):
        global ev_aura_head_9
        ev_aura_head_9=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nOcciput\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOcciput\n"
        
    def on_nose(self,event):
        global ev_aura_head_10
        ev_aura_head_10=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nNose\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNose\n"
        
    def on_oral(self,event):
        global ev_aura_head_11
        ev_aura_head_11=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nOral cavavity\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOral cavavity\n"
#------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------
class MyFrame_aura_neck(wx.Frame): #Class definition for GUI 'Aura report: neck'.   
    def __init__(self):
        super().__init__(parent=None, title='Aura report: neck', size=(1000, 700))
        panel = wx.Panel(self)
                                        
        aneck_btn = wx.Button(panel, label='Ant neck', pos=(5, 405))
        aneck_btn.Bind(wx.EVT_BUTTON, self.on_aneck)
                
        pneck_btn = wx.Button(panel, label='Post neck', pos=(95, 405))
        pneck_btn.Bind(wx.EVT_BUTTON, self.on_pneck)
                
        rneck_btn = wx.Button(panel, label='R neck', pos=(5, 445))
        rneck_btn.Bind(wx.EVT_BUTTON, self.on_rneck)
                
        lneck_btn = wx.Button(panel, label='L neck', pos=(95, 445))
        lneck_btn.Bind(wx.EVT_BUTTON, self.on_lneck)

        
        next_step_btn = wx.Button(panel, label='Next step', pos=(275, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
                
    def on_aneck(self, event):
        global ev_aura_neck_1
        ev_aura_neck_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAnterior neck\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAnterior neck\n"
               
    def on_pneck(self, event):
        global ev_aura_neck_2
        ev_aura_neck_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nPosterior neck\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPosterior neck\n"
                
    def on_rneck(self,event):
        global ev_aura_neck_3
        ev_aura_neck_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt neck\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt neck\n"
                
    def on_lneck(self,event):
        global ev_aura_neck_4
        ev_aura_neck_4=1
        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt neck\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt neck\n"
#-----------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------
class MyFrame_aura_trunk(wx.Frame): #Class definition for GUI 'Aura report: trunk'.   
    def __init__(self):
        super().__init__(parent=None, title='Aura report: trunk', size=(1000, 700))
        panel = wx.Panel(self)
            
        rchest_btn = wx.Button(panel, label='R chest', pos=(5, 405))
        rchest_btn.Bind(wx.EVT_BUTTON, self.on_rchest)
                
        lchest_btn = wx.Button(panel, label='L chest', pos=(95, 405))
        lchest_btn.Bind(wx.EVT_BUTTON, self.on_lchest)
                
        rabdomen_btn = wx.Button(panel, label='R abdomen', pos=(5, 445))
        rabdomen_btn.Bind(wx.EVT_BUTTON, self.on_rabdomen)
                
        labdomen_btn = wx.Button(panel, label='L abdomen', pos=(95, 445))
        labdomen_btn.Bind(wx.EVT_BUTTON, self.on_labdomen)
                
        rupback_btn = wx.Button(panel, label='R upp back', pos=(5, 490))
        rupback_btn.Bind(wx.EVT_BUTTON, self.on_rupback)
        
        lupback_btn = wx.Button(panel, label='L upp back', pos=(95, 490))
        lupback_btn.Bind(wx.EVT_BUTTON, self.on_lupback)
        
        rlowback_btn = wx.Button(panel, label='R low back', pos=(5, 535))
        rlowback_btn.Bind(wx.EVT_BUTTON, self.on_rlowback)
                
        llowback_btn = wx.Button(panel, label='L low back', pos=(95, 535))
        llowback_btn.Bind(wx.EVT_BUTTON, self.on_llowback)       
       
        next_step_btn = wx.Button(panel, label='Next step', pos=(275, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
#                
    def on_rchest(self, event):
        global ev_aura_trunk_1
        ev_aura_trunk_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt chest\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt chest\n"
               
    def on_lchest(self, event):
        global ev_aura_trunk_2
        ev_aura_trunk_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt chest\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt chest\n"
                
    def on_rabdomen(self,event):
        global ev_aura_trunk_3
        ev_aura_trunk_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt abdomen\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt abdomen\n"
                
    def on_labdomen(self,event):
        global ev_aura_trunk_4
        ev_aura_trunk_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt abdomen\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt abdomen\n"
                
    def on_rupback(self,event):
        global ev_aura_trunk_5
        ev_aura_trunk_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt upper back\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt upper back\n"
                
    def on_lupback(self,event):
        global ev_aura_trunk_6
        ev_aura_trunk_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt upper back\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt upper back\n"
                
    def on_rlowback(self,event):
        global ev_aura_trunk_7
        ev_aura_trunk_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt low back\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt low back\n"
                
    def on_llowback(self,event):
        global ev_aura_trunk_8
        ev_aura_trunk_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt low back\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt low back\n"
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------
class MyFrame_aura_limbs(wx.Frame): #Class definition for GUI 'Aura report: limbs'.   
    def __init__(self):
        super().__init__(parent=None, title='Aura report: limbs', size=(1000, 700))
        panel = wx.Panel(self)
            
        rparm_btn = wx.Button(panel, label='Rt prox arm', pos=(5, 405))
        rparm_btn.Bind(wx.EVT_BUTTON, self.on_rparm)
                
        lparm_btn = wx.Button(panel, label='L prox arm', pos=(95, 405))
        lparm_btn.Bind(wx.EVT_BUTTON, self.on_lparm)
                
        rdarm_btn = wx.Button(panel, label='R dist arm', pos=(5, 445))
        rdarm_btn.Bind(wx.EVT_BUTTON, self.on_rdarm)
                
        ldarm_btn = wx.Button(panel, label='L dist arm', pos=(95, 445))
        ldarm_btn.Bind(wx.EVT_BUTTON, self.on_ldarm)
                
        rpleg_btn = wx.Button(panel, label='R prox leg', pos=(5, 490))
        rpleg_btn.Bind(wx.EVT_BUTTON, self.on_rpleg)
        
        lpleg_btn = wx.Button(panel, label='L prox leg', pos=(95, 490))
        lpleg_btn.Bind(wx.EVT_BUTTON, self.on_lpleg)
        
        rdleg_btn = wx.Button(panel, label='R dist leg', pos=(5, 535))
        rdleg_btn.Bind(wx.EVT_BUTTON, self.on_rdleg)
                
        ldleg_btn = wx.Button(panel, label='L dist leg', pos=(95, 535))
        ldleg_btn.Bind(wx.EVT_BUTTON, self.on_ldleg)       
       
        next_step_btn = wx.Button(panel, label='Next step', pos=(275, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
#                
    def on_rparm(self, event):
        global ev_aura_limb_1
        ev_aura_limb_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt prox arm\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt prox arm\n"
               
    def on_lparm(self, event):
        global ev_aura_limb_2
        ev_aura_limb_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt prox arm\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt prox arm\n"
                
    def on_rdarm(self,event):
        global ev_aura_limb_3
        ev_aura_limb_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt dist arm\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt dist arm\n"
                
    def on_ldarm(self,event):
        global ev_aura_limb_4
        ev_aura_limb_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt dist arm')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt dist arm\n"
                
    def on_rpleg(self,event):
        global ev_aura_limb_5
        ev_aura_limb_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt prox leg\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt prox leg\n"
                
    def on_lpleg(self,event):
        global ev_aura_limb_6
        ev_aura_limb_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt prox leg\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt prox leg\n"
                
    def on_rdleg(self,event):
        global ev_aura_limb_7
        ev_aura_limb_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt dist leg\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt dist leg\n"
                
    def on_ldleg(self,event):
        global ev_aura_limb_8
        ev_aura_limb_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt dist leg\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt dist leg\n"
#------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------
class MyFrame_aura_buttock(wx.Frame): #Class definition for GUI 'Aura report: butttock'.   
    def __init__(self):
        super().__init__(parent=None, title='Aura report: buttock', size=(1000, 700))
        panel = wx.Panel(self)
            
        rbut_btn = wx.Button(panel, label='R buttock', pos=(5, 445))
        rbut_btn.Bind(wx.EVT_BUTTON, self.on_rbut)
                
        lbut_btn = wx.Button(panel, label='L buttock', pos=(180, 445))
        lbut_btn.Bind(wx.EVT_BUTTON, self.on_lbut)
       
        next_step_btn = wx.Button(panel, label='Next step', pos=(275, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
#                
    def on_rbut(self, event):
        global ev_aura_but_1
        ev_aura_but_1=1        
        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt buttock\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt hemibody\n"
               
    def on_lbut(self, event):
        global ev_aura_but_2
        ev_aura_but_2=1
        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt buttock\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt hemibody\n"
#----------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------
class MyFrame_otherevent_limbs(wx.Frame):  #Class definition for GUI 'Other event: limbs'.  
    def __init__(self):
        super().__init__(parent=None, title='Other event: limbs', size=(1000, 500))
        panel = wx.Panel(self)
            
        rparm_btn = wx.Button(panel, label='R prox arm', pos=(205, 205))
        rparm_btn.Bind(wx.EVT_BUTTON, self.on_rparm)
                
        lparm_btn = wx.Button(panel, label='L prox arm', pos=(395, 205))
        lparm_btn.Bind(wx.EVT_BUTTON, self.on_lparm)
#                
        rdarm_btn = wx.Button(panel, label='R dist arm', pos=(205, 245))
        rdarm_btn.Bind(wx.EVT_BUTTON, self.on_rdarm)
                
        ldarm_btn = wx.Button(panel, label='L dist arm', pos=(395, 245))
        ldarm_btn.Bind(wx.EVT_BUTTON, self.on_ldarm)
                
        rpleg_btn = wx.Button(panel, label='R prox leg', pos=(205, 290))
        rpleg_btn.Bind(wx.EVT_BUTTON, self.on_rpleg)
        
        lpleg_btn = wx.Button(panel, label='L prox leg', pos=(395, 290))
        lpleg_btn.Bind(wx.EVT_BUTTON, self.on_lpleg)
        
        rdleg_btn = wx.Button(panel, label='R dist leg', pos=(205, 335))
        rdleg_btn.Bind(wx.EVT_BUTTON, self.on_rdleg)
                
        ldleg_btn = wx.Button(panel, label='L dist leg', pos=(395, 335))
        ldleg_btn.Bind(wx.EVT_BUTTON, self.on_ldleg)       
#       
        next_step_btn = wx.Button(panel, label='Next step', pos=(425, 400))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
#                
    def on_rparm(self, event):
        global ev_other_limb_1
        ev_other_limb_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt prox arm\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt prox arm\n"
               
    def on_lparm(self, event):
        global ev_other_limb_2
        ev_other_limb_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt prox arm\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt prox arm\n"
                
    def on_rdarm(self,event):
        global ev_other_limb_3
        ev_other_limb_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt dist arm\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt dist arm\n"
                
    def on_ldarm(self,event):
        global ev_other_limb_4
        ev_other_limb_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt dist arm\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt dist arm\n"
                
    def on_rpleg(self,event):
        global ev_other_limb_5
        ev_other_limb_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt prox leg\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt prox leg\n"
                
    def on_lpleg(self,event):
        global ev_other_limb_6
        ev_other_limb_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt prox leg\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt prox leg\n"
                
    def on_rdleg(self,event):
        global ev_other_limb_7
        ev_other_limb_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt dist leg\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt dist leg\n"
                
    def on_ldleg(self,event):
        global ev_other_limb_8
        ev_other_limb_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt dist leg\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt dist leg\n"
#-----------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------
class MyFrame_oral_automat(wx.Frame):  #Class definition for GUI 'Oral automatisms'.  
    def __init__(self):
        super().__init__(parent=None, title='Oral automatisms', size=(1000, 500))
        panel = wx.Panel(self)
            
        mastic_btn = wx.Button(panel, label='Mastication', pos=(105, 205))
        mastic_btn.Bind(wx.EVT_BUTTON, self.on_mastic)
                
        swalow_btn = wx.Button(panel, label='Swallowing', pos=(295, 205))
        swalow_btn.Bind(wx.EVT_BUTTON, self.on_swalow)
                
        smak_btn = wx.Button(panel, label='Lip smacking', pos=(105, 245))
        smak_btn.Bind(wx.EVT_BUTTON, self.on_smak)
                
        tong_btn = wx.Button(panel, label='Tongue movement', pos=(295, 245))
        tong_btn.Bind(wx.EVT_BUTTON, self.on_tong)
                
        kiss_btn = wx.Button(panel, label='Kissing', pos=(105, 290))
        kiss_btn.Bind(wx.EVT_BUTTON, self.on_kiss)
        
        protrus_btn = wx.Button(panel, label='Lip protrusion', pos=(295, 290))
        protrus_btn.Bind(wx.EVT_BUTTON, self.on_protrus)
        
        liplick_btn = wx.Button(panel, label='Lip licking', pos=(105, 335))
        liplick_btn.Bind(wx.EVT_BUTTON, self.on_liplick)
        
        other_btn = wx.Button(panel, label='Other', pos=(295, 335))
        other_btn.Bind(wx.EVT_BUTTON, self.on_other)
               
        next_step_btn = wx.Button(panel, label='Next step', pos=(375, 400))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
#                
    def on_mastic(self, event):
        global ev_oral_automat_1
        ev_oral_automat_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nMastication\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMastication\n"
               
    def on_swalow(self, event):
        global ev_oral_automat_2
        ev_oral_automat_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nSwallowing\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSwallowing\n"
                
    def on_smak(self,event):
        global ev_oral_automat_3
        ev_oral_automat_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLip smacking\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLip smacking\n"
                
    def on_tong(self,event):
        global ev_oral_automat_4
        ev_oral_automat_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nTongue movements\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nTongue movements\n"
                
    def on_kiss(self,event):
        global ev_oral_automat_5
        ev_oral_automat_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nKissing\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nKissing\n"
                
    def on_other(self,event):
        global ev_oral_automat_6
        ev_oral_automat_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nOther oral automatism\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOther oral automatism\n"
        
    def on_protrus(self,event):
        global ev_oral_automat_7
        ev_oral_automat_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLip protrusion\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLip protrusion\n"
        
    def on_liplick(self,event):
        global ev_oral_automat_8
        ev_oral_automat_8=1
       
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLip licking\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLip licking\n"
#----------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------
class MyFrame_dialeptic(wx.Frame): #Class definition for GUI 'Dialeptic behaviors'.   
    def __init__(self):
        super().__init__(parent=None, title='Dialeptic behaviors', size=(1000, 700))
        panel = wx.Panel(self)
            
        cunresp_btn = wx.Button(panel, label='Complete unresponsiveness', pos=(5, 405))
        cunresp_btn.Bind(wx.EVT_BUTTON, self.on_cunresp)
                
        punresp_btn = wx.Button(panel, label='Partial unresponsiveness', pos=(295, 405))
        punresp_btn.Bind(wx.EVT_BUTTON, self.on_punresp)
                
        amnes_btn = wx.Button(panel, label='Amnesia', pos=(580, 405))
        amnes_btn.Bind(wx.EVT_BUTTON, self.on_amnes)
                
        stopact_btn = wx.Button(panel, label='Cessation of activity', pos=(5, 445))
        stopact_btn.Bind(wx.EVT_BUTTON, self.on_stopact)
                
        slowact_btn = wx.Button(panel, label='Slowing of activity', pos=(295, 445))
        slowact_btn.Bind(wx.EVT_BUTTON, self.on_slowact)
        
        mhypo_btn = wx.Button(panel, label='Muscle hypotonia', pos=(580, 445))
        mhypo_btn.Bind(wx.EVT_BUTTON, self.on_mhypo)
        
        explor_btn = wx.Button(panel, label='Exploratory behavior', pos=(5, 485))
        explor_btn.Bind(wx.EVT_BUTTON, self.on_explor)
                
        nvagress_btn = wx.Button(panel, label='Non-verbal aggressive behavior', pos=(295, 485))
        nvagress_btn.Bind(wx.EVT_BUTTON, self.on_nvagress)
        
        nvpanic_btn = wx.Button(panel, label='Non-verbal panic behavior', pos=(580, 485))
        nvpanic_btn.Bind(wx.EVT_BUTTON, self.on_nvpanic)
        
        agitation_btn = wx.Button(panel, label='Agitation', pos=(5, 525))
        agitation_btn.Bind(wx.EVT_BUTTON, self.on_agitation)
        
        otherdialept_btn = wx.Button(panel, label='Other', pos=(580, 525))
        otherdialept_btn.Bind(wx.EVT_BUTTON, self.on_otherdialept)
        
        disoriented_btn = wx.Button(panel, label='Disoriented behavior', pos=(295, 525))
        disoriented_btn.Bind(wx.EVT_BUTTON, self.on_disoriented)
      
        next_step_btn = wx.Button(panel, label='Next step', pos=(675, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
                
    def on_cunresp(self, event):
        global ev_dialept_1
        ev_dialept_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nComplete unresponsiveness\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nComplete unresponsiveness\n"
        self.Close()
               
    def on_punresp(self, event):
        global ev_dialept_2
        ev_dialept_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nPartial unresponsiveness\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPartial unresponsiveness\n"
        self.Close()
                
    def on_amnes(self,event):
        global ev_dialept_3
        ev_dialept_3=1
        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAmnesia\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt hemibody\n"
        self.Close()
                
    def on_stopact(self,event):
        global ev_dialept_4
        ev_dialept_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nCessation of activity\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nCessation of activity\n"
        self.Close()
                
    def on_slowact(self,event):
        global ev_dialept_5
        ev_dialept_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nSlowing of activity\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSlowing of activity\n"
        self.Close()
                
    def on_mhypo(self,event):
        global ev_dialept_6
        ev_dialept_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nMuscle hypotonia\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMuscle hypotonia\n"
        self.Close()
                
    def on_explor(self,event):
        global ev_dialept_7
        ev_dialept_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nExploratory behavior\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nExploratory behavior\n"
        self.Close()
                
    def on_nvagress(self,event):
        global ev_dialept_8
        ev_dialept_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nNon-verbal aggressive behavior\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNon-verbal aggressive behavior\n"
        self.Close()
        
    def on_nvpanic(self,event):
        global ev_dialept_9
        ev_dialept_9=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nNon-verbal panic behavior\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNon-verbal panic behavior\n"
        self.Close()
        
    def on_agitation(self,event):
        global ev_dialept_10
        ev_dialept_10=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nUser selected: \nAgitation\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAgitation\n"
        self.Close()
        
    def on_otherdialept(self,event):
        global ev_dialept_11
        ev_dialept_11=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nOther dialeptic behavior\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOther dialeptic behavior\n"
        self.Close()
        
    def on_disoriented(self,event):
        global ev_dialept_12
        ev_dialept_12=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nDisoriended behavior\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDisoriented behavior\n"
        self.Close()
#-------------------------------------------------------------------------------------------------------------------------------------------        
#-------------------------------------------------------------------------------------------------------------------------------------------                
class MyFrame_types_simple_move(wx.Frame): #Class definition for GUI 'Types of simple movements'.   
    def __init__(self):
        super().__init__(parent=None, title='Types of simple motor behaviors', size=(1000, 400))
        panel = wx.Panel(self)
            
        tonic_btn = wx.Button(panel, label='Tonic', pos=(5, 105))
        tonic_btn.Bind(wx.EVT_BUTTON, self.on_tonic)
                
        dystonic_btn = wx.Button(panel, label='Dystonic', pos=(195, 105))
        dystonic_btn.Bind(wx.EVT_BUTTON, self.on_dystonic)
                
        fencer_btn = wx.Button(panel, label='Fencer', pos=(380, 105))
        fencer_btn.Bind(wx.EVT_BUTTON, self.on_fencer)
                
        clonic_btn = wx.Button(panel, label='Clonic', pos=(5, 145))
        clonic_btn.Bind(wx.EVT_BUTTON, self.on_clonic)
                
        myoclonic_btn = wx.Button(panel, label='Myoclonic', pos=(195, 145))
        myoclonic_btn.Bind(wx.EVT_BUTTON, self.on_myoclonic)
        
        negmyoclon_btn = wx.Button(panel, label='Negative myoclonus', pos=(380, 145))
        negmyoclon_btn.Bind(wx.EVT_BUTTON, self.on_negmyoclon)
        
        atonic_btn = wx.Button(panel, label='Atonic', pos=(5, 185))
        atonic_btn.Bind(wx.EVT_BUTTON, self.on_atonic)
                
        atactic_btn = wx.Button(panel, label='Atactic', pos=(195, 185))
        atactic_btn.Bind(wx.EVT_BUTTON, self.on_atactic)
        
        apractic_btn = wx.Button(panel, label='Apractic', pos=(380, 185))
        apractic_btn.Bind(wx.EVT_BUTTON, self.on_apractic)
        
        tremor_btn = wx.Button(panel, label='Tremor', pos=(5, 225))
        tremor_btn.Bind(wx.EVT_BUTTON, self.on_tremor)
        
        paralysis_btn = wx.Button(panel, label='Paralysis', pos=(195, 225))
        paralysis_btn.Bind(wx.EVT_BUTTON, self.on_paralysis)
        
        espasm_btn = wx.Button(panel, label='Epileptic spasm', pos=(380, 225))
        espasm_btn.Bind(wx.EVT_BUTTON, self.on_espasm)
        
#        plms_btn = wx.Button(panel, label='PLMS', pos=(575, 405))
#        plms_btn.Bind(wx.EVT_BUTTON, self.on_plms)
        
        fof_btn = wx.Button(panel, label='Figure of 4', pos=(575, 105))
        fof_btn.Bind(wx.EVT_BUTTON, self.on_fof)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(575, 280))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
                
    def on_tonic(self, event):
        global ev_typesimpmove_1
        ev_typesimpmove_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nTonic movement\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nTonic movement\n"
        self.Close()
               
    def on_dystonic(self, event):
        global ev_typesimpmove_2
        ev_typesimpmove_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nDystonic movement\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDystonic movement\n"
        self.Close()
                
    def on_fencer(self,event):
        global ev_typesimpmove_3
        ev_typesimpmove_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nFencer posturing\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nFencer posturing\n"
        self.Close()
                
    def on_clonic(self,event):
        global ev_typesimpmove_4
        ev_typesimpmove_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nClonic movement\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nClonic movement\n"
        self.Close()
                
    def on_myoclonic(self,event):
        global ev_typesimpmove_5
        ev_typesimpmove_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nMyoclonus\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMyoclonus\n"
        self.Close()
                
    def on_negmyoclon(self,event):
        global ev_typesimpmove_6
        ev_typesimpmove_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nNegative myoclonus\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNegative myoclonus\n"
        self.Close()
                
    def on_atonic(self,event):
        global ev_typesimpmove_7
        ev_typesimpmove_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nAtonic\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAtonic\n"
        self.Close()
                
    def on_atactic(self,event):
        global ev_typesimpmove_8
        ev_typesimpmove_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nAtactic movement\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAtactic movement\n"
        self.Close()
        
    def on_apractic(self,event):
        global ev_typesimpmove_9
        ev_typesimpmove_9=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nApractic movement\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nApractic movement\n"
        self.Close()
        
    def on_tremor(self,event):
        global ev_typesimpmove_10
        ev_typesimpmove_10=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nTremor\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nTremor\n"
        self.Close()
        
    def on_paralysis(self,event):
        global ev_typesimpmove_11
        ev_typesimpmove_11=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nParalysis\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nParalysis\n"
        self.Close()
        
    def on_espasm(self,event):
        global ev_typesimpmove_12
        ev_typesimpmove_12=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nEpileptic spasm\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nEpileptic spasm\n"
        self.Close()
        
        
    def on_fof(self,event):
        global ev_typesimpmove_14
        ev_typesimpmove_14=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nFigure of 4\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nFigure of 4\n"
        self.Close()
#------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------
class MyFrame_jacson(wx.Frame): #Class definition for GUI 'Types of simple movements'.   
    def __init__(self):
        super().__init__(parent=None, title='Types of simple movements', size=(1000, 700))
        panel = wx.Panel(self)
            
        nojack_btn = wx.Button(panel, label='No jacksonian march', pos=(5, 405))
        nojack_btn.Bind(wx.EVT_BUTTON, self.on_nojack)
                
        rtjack_btn = wx.Button(panel, label='Rigt jacksonian march', pos=(295, 405))
        rtjack_btn.Bind(wx.EVT_BUTTON, self.on_rtjack)
                
        ltjack_btn = wx.Button(panel, label='Left jacksonian march', pos=(585, 405))
        ltjack_btn.Bind(wx.EVT_BUTTON, self.on_ltjack)
                        
        next_step_btn = wx.Button(panel, label='Next step', pos=(675, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
                
    def on_nojack(self, event):
        global ev_j_1
        ev_j_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNo jacksonian march\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNo jacksonian march\n"
        self.Close()
               
    def on_rtjack(self, event):
        global ev_j_2
        ev_j_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRigt jacsonian march\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRigt jacsonian march\n"
        
                
    def on_ltjack(self,event):
        global ev_j_3
        ev_j_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLeft jacsonian march\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLeft jacsonian march\n"        
#-------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------
class MyFrame_types_automatisms(wx.Frame):   #Class definition for GUI 'Types of automatismss'.  
    def __init__(self):
        super().__init__(parent=None, title='Types of automatisms', size=(1000, 700))
        panel = wx.Panel(self)
            
        gestrepet_btn = wx.Button(panel, label='Gesticulation/repetitive movements', pos=(5, 405))
        gestrepet_btn.Bind(wx.EVT_BUTTON, self.on_gestrepet)
                
        semipurp_btn = wx.Button(panel, label='Semipurposeful movements', pos=(295, 405))
        semipurp_btn.Bind(wx.EVT_BUTTON, self.on_semipurp)
                
        limbrais_btn = wx.Button(panel, label='Limb raising', pos=(485, 405))
        limbrais_btn.Bind(wx.EVT_BUTTON, self.on_limbrais)
        
        nosewip_btn = wx.Button(panel, label='Nose wiping', pos=(675, 405))
        nosewip_btn.Bind(wx.EVT_BUTTON, self.on_nosewip)
                
        earplug_btn = wx.Button(panel, label='Ear plugging', pos=(5, 445))
        earplug_btn.Bind(wx.EVT_BUTTON, self.on_earplug)
                
        gmanip_btn = wx.Button(panel, label='Genital manipulations', pos=(295, 445))
        gmanip_btn.Bind(wx.EVT_BUTTON, self.on_gmanip)
        
        step_btn = wx.Button(panel, label='Stepping', pos=(485, 445))
        step_btn.Bind(wx.EVT_BUTTON, self.on_step)
        
        pedal_btn = wx.Button(panel, label='Pedalling', pos=(675, 445))
        pedal_btn.Bind(wx.EVT_BUTTON, self.on_pedal)
        
        oral_btn = wx.Button(panel, label='Oral automatisms', pos=(5, 485))
        oral_btn.Bind(wx.EVT_BUTTON, self.on_oral)
                
        yawning_btn = wx.Button(panel, label='Yawning', pos=(295, 485))
        yawning_btn.Bind(wx.EVT_BUTTON, self.on_yawning)
        
        facexpr_btn = wx.Button(panel, label='Facial expression', pos=(485, 485))
        facexpr_btn.Bind(wx.EVT_BUTTON, self.on_facexpr)
        
        spitting_btn = wx.Button(panel, label='Spitting', pos=(675, 485))
        spitting_btn.Bind(wx.EVT_BUTTON, self.on_spitting)
        
        vomit_btn = wx.Button(panel, label='Vomiting', pos=(5, 525))
        vomit_btn.Bind(wx.EVT_BUTTON, self.on_vomit)
                
        cough_btn = wx.Button(panel, label='Cough', pos=(295, 525))
        cough_btn.Bind(wx.EVT_BUTTON, self.on_cough)
        
        sneez_btn = wx.Button(panel, label='Sneezing', pos=(485, 525))
        sneez_btn.Bind(wx.EVT_BUTTON, self.on_sneez)
        
        pelvthrust_btn = wx.Button(panel, label='Pelvic thrust', pos=(675, 525))
        pelvthrust_btn.Bind(wx.EVT_BUTTON, self.on_pelvthrust)
        
        urinary_btn = wx.Button(panel, label='Urination behavior', pos=(5, 565))
        urinary_btn.Bind(wx.EVT_BUTTON, self.on_urinary)
        
        defecat_btn = wx.Button(panel, label='Defecation behavior', pos=(295, 565))
        defecat_btn.Bind(wx.EVT_BUTTON, self.on_defecat)
        
        handmouthing_btn = wx.Button(panel, label='Hand mouthing', pos=(485, 565))
        handmouthing_btn.Bind(wx.EVT_BUTTON, self.on_handmouthing)
        
        otherautomat_btn = wx.Button(panel, label='Other', pos=(675, 565))
        otherautomat_btn.Bind(wx.EVT_BUTTON, self.on_otherutomat)
      
        next_step_btn = wx.Button(panel, label='Next step', pos=(850, 620))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
               
    def on_gestrepet(self, event):
        global ev_typeautomat_1
        ev_typeautomat_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nGesticulation/repetitive movements\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nGesticulation/repetitive movements\n"
        self.Close()
               
    def on_semipurp(self, event):
        global ev_typeautomat_2
        ev_typeautomat_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nSemipurposeful movements\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSemipurposeful movements\n"
        self.Close()
                
    def on_limbrais(self,event):
        global ev_typeautomat_3
        ev_typeautomat_3=1
        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLimb raising\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt hemibody\n"
        self.Close()
                
    def on_nosewip(self,event):
        global ev_typeautomat_4
        ev_typeautomat_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nNose wiping\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNose wiping\n"
        self.Close()
                
    def on_earplug(self,event):
        global ev_typeautomat_5
        ev_typeautomat_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nEar plugging\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nEar plugging\n"
        self.Close()
                
    def on_gmanip(self,event):
        global ev_typeautomat_6
        ev_typeautomat_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nGenital manipulations\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nGenital manipulations\n"
        self.Close()
                
    def on_step(self,event):
        global ev_typeautomat_7
        ev_typeautomat_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nStepping\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nStepping\n"
        self.Close()
                
    def on_pedal(self,event):
        global ev_typeautomat_8
        ev_typeautomat_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nPedalling\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPedalling\n"
        self.Close()
        
    def on_oral(self,event):
        global ev_typeautomat_9
        ev_typeautomat_9=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nOral automatism\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOral automatism\n"
        self.Close()
        
    def on_yawning(self,event):
        global ev_typeautomat_10
        ev_typeautomat_10=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nYawning\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nYawning\n"
        self.Close()
        
    def on_facexpr(self,event):
        global ev_typeautomat_11
        ev_typeautomat_11=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nFacial expression\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nFacial expression\n"
        self.Close()
        
    def on_spitting(self,event):
        global ev_typeautomat_12
        ev_typeautomat_12=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nSpitting\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSpitting\n"
        self.Close()
        
    def on_vomit(self,event):
        global ev_typeautomat_13
        ev_typeautomat_13=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nVomiting\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nVomiting\n"
        self.Close()
        
    def on_cough(self,event):
        global ev_typeautomat_14
        ev_typeautomat_14=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nCough\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nCough\n"
        self.Close()
        
    def on_sneez(self,event):
        global ev_typeautomat_15
        ev_typeautomat_15=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nSneezing\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSneezing\n"
        self.Close()
        
    def on_pelvthrust(self,event):
        global ev_typeautomat_16
        ev_typeautomat_16=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nPelvic thrust\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPelvic thrust"
        self.Close()
        
    def on_urinary(self,event):
        global ev_typeautomat_17
        ev_typeautomat_17=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nUrinary behavior\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUrinary behavior\n"
        self.Close()
        
    def on_defecat(self,event):
        global ev_typeautomat_18
        ev_typeautomat_18=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nDefecation behavior\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDefecation behavior\n"
        self.Close()
        
    def on_handmouthing(self,event):
        global ev_typeautomat_19
        ev_typeautomat_19=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nHand mouthing\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nHand mouthing\n"
        self.Close()
        
    def on_otherutomat(self,event):
        global ev_typeautomat_20
        ev_typeautomat_20=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nOther automatism\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOther automatismy\n"
        self.Close()
#-------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------
class MyFrame_face_automat(wx.Frame): #Class definition for GUI 'Automatisms: facial expression'.   
    def __init__(self):
        super().__init__(parent=None, title='Automatisms: facial expression', size=(1000, 500))
        panel = wx.Panel(self)
            
        star_btn = wx.Button(panel, label='Staring', pos=(5, 205))
        star_btn.Bind(wx.EVT_BUTTON, self.on_star)
                
        disguest_btn = wx.Button(panel, label='Disguesting', pos=(195, 205))
        disguest_btn.Bind(wx.EVT_BUTTON, self.on_disguest)
                
        hapy_btn = wx.Button(panel, label='Hapy', pos=(385, 205))
        hapy_btn.Bind(wx.EVT_BUTTON, self.on_hapy)
        
        sad_btn = wx.Button(panel, label='Sad', pos=(575, 205))
        sad_btn.Bind(wx.EVT_BUTTON, self.on_sad)
                
        smile_btn = wx.Button(panel, label='Smile', pos=(5, 245))
        smile_btn.Bind(wx.EVT_BUTTON, self.on_smile)
                
        shapo_btn = wx.Button(panel, label='Shapo de gendarm face', pos=(195, 245))
        shapo_btn.Bind(wx.EVT_BUTTON, self.on_shapo)
        
        laugh_g_btn = wx.Button(panel, label='Laughter grimacing', pos=(385, 245))
        laugh_g_btn.Bind(wx.EVT_BUTTON, self.on_laugh_g)
        
        fearface_g_btn = wx.Button(panel, label='Fear', pos=(575, 245))
        fearface_g_btn.Bind(wx.EVT_BUTTON, self.on_fearface)
        
        unspecmimics_btn = wx.Button(panel, label='Uncpecified facial expression', pos=(195, 295))
        unspecmimics_btn.Bind(wx.EVT_BUTTON, self.on_unspecmimics)
        
        othermimics_btn = wx.Button(panel, label='Other facial expression', pos=(385, 295))
        othermimics_btn.Bind(wx.EVT_BUTTON, self.on_othermimics)
        
        unspec_g_btn = wx.Button(panel, label='Unspecific grimacing', pos=(575, 295))
        unspec_g_btn.Bind(wx.EVT_BUTTON, self.on_unspec_g)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(675, 380))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
                
    def on_star(self, event):
        global ev_faceautomat_1
        ev_faceautomat_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nStaring\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nStaring\n"
        self.Close()
               
    def on_disguest(self, event):
        global ev_faceautomat_2
        ev_faceautomat_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nDisguesting\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDisguesting\n"
        self.Close()
                
    def on_hapy(self,event):
        global ev_faceautomat_3
        ev_faceautomat_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nHappy\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nHappy\n"
        self.Close()
                
    def on_sad(self,event):
        global ev_faceautomat_4
        ev_faceautomat_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nSad\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSad\n"
        self.Close()
                
    def on_smile(self,event):
        global ev_faceautomat_5
        ev_faceautomat_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nSmile\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSmile\n"
        self.Close()
                
    def on_shapo(self,event):
        global ev_faceautomat_6
        ev_faceautomat_6=1
        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nShapo de gendarm face\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nShapo de gendarm face\n"
        self.Close()
                
    def on_laugh_g(self,event):
        global ev_faceautomat_7
        ev_faceautomat_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLaughter grimacing\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLaughter grimacing\n"
        self.Close()
                
    def on_unspec_g(self,event):
        global ev_faceautomat_8
        ev_faceautomat_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nUnspecified grimacing\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUnspecified grimacing\n"
        self.Close()
        
    def on_fearface(self,event):
        global ev_faceautomat_9
        ev_faceautomat_9=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nFear\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nFear\n"
        self.Close()
        
    def on_unspecmimics(self,event):
        global ev_faceautomat_10
        ev_faceautomat_10=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nUnspecified facial expression\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUnspecified facial expression\n"
        self.Close()
        
    def on_othermimics(self,event):
        global ev_faceautomat_11
        ev_faceautomat_11=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nOther facial expression\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOther facial expression\n"
        self.Close()
#-----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------
class MyFrame_autonom(wx.Frame): #Class definition for GUI 'Types of autonomic phenomena'.  
    def __init__(self):
        super().__init__(parent=None, title='Types of autonomic phenomena', size=(1000, 700))
        panel = wx.Panel(self)
            
        hypervent_btn = wx.Button(panel, label='Hyperventilation', pos=(5, 405))
        hypervent_btn.Bind(wx.EVT_BUTTON, self.on_hypervent)
                
        hypovent_btn = wx.Button(panel, label='Hypoventilation', pos=(195, 405))
        hypovent_btn.Bind(wx.EVT_BUTTON, self.on_hypovent)
                
        apnea_btn = wx.Button(panel, label='Apnea', pos=(385, 405))
        apnea_btn.Bind(wx.EVT_BUTTON, self.on_apnea)
        
        dyspnea_btn = wx.Button(panel, label='Dyspnea', pos=(575, 405))
        dyspnea_btn.Bind(wx.EVT_BUTTON, self.on_dyspnea)
                
        stridor_btn = wx.Button(panel, label='Stridor', pos=(5, 445))
        stridor_btn.Bind(wx.EVT_BUTTON, self.on_stridor)
                
        piloerect_btn = wx.Button(panel, label='Piloerection', pos=(195, 445))
        piloerect_btn.Bind(wx.EVT_BUTTON, self.on_piloerect)
        
        palor_btn = wx.Button(panel, label='Palor', pos=(385, 445))
        palor_btn.Bind(wx.EVT_BUTTON, self.on_palor)
        
        flash_btn = wx.Button(panel, label='Flashimg', pos=(575, 445))
        flash_btn.Bind(wx.EVT_BUTTON, self.on_flash)
        
        cyanosis_btn = wx.Button(panel, label='Cyanosis', pos=(5, 485))
        cyanosis_btn.Bind(wx.EVT_BUTTON, self.on_cyanosis)
                
        sweat_btn = wx.Button(panel, label='Sweating', pos=(195, 485))
        sweat_btn.Bind(wx.EVT_BUTTON, self.on_sweat)
        
        mydriasis_btn = wx.Button(panel, label='Mydriasis', pos=(385, 485))
        mydriasis_btn.Bind(wx.EVT_BUTTON, self.on_mydriasis)
        
        miosis_btn = wx.Button(panel, label='Miosis', pos=(575, 485))
        miosis_btn.Bind(wx.EVT_BUTTON, self.on_miosis)
        
        ch_st_btn = wx.Button(panel, label='Cheyne-Stoke respiration', pos=(5, 525))
        ch_st_btn.Bind(wx.EVT_BUTTON, self.on_ch_st)
                
        irreg_resp_btn = wx.Button(panel, label='Irregular respiration', pos=(195, 525))
        irreg_resp_btn.Bind(wx.EVT_BUTTON, self.on_irreg_resp)
        
        hiccups_btn = wx.Button(panel, label='Hiccups', pos=(385, 525))
        hiccups_btn.Bind(wx.EVT_BUTTON, self.on_hiccups)
        
        salivation_btn = wx.Button(panel, label='Salivation', pos=(585, 525))
        salivation_btn.Bind(wx.EVT_BUTTON, self.on_salivation)
       
        urinloss_btn = wx.Button(panel, label='Urine loss*', pos=(5, 565))
        urinloss_btn.Bind(wx.EVT_BUTTON, self.on_urinloss)
        
        fecaloss_btn = wx.Button(panel, label='Fecal loss*', pos=(195, 565))
        fecaloss_btn.Bind(wx.EVT_BUTTON, self.on_fecaloss)
        
        otherautonom_btn = wx.Button(panel, label='Other', pos=(385, 565))
        otherautonom_btn.Bind(wx.EVT_BUTTON, self.on_otherautonom)
      
        next_step_btn = wx.Button(panel, label='Next step', pos=(775, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
#                
    def on_hypervent(self, event):
        global ev_autonom_1
        ev_autonom_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nHyperventilation\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nHyperventilation\n"
        self.Close()
               
    def on_hypovent(self, event):
        global ev_autonom_2
        ev_autonom_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nHypoventilation\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nHypoventilation\n"
        self.Close()
                
    def on_apnea(self,event):
        global ev_autonom_3
        ev_autonom_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nApnea\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nApnea\n"
        self.Close()
                
    def on_dyspnea(self,event):
        global ev_autonom_4
        ev_autonom_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nDyspnea\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDyspnea\n"
        self.Close()
                
    def on_stridor(self,event):
        global ev_autonom_5
        ev_autonom_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nStridor\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nStridor\n"
        self.Close()
                
    def on_piloerect(self,event):
        global ev_autonom_6
        ev_autonom_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nPiloerection\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPiloerection\n"
        self.Close()
                
    def on_palor(self,event):
        global ev_autonom_7
        ev_autonom_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nPalor\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPalor\n"
        self.Close()
                
    def on_flash(self,event):
        global ev_autonom_8
        ev_autonom_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nFlash\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nFlash\n"
        self.Close()
        
    def on_cyanosis(self,event):
        global ev_autonom_9
        ev_autonom_9=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nCyanosis\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nCyanosis\n"
        self.Close()
        
    def on_sweat(self,event):
        global ev_autonom_10
        ev_autonom_10=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nSweat\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSweat\n"
        self.Close()
        
    def on_mydriasis(self,event):
        global ev_autonom_11
        ev_autonom_11=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nMydriasis\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMydriasis\n"
        self.Close()
        
    def on_miosis(self,event):
        global ev_autonom_12
        ev_autonom_12=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nMiosis\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMiosis\n"
        self.Close()
       
    def on_ch_st(self,event):
        global ev_autonom_13
        ev_autonom_13=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nCheyne–Stokes respiration\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nCheyne–Stokes respiration\n"
        self.Close()
        
    def on_irreg_resp(self,event):
        global ev_autonom_14
        ev_autonom_14=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nIrregular respiration\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nIrregular respiration\n"
        self.Close()
        
    def on_hiccups(self,event):
        global ev_autonom_15
        ev_autonom_15=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nHiccups\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nHiccups\n"
        self.Close()
        
    def on_salivation(self,event):
        global ev_autonom_16
        ev_autonom_16=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nSalivation\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSalivation\n"
        self.Close()
        
    def on_urinloss(self,event):
        global ev_autonom_17
        ev_autonom_17=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nUrine loss without urination behavior\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUrine loss without urination behavior\n"
        self.Close()
        
    def on_fecaloss(self,event):
        global ev_autonom_18
        ev_autonom_18=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nFecal loss without defecation behavior\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nFecal loss without defecation behavior\n"
        self.Close()
        
    def on_otherautonom(self,event):
        global ev_autonom_19
        ev_autonom_19=1
        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nOther autonomic phenomenon\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOther autonomic phenomenon\n"
        self.Close()
#----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------
class MyFrame_pupil_size(wx.Frame):  #Class definition for GUI 'Pupil size change'.   
    def __init__(self):
        super().__init__(parent=None, title='Pupil size change', size=(1000, 400))
        panel = wx.Panel(self)
            
        rpupstr_btn = wx.Button(panel, label='Right strong', pos=(105, 150))
        rpupstr_btn.Bind(wx.EVT_BUTTON, self.on_rpupstr)
                
        lpupstr_btn = wx.Button(panel, label='Left strong', pos=(295, 150))
        lpupstr_btn.Bind(wx.EVT_BUTTON, self.on_lpupstr)
        
        rpupw_btn = wx.Button(panel, label='Right weak', pos=(105, 200))
        rpupw_btn.Bind(wx.EVT_BUTTON, self.on_rpupw)
                
        lpupw_btn = wx.Button(panel, label='Left weak', pos=(295, 200))
        lpupw_btn.Bind(wx.EVT_BUTTON, self.on_lpupw)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(475, 230))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
        
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
                
    def on_rpupstr(self, event):
        global ev_pupsize_1
        ev_pupsize_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRight pupil: strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRight pupil: strong\n"
               
    def on_lpupstr(self, event):
        global ev_pupsize_2
        ev_pupsize_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLeft pupil: strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLeft pupil: strong\n"
                
    def on_rpupw(self,event):
        global ev_pupsize_3
        ev_pupsize_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRight pupil: weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRight pupil: weak\n"
               
    def on_lpupw(self,event):
        global ev_pupsize_4
        ev_pupsize_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLeft pupil: weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLeft pupil: weak\n"
#-----------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------
class MyFrame_eyemove(wx.Frame): #Class definition for GUI 'Pupil size change'.   
    def __init__(self):
        super().__init__(parent=None, title='Eye/eyelid movement', size=(1000, 800))
        panel = wx.Panel(self)
            
        deviat_btn = wx.Button(panel, label='Deviation', pos=(5, 305))
        deviat_btn.Bind(wx.EVT_BUTTON, self.on_deviat)
                
        nyst_btn = wx.Button(panel, label='Nystagmus', pos=(180, 305))
        nyst_btn.Bind(wx.EVT_BUTTON, self.on_nyst)
                
        chaot_btn = wx.Button(panel, label='Chaotic eye movement', pos=(350, 305))
        chaot_btn.Bind(wx.EVT_BUTTON, self.on_chaot)
                
        blink_btn = wx.Button(panel, label='Blinking', pos=(5, 445))
        blink_btn.Bind(wx.EVT_BUTTON, self.on_blink)
                
        bspasm_btn = wx.Button(panel, label='Blepharospasm', pos=(180, 445))
        bspasm_btn.Bind(wx.EVT_BUTTON, self.on_bspasm)
        
        eyelret_btn = wx.Button(panel, label='Eyelid retraction', pos=(350, 445))
        eyelret_btn.Bind(wx.EVT_BUTTON, self.on_eyelret)
        
        eyelmyoclon_btn = wx.Button(panel, label='Eyelid myoclonus', pos=(5, 490))
        eyelmyoclon_btn.Bind(wx.EVT_BUTTON, self.on_eyelmyoclon)
        
        eyelflutter_btn = wx.Button(panel, label='Eyelid flutter with eyes closed', pos=(180, 490))
        eyelflutter_btn.Bind(wx.EVT_BUTTON, self.on_eyelflutter)
        
        eyesopen_btn = wx.Button(panel, label='Both eyes open', pos=(5, 535))
        eyesopen_btn.Bind(wx.EVT_BUTTON, self.on_eyesopen)
        
        eyesclosed_btn = wx.Button(panel, label='Both eyes closed', pos=(180, 535))
        eyesclosed_btn.Bind(wx.EVT_BUTTON, self.on_eyesclosed)
        
        rteyeclosed_btn = wx.Button(panel, label='One eye closed: Rt', pos=(350, 535))
        rteyeclosed_btn.Bind(wx.EVT_BUTTON, self.on_rteyeclosed)
        
        lteyeclosed_btn = wx.Button(panel, label='One eye closed: Lt', pos=(500, 535))
        lteyeclosed_btn.Bind(wx.EVT_BUTTON, self.on_lteyeclosed)
     
        next_step_btn = wx.Button(panel, label='Next step', pos=(630, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                        
                                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
                
    def on_deviat(self, event):
        global ev_eyemove_1
        ev_eyemove_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nEye/gaze deviation\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nEye/gaze deviation\n"
        self.Close()
               
    def on_nyst(self, event):
        global ev_eyemove_2
        ev_eyemove_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNystagmus\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNystagmus\n"
        self.Close()
                
    def on_chaot(self,event):
        global ev_eyemove_3
        ev_eyemove_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nChaotic eye movements\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nChaotic eye movements\n"
        self.Close()
                
    def on_blink(self,event):
        global ev_eyemove_4
        ev_eyemove_4=1       
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nBlinking\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nBlinking\n"
        self.Close()
                
    def on_bspasm(self,event):
        global ev_eyemove_5
        ev_eyemove_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nBlepharospasm\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nBlepharospasm\n"
        self.Close()
                
    def on_eyelret(self,event):
        global ev_eyemove_6
        ev_eyemove_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nEyelid retraction\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nEyelid retraction\n"
        self.Close()
        
    def on_eyelmyoclon(self,event):
        global ev_eyemove_7
        ev_eyemove_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nEyelid myoclonus\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nEyelid myoclonus\n"
        self.Close()
        
    def on_eyelflutter(self,event):
        global ev_eyemove_8
        ev_eyemove_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nEyelid flutter with eyes closed\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nEyelid flutter with eyes closed\n"
        self.Close()
        
    def on_eyesopen(self,event):
        global ev_eyemove_9
        ev_eyemove_9=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nBoth eyes open\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nBoth eyes open\n"
        self.Close()
        
    def on_eyesclosed(self,event):
        global ev_eyemove_10
        ev_eyemove_10=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nBoth eyes closed\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nBoth eyes closed\n"
        self.Close()
        
    def on_rteyeclosed(self,event):
        global ev_eyemove_11
        ev_eyemove_11=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nOne eye closed: Rt\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOne eye closed: Rt\n"
        self.Close()
            
    def on_lteyeclosed(self,event):
        global ev_eyemove_12
        ev_eyemove_12=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nOne eye closed: Lt\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOne eye closed: Lt\n"
        self.Close()
#-----------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------
class MyFrame_eyemove_nodirect(wx.Frame):  #Class definition for GUI 'Side of eye/eyelid movement'.   
    def __init__(self):
        super().__init__(parent=None, title='Side of eye/eyelid movement', size=(1000, 400))
        panel = wx.Panel(self)
            
        rstr_btn = wx.Button(panel, label='Rt strong', pos=(205, 105))
        rstr_btn.Bind(wx.EVT_BUTTON, self.on_rstr)
                
        lstr_btn = wx.Button(panel, label='Lt strong', pos=(495, 105))
        lstr_btn.Bind(wx.EVT_BUTTON, self.on_lstr)
                

        rw_btn = wx.Button(panel, label='Rt weak', pos=(205, 205))
        rw_btn.Bind(wx.EVT_BUTTON, self.on_rw)
                
        lw_btn = wx.Button(panel, label='Lt weak', pos=(495, 205))
        lw_btn.Bind(wx.EVT_BUTTON, self.on_lw)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(600, 250))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
        
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
                
    def on_rstr(self, event):
        global ev_eyeside_1
        ev_eyeside_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRight eye/eyelid: strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRight eye/eyelid: strong\n"
                       
    def on_lstr(self, event):
        global ev_eyeside_2
        ev_eyeside_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLeft eye/eyelid: strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLeft eye/eyelid: strong\n"
                       
    def on_rw(self,event):
        global ev_eyeside_3
        ev_eyeside_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRight eye/eyelid: weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRight eye/eyelid: weak\n"
                        
    def on_lw(self,event):
        global ev_eyeside_4
        ev_eyeside_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLeft eye/eyelid: weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLeft eye/eyelid: weak\n"
#----------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------
class MyFrame_eyemove_side_direction_power(wx.Frame):  #Class definition for GUI 'Side direction and power of eye movements'.  
    def __init__(self):
        super().__init__(parent=None, title='Side direction and power of eye movements', size=(1000, 700))
        panel = wx.Panel(self)
            
        rrs_btn = wx.Button(panel, label='R eye rightwise strong', pos=(5, 405))
        rrs_btn.Bind(wx.EVT_BUTTON, self.on_rrs)
                
        rls_btn = wx.Button(panel, label='R eye leftwise strong', pos=(295, 405))
        rls_btn.Bind(wx.EVT_BUTTON, self.on_rls)
                
        rus_btn = wx.Button(panel, label='R eye upwise strong', pos=(485, 405))
        rus_btn.Bind(wx.EVT_BUTTON, self.on_rus)
        
        rds_btn = wx.Button(panel, label='R eye downwise strong', pos=(675, 405))
        rds_btn.Bind(wx.EVT_BUTTON, self.on_rds)
                
        rrw_btn = wx.Button(panel, label='R eye rightwise weak', pos=(5, 445))
        rrw_btn.Bind(wx.EVT_BUTTON, self.on_rrw)
                
        rlw_btn = wx.Button(panel, label='R eye leftwise weak', pos=(295, 445))
        rlw_btn.Bind(wx.EVT_BUTTON, self.on_rlw)
        
        ruw_btn = wx.Button(panel, label='R eye upwise weak', pos=(485, 445))
        ruw_btn.Bind(wx.EVT_BUTTON, self.on_ruw)
        
        rdw_btn = wx.Button(panel, label='R eye downwise weak', pos=(675, 445))
        rdw_btn.Bind(wx.EVT_BUTTON, self.on_rdw)
        
        lrs_btn = wx.Button(panel, label='L eye rightwise strong', pos=(5, 485))
        lrs_btn.Bind(wx.EVT_BUTTON, self.on_lrs)
                
        lls_btn = wx.Button(panel, label='L eye leftwise strong', pos=(295, 485))
        lls_btn.Bind(wx.EVT_BUTTON, self.on_lls)
        
        lus_btn = wx.Button(panel, label='L eye upwise strong', pos=(485, 485))
        lus_btn.Bind(wx.EVT_BUTTON, self.on_lus)
        
        lds_btn = wx.Button(panel, label='L eye downwise strong', pos=(675, 485))
        lds_btn.Bind(wx.EVT_BUTTON, self.on_lds)
        
        lrw_st_btn = wx.Button(panel, label='L eye rightwise weak', pos=(5, 525))
        lrw_st_btn.Bind(wx.EVT_BUTTON, self.on_lrw)
                
        llw_btn = wx.Button(panel, label='L eye leftwise weak', pos=(295, 525))
        llw_btn.Bind(wx.EVT_BUTTON, self.on_llw)
        
        luw_btn = wx.Button(panel, label='L eye upwise weak', pos=(485, 525))
        luw_btn.Bind(wx.EVT_BUTTON, self.on_luw)
        
        ldw_btn = wx.Button(panel, label='L eye downwise weak', pos=(675, 525))
        ldw_btn.Bind(wx.EVT_BUTTON, self.on_ldw)
             
        next_step_btn = wx.Button(panel, label='Next step', pos=(775, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
#                
    def on_rrs(self, event):
        global ev_eyesdp_1
        ev_eyesdp_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRight eye moves rightwise strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRight eye moves rightwise strong\n"
               
    def on_rls(self, event):
        global ev_eyesdp_2
        ev_eyesdp_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRight eye moves leftwise strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRight eye moves leftwise strong\n"
                
    def on_rus(self,event):
        global ev_eyesdp_3
        ev_eyesdp_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRight eye moves upward strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRight eye moves upward strong\n"
                
    def on_rds(self,event):
        global ev_eyesdp_4
        ev_eyesdp_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRight eye moves downward strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRight eye moves downward strong\n"
                
    def on_rrw(self,event):
        global ev_eyesdp_5
        ev_eyesdp_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRight eye moves rightwise weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRight eye moves rightwise weak\n"
                
    def on_rlw(self,event):
        global ev_eyesdp_6
        ev_eyesdp_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRight eye moves leftwise weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRight eye moves leftwise weak\n"
                
    def on_ruw(self,event):
        global ev_eyesdp_7
        ev_eyesdp_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRight eye moves upward weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRight eye moves upward weak\n"
                
    def on_rdw(self,event):
        global ev_eyesdp_8
        ev_eyesdp_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRight eye moves downward weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRight eye moves downward weak\n"
        
    def on_lrs(self,event):
        global ev_eyesdp_9
        ev_eyesdp_9=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLeft eye moves rightwise strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLeft eye moves rightwise strong\n"
        
    def on_lls(self,event):
        global ev_eyesdp_10
        ev_eyesdp_10=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLeft eye moves leftwise strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLeft eye moves leftwise strong\n"
        
    def on_lus(self,event):
        global ev_eyesdp_11
        ev_eyesdp_11=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLeft eye moves upward strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLeft eye moves upward strong\n"
        
    def on_lds(self,event):
        global ev_eyesdp_12
        ev_eyesdp_12=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLeft eye moves downward strong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLeft eye moves downward strong\n"
       
    def on_lrw(self,event):
        global ev_eyesdp_13
        ev_eyesdp_13=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLeft eye moves rightwise weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLeft eye moves rightwise weak\n"
       
    def on_llw(self,event):
        global ev_eyesdp_14
        ev_eyesdp_14=1
        print('User selected: \nLeft eye moves leftwise weak\n')
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLeft eye moves leftwise weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLeft eye moves leftwise weak\n"
       
    def on_luw(self,event):
        global ev_eyesdp_15
        ev_eyesdp_15=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLeft eye moves upward weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLeft eye moves upward weak\n"
        
    def on_ldw(self,event):
        global ev_eyesdp_16
        ev_eyesdp_16=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLeft eye moves downward weak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLeft eye moves downward weak\n"
#---------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------
class MyFrame_hypermotor(wx.Frame):  #Class definition for GUI 'Hyperkinetic behaviors'.   
    def __init__(self):
        super().__init__(parent=None, title='Hyperkinetic behaviors', size=(1000, 700))
        panel = wx.Panel(self)
            
        bmbp_btn = wx.Button(panel, label='Bimanual-bipedal automatism', pos=(5, 205))
        bmbp_btn.Bind(wx.EVT_BUTTON, self.on_bmbp)
                
        gyrr_btn = wx.Button(panel, label='Gyratory to the right', pos=(5, 355))
        gyrr_btn.Bind(wx.EVT_BUTTON, self.on_gyrr)
                
        gyrl_btn = wx.Button(panel, label='Gyratory to the left', pos=(305, 355))
        gyrl_btn.Bind(wx.EVT_BUTTON, self.on_gyrl)
        
        rockingbaf_btn = wx.Button(panel, label='Rocking back and forth', pos=(5, 505))
        rockingbaf_btn.Bind(wx.EVT_BUTTON, self.on_rockingbaf)
        
        rockingsts_btn = wx.Button(panel, label='Rocking side-to-side', pos=(305, 505))
        rockingsts_btn.Bind(wx.EVT_BUTTON, self.on_rockingsts)
        
        attempttoprevent_btn = wx.Button(panel, label='Attempt of patient to prevent movements', pos=(305, 205))
        attempttoprevent_btn.Bind(wx.EVT_BUTTON, self.on_attempttoprevent)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(575, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
        
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
               
    def on_bmbp(self, event):
        global ev_hypermotor_1
        ev_hypermotor_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nBimanual-bipedal automatism\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nBimanual-bipedal automatism\n"
               
    def on_gyrr(self, event):
        global ev_hypermotor_2
        ev_hypermotor_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nGyraory motion to the right\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nGyraory motion to the right\n"
                
    def on_gyrl(self,event):
        global ev_hypermotor_3
        ev_hypermotor_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nGyratory motion to the left\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nGyratory motion to the left\n"
        
    def on_rockingbaf(self,event):
        global ev_hypermotor_4
        ev_hypermotor_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRocking back and forth\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRocking back and forth\n"
        
    def on_rockingsts(self,event):
        global ev_hypermotor_5
        ev_hypermotor_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRocking side-to-side\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRocking  side-to-side\n"
        
    def on_attempttoprevent(self,event):
        global ev_hypermotor_6
        ev_hypermotor_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAttempt of patient to prevent movements\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAttempt of patient to prevent movements\n"
#---------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------
class MyFrame_position_change(wx.Frame):  #Class definition for GUI 'Position change'.   
    def __init__(self):
        super().__init__(parent=None, title='Position change', size=(1000, 450))
        panel = wx.Panel(self)
            
        sifrla_btn = wx.Button(panel, label='Sitting from laying', pos=(5, 205))
        sifrla_btn.Bind(wx.EVT_BUTTON, self.on_sifrla)
                
        stfrsi_btn = wx.Button(panel, label='Standing from sitting', pos=(295, 205))
        stfrsi_btn.Bind(wx.EVT_BUTTON, self.on_stfrsi)
                
        stfrla_btn = wx.Button(panel, label='Standing from laying', pos=(480, 205))
        stfrla_btn.Bind(wx.EVT_BUTTON, self.on_stfrla)
                
        lafrsi_btn = wx.Button(panel, label='Laying from sitting', pos=(5, 245))
        lafrsi_btn.Bind(wx.EVT_BUTTON, self.on_lafrsi)
                
        sifrst_btn = wx.Button(panel, label='sitting from standing', pos=(295, 245))
        sifrst_btn.Bind(wx.EVT_BUTTON, self.on_sifrst)
        
        lafrst_btn = wx.Button(panel, label='Laying from standing', pos=(480, 245))
        lafrst_btn.Bind(wx.EVT_BUTTON, self.on_lafrst)
        
        lafrla_btn = wx.Button(panel, label='Laying from laying', pos=(5, 285))
        lafrla_btn.Bind(wx.EVT_BUTTON, self.on_lafrla)

      
        next_step_btn = wx.Button(panel, label='Next step', pos=(575, 380))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
                
    def on_sifrla(self, event):
        global ev_poschange_1
        ev_poschange_1=1        
        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nSitting from laying\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSitting from laying\n"
        self.Close()
               
    def on_stfrsi(self, event):
        global ev_poschange_2
        ev_poschange_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nStanding from sitting\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nStanding from sitting\n"
        self.Close()
                
    def on_stfrla(self,event):
        global ev_poschange_3
        ev_poschange_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nStanding from laying\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nStanding from laying\n"
        self.Close()
                
    def on_lafrsi(self,event):
        global ev_poschange_4
        ev_poschange_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLaying from sitting\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLaying from sitting\n"
        self.Close()
                
    def on_sifrst(self,event):
        global ev_poschange_5
        ev_poschange_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nSitting from standing\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSitting from standing\n"
        self.Close()
                
    def on_lafrst(self,event):
        global ev_poschange_6
        ev_poschange_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLaying from standing\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLaying from standing\n"
        self.Close()
                
    def on_lafrla(self,event):
        global ev_poschange_7
        ev_poschange_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLaying from laying\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLaying from laying\n"
        self.Close()
#------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------
class MyFrame_trigger(wx.Frame):  #Class definition for GUI 'Trigger'.   
    def __init__(self):
        super().__init__(parent=None, title='Trigger', size=(1000, 400))
        panel = wx.Panel(self)
            
        vistrig_btn = wx.Button(panel, label='Visual', pos=(105, 105))
        vistrig_btn.Bind(wx.EVT_BUTTON, self.on_vistrig)
                
        mustrig_btn = wx.Button(panel, label='Auditory music', pos=(205, 105))
        mustrig_btn.Bind(wx.EVT_BUTTON, self.on_mustrig)
                
        nomustrig_btn = wx.Button(panel, label='Auditory-no-music', pos=(320, 105))
        nomustrig_btn.Bind(wx.EVT_BUTTON, self.on_nomustrig)
                
        tactrig_btn = wx.Button(panel, label='Tactile', pos=(105, 145))
        tactrig_btn.Bind(wx.EVT_BUTTON, self.on_tactrig)
                
        othertrig_btn = wx.Button(panel, label='Other', pos=(300, 185))
        othertrig_btn.Bind(wx.EVT_BUTTON, self.on_othertrig)
        
        startletrig_btn = wx.Button(panel, label='Startle', pos=(195, 145))
        startletrig_btn.Bind(wx.EVT_BUTTON, self.on_startletrig)
        
        eatingtrig_btn = wx.Button(panel, label='Eating', pos=(105, 185))
        eatingtrig_btn.Bind(wx.EVT_BUTTON, self.on_eatingtrig)
        
        drinkingtrig_btn = wx.Button(panel, label='Drinking', pos=(195, 185))
        drinkingtrig_btn.Bind(wx.EVT_BUTTON, self.on_drinkingtrig)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(375, 280))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
#                
    def on_vistrig(self, event):
        global ev_trig_1
        ev_trig_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nVisual trigger\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nVisual trigger\n"
        self.Close()
               
    def on_mustrig(self, event):
        global ev_trig_2
        ev_trig_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nMusic trigger\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMusic trigger\n"
        self.Close()
                
    def on_nomustrig(self,event):
        global ev_trig_3
        ev_trig_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAuditory non-musuc trigger\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAuditory non-musuc trigger\n"
        self.Close()
                
    def on_tactrig(self,event):
        global ev_trig_4
        ev_trig_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nTactile trigger\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nTactile trigger\n"
        self.Close()
                
    def on_othertrig(self,event):
        global ev_trig_5
        ev_trig_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nOther trigger\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOther trigger\n"
        self.Close()
                
    def on_startletrig(self,event):
        global ev_trig_6
        ev_trig_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nStartle\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nStartle\n"
        self.Close()
        
    def on_eatingtrig(self,event):
        global ev_trig_7
        ev_trig_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nEating\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nEating\n"
        self.Close()
        
    def on_drinkingtrig(self,event):
        global ev_trig_8
        ev_trig_8=1
        print('User selected: \nDrinking\n')
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nDrinking\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDrinking\n"
        self.Close()
#--------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------
class MyFrame_hand_posturing(wx.Frame):   #Class definition for GUI 'Hand posturing'. 
    def __init__(self):
        super().__init__(parent=None, title='Hand posturing', size=(1000, 700))
        panel = wx.Panel(self)
            
        fist_btn = wx.Button(panel, label='Fist', pos=(5, 405))
        fist_btn.Bind(wx.EVT_BUTTON, self.on_fist)
                
        politfist_btn = wx.Button(panel, label='Politician-fist', pos=(205, 405))
        politfist_btn.Bind(wx.EVT_BUTTON, self.on_politfist)
                
        cup_btn = wx.Button(panel, label='Cup', pos=(405, 405))
        cup_btn.Bind(wx.EVT_BUTTON, self.on_cup)
                
        pincer_btn = wx.Button(panel, label='Pincer', pos=(5, 445))
        pincer_btn.Bind(wx.EVT_BUTTON, self.on_pincer)
                
        exthand_btn = wx.Button(panel, label='Extended hand', pos=(205, 445))
        exthand_btn.Bind(wx.EVT_BUTTON, self.on_exthand)
        
        pointing_btn = wx.Button(panel, label='Pointing', pos=(405, 445))
        pointing_btn.Bind(wx.EVT_BUTTON, self.on_pointing)
        
        nonspecific_btn = wx.Button(panel, label='Non-specific', pos=(5, 485))
        nonspecific_btn.Bind(wx.EVT_BUTTON, self.on_nonspecific)

      
        next_step_btn = wx.Button(panel, label='Next step', pos=(675, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
                
    def on_fist(self, event):
        global ev_handpost_1
        ev_handpost_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nFist\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nFist\n"
        self.Close()
               
    def on_politfist(self, event):
        global ev_handpost_2
        ev_handpost_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ("User selected: \nPolitician's fist\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPolitician's fist\n"
        self.Close()
                
    def on_cup(self,event):
        global ev_handpost_3
        ev_handpost_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nCup\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nCup\n"
        self.Close()
                
    def on_pincer(self,event):
        global ev_handpost_4
        ev_handpost_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nPincer\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPincer\n"
        self.Close()
                
    def on_exthand(self,event):
        global ev_handpost_5
        ev_handpost_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nExtended hand\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nExtended hand\n"
        self.Close()
                
    def on_pointing(self,event):
        global ev_handpost_6
        ev_handpost_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nPointing\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPointing\n"
        self.Close()
                
    def on_nonspecific(self,event):
        global ev_handpost_7
        ev_handpost_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nNon-specific hand posturing\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNon-specific hand posturing\n"
        self.Close()
#------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------
class MyFrame_certainity(wx.Frame):    
    def __init__(self):
        super().__init__(parent=None, title='Degree of certainity', size=(1000, 400))
        panel = wx.Panel(self)
            
        nochance_btn = wx.Button(panel, label='No chance', pos=(5, 180))
        nochance_btn.Bind(wx.EVT_BUTTON, self.on_nochance)
                
        probably_btn = wx.Button(panel, label='Possibly', pos=(150, 180))
        probably_btn.Bind(wx.EVT_BUTTON, self.on_probably)
                
        certainly_btn = wx.Button(panel, label='Certainly', pos=(290, 180))
        certainly_btn.Bind(wx.EVT_BUTTON, self.on_certainly)
        
        noopinion_btn = wx.Button(panel, label='No opinion', pos=(430, 180))
        noopinion_btn.Bind(wx.EVT_BUTTON, self.on_noopinion)
        
        exit_btn = wx.Button(panel, label='Exit', pos=(600, 280))
        exit_btn.Bind(wx.EVT_BUTTON, self.on_exit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
        
        self.Show()
        
    def on_nochance(self, event):
        global ev_sertainity_1
        ev_sertainity_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNo chance\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNo chance\n"
        self.Close()
               
    def on_probably(self, event):
        global ev_sertainity_2
        ev_sertainity_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ("User selected: \nPossibly\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPossibly\n"
        self.Close()
                
    def on_certainly(self,event):
        global ev_sertainity_3
        ev_sertainity_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nCertainly\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nCertainly\n"
        self.Close()
        
    def on_noopinion(self,event):
        global ev_sertainity_4
        ev_sertainity_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNo opinion\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNo opinion\n"
        self.Close()
        
    def on_exit(self,event):
        global ev_sertainity_5
        ev_sertainity_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nExit\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nExit\n"
        self.Close()
#------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------
class MyFrame_event_addition(wx.Frame): #Class definition for GUI 'Event addition'.    
    def __init__(self):
        super().__init__(parent=None, title='Event addition', size=(1000, 700))
        panel = wx.Panel(self)
    
        simple_btn = wx.Button(panel, label='Simple motor', pos=(5, 405))
        simple_btn.Bind(wx.EVT_BUTTON, self.on_simp)
        
        automatic_btn = wx.Button(panel, label='Automatisms', pos=(5, 455))
        automatic_btn.Bind(wx.EVT_BUTTON, self.on_automat)
        
        hypermotor_btn = wx.Button(panel, label='Hyperkinetic', pos=(5, 505))
        hypermotor_btn.Bind(wx.EVT_BUTTON, self.on_hypermot)
        
        eyemove_btn = wx.Button(panel, label='Eye movements', pos=(105, 405))
        eyemove_btn.Bind(wx.EVT_BUTTON, self.on_eyemove)
        
        voice_btn = wx.Button(panel, label='Voice event', pos=(105, 455))
        voice_btn.Bind(wx.EVT_BUTTON, self.on_voice)
        
        dialeptic_btn = wx.Button(panel, label='Dialeptic', pos=(105, 505))
        dialeptic_btn.Bind(wx.EVT_BUTTON, self.on_dialept)
        
        gtcs_btn = wx.Button(panel, label='GTCS', pos=(215, 405))
        gtcs_btn.Bind(wx.EVT_BUTTON, self.on_gtcs)
        
        autonomic_btn = wx.Button(panel, label='Autonomic', pos=(215, 455))
        autonomic_btn.Bind(wx.EVT_BUTTON, self.on_autonom)
        
        aura_btn = wx.Button(panel, label='Aura', pos=(215, 505))
        aura_btn.Bind(wx.EVT_BUTTON, self.on_aura)
        
        other_btn = wx.Button(panel, label='Other events', pos=(5, 555))
        other_btn.Bind(wx.EVT_BUTTON, self.on_other)
        
        triger_btn = wx.Button(panel, label='Trigger', pos=(105, 555))
        triger_btn.Bind(wx.EVT_BUTTON, self.on_triger)
        
        exit_btn = wx.Button(panel, label='Exit', pos=(555, 555))
        exit_btn.Bind(wx.EVT_BUTTON, self.on_exit)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(275, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
        
        self.Show()
          
    def on_quit(self, event):
        global exit_loop
        exit_loop=1
        now = datetime.now()
        global software_user_dialogue 
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_simp(self, event):
        global ev_addev_1
        ev_addev_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nSimple motor event\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSimple motor event\n"
        self.Close()
       
    def on_automat(self, event):
        global ev_addev_2
        ev_addev_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAutomatism event\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAutomatism event\n"
        self.Close()
        
    def on_hypermot(self,event):
        global ev_addev_3
        ev_addev_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nHyperkinetic event\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nHyperkinetic event\n"
        self.Close()
        
    def on_eyemove(self,event):
        global ev_addev_4
        ev_addev_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nEye movements\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nEye movements\n"
        self.Close()
        
    def on_voice(self,event):
        global ev_addev_5
        ev_addev_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nVoice event\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nVoice event\n"
        self.Close()
        
    def on_dialept(self,event):
        global ev_addev_6
        ev_addev_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nDialeptic event\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDialeptic event\n"
        self.Close()
        
    def on_gtcs(self,event):
        global ev_addev_7
        ev_addev_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nGeneralized tonic-clonic seizure\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nGeneralized tonic-clonic seizure\n"
        self.Close()
        
    def on_autonom(self,event):
        global ev_addev_8
        ev_addev_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAutonomic event\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAutonomic event\n"
        self.Close()
        
    def on_aura(self,event):
        global ev_addev_9
        ev_addev_9=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nAura reporting\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAura reporting\n"
        self.Close()
    
    def on_other(self,event):
        global ev_addev_10
        ev_addev_10=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nOther event\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOther event\n"
        self.Close()
        
    def on_triger(self,event):
        global ev_addev_11
        ev_addev_11=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nTrigger\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nTrigger\n"
        self.Close()
        
    def on_exit(self,event):
        global ev_addev_12
        ev_addev_12=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nExit\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nExit\n"
        self.Close()
#---------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------
class MyFrame_voice(wx.Frame):  #Class definition for GUI 'Voice behaviors'.  
    def __init__(self):
        super().__init__(parent=None, title='Voice behaviors', size=(1000, 700))
        panel = wx.Panel(self)
            
        noverbnopan_btn = wx.Button(panel, label='Non-verbal non-panic vocalization', pos=(5, 405))
        noverbnopan_btn.Bind(wx.EVT_BUTTON, self.on_noverbnopan)
                
        noverbpan_btn = wx.Button(panel, label='Non-verbal panic vocalization', pos=(295, 405))
        noverbpan_btn.Bind(wx.EVT_BUTTON, self.on_noverbpan)
                
        normalspeech_btn = wx.Button(panel, label='Normal speech', pos=(485, 405))
        normalspeech_btn.Bind(wx.EVT_BUTTON, self.on_normalspeech)
        
        panicspeech_btn = wx.Button(panel, label='Panic speech', pos=(675, 405))
        panicspeech_btn.Bind(wx.EVT_BUTTON, self.on_panicspeech)
                
        cursespeech_btn = wx.Button(panel, label='Curse speech', pos=(5, 445))
        cursespeech_btn.Bind(wx.EVT_BUTTON, self.on_cursespeech)
                
        confusedsp_btn = wx.Button(panel, label='Confused speech', pos=(295, 445))
        confusedsp_btn.Bind(wx.EVT_BUTTON, self.on_confusedsp)
        
        perseveration_btn = wx.Button(panel, label='Perseveration', pos=(485, 445))
        perseveration_btn.Bind(wx.EVT_BUTTON, self.on_perseveration)
        
        paraphasia_btn = wx.Button(panel, label='Paraphasia', pos=(675, 445))
        paraphasia_btn.Bind(wx.EVT_BUTTON, self.on_paraphasia)
        
        motoraphasia_btn = wx.Button(panel, label='Motor aphasia', pos=(5, 485))
        motoraphasia_btn.Bind(wx.EVT_BUTTON, self.on_motoraphasia)
                
        sensaphasia_btn = wx.Button(panel, label='Sensory aphasia', pos=(295, 485))
        sensaphasia_btn.Bind(wx.EVT_BUTTON, self.on_sensaphasia)
        
        anomia_btn = wx.Button(panel, label='Anomia', pos=(675, 485))
        anomia_btn.Bind(wx.EVT_BUTTON, self.on_anomia)
        
        laughther_btn = wx.Button(panel, label='Laughter', pos=(485, 525))
        laughther_btn.Bind(wx.EVT_BUTTON, self.on_laughther)
        
        crying_st_btn = wx.Button(panel, label='Crying', pos=(5, 525))
        crying_st_btn.Bind(wx.EVT_BUTTON, self.on_crying)
                
        stuttering_btn = wx.Button(panel, label='Stuttering', pos=(295, 525))
        stuttering_btn.Bind(wx.EVT_BUTTON, self.on_stuttering)
        
        foreignlang_btn = wx.Button(panel, label='Foreign language', pos=(485, 565))
        foreignlang_btn.Bind(wx.EVT_BUTTON, self.on_foreignlang)
        
        snoring_btn = wx.Button(panel, label='Snoring', pos=(675, 525))
        snoring_btn.Bind(wx.EVT_BUTTON, self.on_snoring)
       
        dysartria_btn = wx.Button(panel, label='Dysartria', pos=(5, 565))
        dysartria_btn.Bind(wx.EVT_BUTTON, self.on_dysartria)
        
        hoarseness_btn = wx.Button(panel, label='Hoarseness', pos=(295, 565))
        hoarseness_btn.Bind(wx.EVT_BUTTON, self.on_hoarseness)
        
        sensmotaphasia_btn = wx.Button(panel, label='Sensorimotor aphasia', pos=(485, 485))
        sensmotaphasia_btn.Bind(wx.EVT_BUTTON, self.on_sensmotaphasia)
        
        othervoice_btn = wx.Button(panel, label='Other', pos=(675, 565))
        othervoice_btn.Bind(wx.EVT_BUTTON, self.on_othervoice)
      
        next_step_btn = wx.Button(panel, label='Next step', pos=(800, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
    def on_quit(self, event):                       
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_noverbnopan(self, event):
        global ev_voice_1
        ev_voice_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNo verbal, no panic vocalization\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNo verbal, no panic vocalization\n"
        self.Close()
               
    def on_noverbpan(self, event):
        global ev_voice_2
        ev_voice_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNo verbal panic vocalization\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNo verbal panic vocalization\n"
        self.Close()
               
    def on_normalspeech(self, event):
        global ev_voice_3
        ev_voice_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNormal speech\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNormal speech\n"
        self.Close()
                
    def on_panicspeech(self,event):
        global ev_voice_4
        ev_voice_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nPanic speech\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPanic speech\n"
        self.Close()
                
    def on_cursespeech(self,event):
        global ev_voice_5
        ev_voice_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nCurse speech\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nCurse speech\n"
        self.Close()
                
    def on_confusedsp(self,event):
        global ev_voice_6
        ev_voice_6=1       
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nConfused speech\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nConfused speech\n"
        self.Close()
                
    def on_perseveration(self,event):
        global ev_voice_7
        ev_voice_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nPerseverattion\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPerseverattion\n"
        self.Close()
                
    def on_paraphasia(self,event):
        global ev_voice_8
        ev_voice_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nParaphasia\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nParaphasia\n"
        self.Close()
                
    def on_motoraphasia(self,event):
        global ev_voice_9
        ev_voice_9=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nMotor aphasia\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMotor aphasia\n"
        self.Close()
        
    def on_sensaphasia(self,event):
        global ev_voice_10
        ev_voice_10=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nSensory aphasia\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSensory aphasia\n"
        self.Close()
        
    def on_anomia(self,event):
        global ev_voice_11
        ev_voice_11=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nAnomia\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAnomia\n"
        self.Close()
        
    def on_laughther(self,event):
        global ev_voice_12
        ev_voice_12=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLaughter')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLaughter\n"
        self.Close()
        
    def on_crying(self,event):
        global ev_voice_13
        ev_voice_13=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nCrying\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nCrying\n"
        self.Close()
       
    def on_stuttering(self,event):
        global ev_voice_14
        ev_voice_14=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nStuttering\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nStuttering\n"
        self.Close()
        
    def on_foreignlang(self,event):
        global ev_voice_15
        ev_voice_15=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nForeign language\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nForeign language\n"
        self.Close()
        
    def on_snoring(self,event):
        global ev_voice_16
        ev_voice_16=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nSnoring\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSnoring\n"
        self.Close()
       
    def on_dysartria(self,event):
        global ev_voice_17
        ev_voice_17=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nDysartria\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDysartria\n"
        self.Close()
        
    def on_hoarseness(self,event):
        global ev_voice_18
        ev_voice_18=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nHoarseness\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nHoarseness\n"
        self.Close()
        
    def on_sensmotaphasia(self,event):
        global ev_voice_19
        ev_voice_19=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nSensorimotor aphasia\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSensorimotor aphasia\n"
        self.Close()
        
    def on_othervoice(self,event):
        global ev_voice_20
        ev_voice_20=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nOther voice behavior\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOther voice behavior\n"
        self.Close()
#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------
class MyFrame_partial_complete(wx.Frame):   #Class definition for GUI 'Partial_vs._complete' 
    def __init__(self):
        super().__init__(parent=None, title='Partial_vs._complete', size=(1000, 400))
        panel = wx.Panel(self)
            
        partial_btn = wx.Button(panel, label='Partial', pos=(80, 200))
        partial_btn.Bind(wx.EVT_BUTTON, self.on_partial)
                               
        complete_btn = wx.Button(panel, label='Complete', pos=(200, 200))
        complete_btn.Bind(wx.EVT_BUTTON, self.on_complete)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
        
        self.Show()
   
    def on_partial(self, event):
        global ev_partcomp_1
        ev_partcomp_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nPartial\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPartial\n"
        self.Close()
               
    def on_complete(self, event):
        global ev_partcomp_2
        ev_partcomp_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ("User selected: \nComplete\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nComplete\n"
        self.Close()
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
class MyFrame_normal_speech(wx.Frame):  #Class definition for GUI 'Normal speech'   
    def __init__(self):
        super().__init__(parent=None, title='Normal speech', size=(1000, 400))
        panel = wx.Panel(self)
            
        spontaneous_btn = wx.Button(panel, label='Spontaneous speech', pos=(100, 150))
        spontaneous_btn.Bind(wx.EVT_BUTTON, self.on_spontaneous)
                
        answering_btn = wx.Button(panel, label='Answering questions', pos=(300, 150))
        answering_btn.Bind(wx.EVT_BUTTON, self.on_answering)
                               
        both_btn = wx.Button(panel, label='Both', pos=(500, 150))
        both_btn.Bind(wx.EVT_BUTTON, self.on_both)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                                        
        self.Show()
            
    def on_spontaneous(self, event):
        global ev_normspeech_1
        ev_normspeech_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nSpontaneous speech\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSpontaneous speech\n"
        self.Close()
               
    def on_answering(self, event):
        global ev_normspeech_2
        ev_normspeech_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ("User selected: \nAnswering questions\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAnswering questions\n"
        self.Close()
                
    def on_both(self,event):
        global ev_normspeech_3
        ev_normspeech_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nBoth\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nBoth\n"
        self.Close()
#------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------
class MyFrame_aura_report(wx.Frame):   #Class definition for GUI 'Aura report'  
    def __init__(self):
        super().__init__(parent=None, title='Aura report', size=(1000, 400))
        panel = wx.Panel(self)
            
        verbcert_btn = wx.Button(panel, label='Aura verbal report (certain)', pos=(200, 105))
        verbcert_btn.Bind(wx.EVT_BUTTON, self.on_verbcert)
                
        verbpos_btn = wx.Button(panel, label='Aura verbal report (possible)', pos=(200, 155))
        verbpos_btn.Bind(wx.EVT_BUTTON, self.on_verbpos)
                               
        nverbpart_btn = wx.Button(panel, label='Aura non-verbal report: body part specific', pos=(200, 205))
        nverbpart_btn.Bind(wx.EVT_BUTTON, self.on_nverbpart)
                
        nverbgen_btn = wx.Button(panel, label='Aura non-verbal report: general', pos=(200, 255))
        nverbgen_btn.Bind(wx.EVT_BUTTON, self.on_nverbgen)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(475, 280))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)

        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()

    def on_verbcert(self, event):
        global ev_aurarep_1
        ev_aurarep_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAura verbal report (certain)\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAura verbal report (certain)\n"
        self.Close()
               
    def on_verbpos(self, event):
        global ev_aurarep_2
        ev_aurarep_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ("User selected: \nAura verbal report (possible)\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAura verbal report (possible)\n"
        self.Close()
                
    def on_nverbpart(self,event):
        global ev_aurarep_3
        ev_aurarep_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAura non-verbal report: body part specific\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAura non-verbal report: body part specific\n"
        self.Close()
                
    def on_nverbgen(self,event):
        global ev_aurarep_4
        ev_aurarep_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nAura non-verbal report: general\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAura non-verbal report: general\n"
        self.Close()
#----------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------
class MyFrame_aura_report_general_alarming(wx.Frame):    #Class definition for GUI 'Aura report: general alarming'   
    def __init__(self):
        super().__init__(parent=None, title='Aura report: general alarming', size=(1000, 400))
        panel = wx.Panel(self)
            
        btnsearch_btn = wx.Button(panel, label='Alarming button searching', pos=(200, 105))
        btnsearch_btn.Bind(wx.EVT_BUTTON, self.on_btnsearch)
                
        btnpush_btn = wx.Button(panel, label='Alarming button pushing', pos=(200, 155))
        btnpush_btn.Bind(wx.EVT_BUTTON, self.on_btnpush)
                               
        gestvocal_btn = wx.Button(panel, label='Alarming gesticulation/vocalisation', pos=(200, 205))
        gestvocal_btn.Bind(wx.EVT_BUTTON, self.on_gestvocal)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(375, 280))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)

        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
                
    def on_btnsearch(self, event):
        global ev_alarm_1
        ev_alarm_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAlarming button searching\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAlarming button searching\n"
        self.Close()
               
    def on_btnpush(self, event):
        global ev_alarm_2
        ev_alarm_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ("User selected: \nAlarming button pushing\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAlarming button pushing\n"
        self.Close()
                
    def on_gestvocal(self,event):
        global ev_alarm_3
        ev_alarm_3=1
        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAlarming gesticulation/vocalisation\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAlarming gesticulation/vocalisation\n"
        self.Close()
#--------------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------------
class MyFrame_other(wx.Frame): #Class definition for GUI '"other" behaviors'   
    def __init__(self):
        super().__init__(parent=None, title='"Other" behaviors', size=(1200, 400))
        panel = wx.Panel(self)
                          
        vigichange_btn = wx.Button(panel, label='Vigilance change', pos=(5, 105))
        vigichange_btn.Bind(wx.EVT_BUTTON, self.on_vigichange)
                
        posichange_btn = wx.Button(panel, label='Position change', pos=(205, 105))
        posichange_btn.Bind(wx.EVT_BUTTON, self.on_posichange)
                
        walking_btn = wx.Button(panel, label='Walking', pos=(405, 105))
        walking_btn.Bind(wx.EVT_BUTTON, self.on_walking)
        
        obschange_btn = wx.Button(panel, label='Observer behavior change', pos=(805, 145))
        obschange_btn.Bind(wx.EVT_BUTTON, self.on_obschange)
                
        outcamera_btn = wx.Button(panel, label='Out of camera', pos=(605, 145))
        outcamera_btn.Bind(wx.EVT_BUTTON, self.on_outcamera)
                
        headnod_btn = wx.Button(panel, label='Head nodding', pos=(5, 225))
        headnod_btn.Bind(wx.EVT_BUTTON, self.on_headnod)
        
        heads2s_btn = wx.Button(panel, label='Head side-to-side motion', pos=(205, 225))
        heads2s_btn.Bind(wx.EVT_BUTTON, self.on_heads2s)
        
        headother_btn = wx.Button(panel, label='Head motion unspecified', pos=(5, 185))
        headother_btn.Bind(wx.EVT_BUTTON, self.on_headother)
        
        trunkunsp_btn = wx.Button(panel, label='Trunk motion unspecified', pos=(205, 185))
        trunkunsp_btn.Bind(wx.EVT_BUTTON, self.on_trunkunsp)
                
        limbunsp_btn = wx.Button(panel, label='Limbs motion unspecified', pos=(405, 185))
        limbunsp_btn.Bind(wx.EVT_BUTTON, self.on_limbunsp)
        
        fall_btn = wx.Button(panel, label='Fall', pos=(5, 145))
        fall_btn.Bind(wx.EVT_BUTTON, self.on_fall)
        
        eating_btn = wx.Button(panel, label='Eating', pos=(605, 105))
        eating_btn.Bind(wx.EVT_BUTTON, self.on_eating)
        
        drinking_st_btn = wx.Button(panel, label='Drinking', pos=(805,105))
        drinking_st_btn.Bind(wx.EVT_BUTTON, self.on_drinking)
                
        eldetach_btn = wx.Button(panel, label='Electrode self-detaching', pos=(605, 225))
        eldetach_btn.Bind(wx.EVT_BUTTON, self.on_eldetach)
        
        trauma_btn = wx.Button(panel, label='Physical trauma', pos=(205, 145))
        trauma_btn.Bind(wx.EVT_BUTTON, self.on_trauma)
        
        sleeporofacial_btn = wx.Button(panel, label='Sleep orofacial movements', pos=(205, 265))
        sleeporofacial_btn.Bind(wx.EVT_BUTTON, self.on_sleeporofacial)
        
        plms_btn = wx.Button(panel, label='PLMS', pos=(5, 265))
        plms_btn.Bind(wx.EVT_BUTTON, self.on_plms)
        
        chorea_btn = wx.Button(panel, label='Chorea', pos=(5, 305))
        chorea_btn.Bind(wx.EVT_BUTTON, self.on_chorea)
        
        athetosis_btn = wx.Button(panel, label='Athetosis', pos=(205, 305))
        athetosis_btn.Bind(wx.EVT_BUTTON, self.on_athetosis)
        
        tics_btn = wx.Button(panel, label='Tics', pos=(605, 605))
        tics_btn.Bind(wx.EVT_BUTTON, self.on_tics)
        
        akathisia_btn = wx.Button(panel, label='Akathisia/RLS', pos=(405, 265))
        akathisia_btn.Bind(wx.EVT_BUTTON, self.on_akathisia)
        
        balismus_btn = wx.Button(panel, label='Balismus', pos=(405, 305))
        balismus_btn.Bind(wx.EVT_BUTTON, self.on_balismus)
        
        unspecdyskinesia_btn = wx.Button(panel, label='Unspecified dyskinesia', pos=(605, 265))
        unspecdyskinesia_btn.Bind(wx.EVT_BUTTON, self.on_unspecdyskinesia)
        
        unspecdystonia_btn = wx.Button(panel, label='Unspecified dystonia', pos=(805, 265))
        unspecdystonia_btn.Bind(wx.EVT_BUTTON, self.on_unspecdystonia)
        
        faceunsp_btn = wx.Button(panel, label='Face motion unspecified', pos=(605, 185))
        faceunsp_btn.Bind(wx.EVT_BUTTON, self.on_faceunsp)
        
        unsecbehchange_btn = wx.Button(panel, label='Unspecified behavior change', pos=(405, 145))
        unsecbehchange_btn.Bind(wx.EVT_BUTTON, self.on_unsecbehchange)
        
        other_in_other_btn = wx.Button(panel, label='Other', pos=(805, 305))
        other_in_other_btn.Bind(wx.EVT_BUTTON, self.on_other_in_other)
        
        otherbpshak_btn = wx.Button(panel, label='Body parts shaking', pos=(405, 225))
        otherbpshak_btn.Bind(wx.EVT_BUTTON, self.on_otherbpshak)
        
        other_pelvtrust_btn = wx.Button(panel, label='Pelvic thrust (unspecified)', pos=(805, 185))
        other_pelvtrust_btn.Bind(wx.EVT_BUTTON, self.on_other_pelvtrust)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(1005, 245))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_vigichange(self, event):
        global ev_other_1
        ev_other_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nVigilance change\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nVigilance change\n"
        self.Close()
               
    def on_posichange(self, event):
        global ev_other_2
        ev_other_2=1        
        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ("User selected: \nPatient's position change\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPatient's position change\n"
        self.Close()
               
    def on_walking(self, event):
        global ev_other_3
        ev_other_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nWalking\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nWalking\n"
        self.Close()
                
    def on_obschange(self,event):
        global ev_other_4
        ev_other_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ("User selected: \nObserver's behavior change\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nObserver's behavior change\n"
        self.Close()
                
    def on_outcamera(self,event):
        global ev_other_5
        ev_other_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nPatient moves out of the videeo-camera field\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPatient moves out of the videeo-camera field\n"
        self.Close()
                
    def on_headnod(self,event):
        global ev_other_6
        ev_other_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nHead nodding\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nHead nodding\n"
        self.Close()
                
    def on_heads2s(self,event):
        global ev_other_7
        ev_other_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nHead side-to-site movements\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nHead side-to-site movements\n"
        self.Close()
                
    def on_headother(self,event):
        global ev_other_8
        ev_other_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nOther unspecified head movements\n')
        software_user_dialogue+="\n"+current_time+"\nOther unspecified head movements\n"
        self.Close()        
                
    def on_trunkunsp(self,event):
        global ev_other_9
        ev_other_9=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nUnspecified movements of trunk\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUnspecified movements of trunk\n"
        self.Close()
        
    def on_limbunsp(self,event):
        global ev_other_10
        ev_other_10=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nUspecified movements of limbs\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUspecified movements of limbs\n"
        self.Close()
        
    def on_fall(self,event):
        global ev_other_11
        ev_other_11=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nPatient falled\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPatient falled\n"
        self.Close()
        
    def on_eating(self,event):
        global ev_other_12
        ev_other_12=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nPatient eats\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPatient eats\n"
        self.Close()
        
    def on_drinking(self,event):
        global ev_other_13
        ev_other_13=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nPatient drinks\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPatient drinks\n"
        self.Close()
       
    def on_eldetach(self,event):
        global ev_other_14
        ev_other_14=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nElectrode self detaching\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nElectrode self detaching\n"
        self.Close()
        
    def on_trauma(self,event):
        global ev_other_15
        ev_other_15=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nPhysical trauma\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPhysical trauma\n"
        self.Close()
        
    def on_sleeporofacial(self,event):
        global ev_other_16
        ev_other_16=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nSleep orofacial movements\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSleep orofacial movements\n"
        self.Close()
        
    def on_plms(self,event):
        global ev_other_17
        ev_other_17=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nPeriodic limb movements of sleep\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPeriodic limb movements of sleep\n"
        self.Close()
        
    def on_chorea(self,event):
        global ev_other_18
        ev_other_18=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nChorea\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nChorea\n"
        self.Close()
        
    def on_athetosis(self,event):
        global ev_other_19
        ev_other_19=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nAthetosis\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAthetosis\n"
        self.Close()
        
    def on_tics(self,event):
        global ev_other_20
        ev_other_20=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nTics\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nTics\n"
        self.Close()
        
    def on_akathisia(self,event):
        global ev_other_21
        ev_other_21=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nAkathisia\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAkathisia\n"
        self.Close()
        
    def on_balismus(self,event):
        global ev_other_22
        ev_other_22=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nBalismus\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nBalismus\n"
        self.Close()
        
    def on_unspecdyskinesia(self,event):
        global ev_other_23
        ev_other_23=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nUnspecified dyskinesia\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUnspecified dyskinesia\n"
        self.Close()
        
    def on_faceunsp(self,event):
        global ev_other_24
        ev_other_24=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nUnspecified movements of face\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUnspecified movements of face\n"
        self.Close()
        
    def on_unspecdystonia(self,event):
        global ev_other_25
        ev_other_25=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nUnspecified dystonia\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUnspecified dystonia\n"
        self.Close()
        
    def on_unsecbehchange(self,event):
        global ev_other_26
        ev_other_26=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nUnspecified behavior change\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUnspecified behavior change\n"
        self.Close()
        
    def on_other_in_other(self,event):
        global ev_other_27
        ev_other_27=1       
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \n"Other" behavior in "other" cathegory\n')
        software_user_dialogue+="\n"+current_time+'\nUser selected:\n"Other" behavior in "other" cathegory\n'
        self.Close()
        
    def on_otherbpshak(self,event):
        global ev_other_28
        ev_other_28=1       
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nBody parts shaking\n')
        software_user_dialogue+="\n"+current_time+'\nUser selected:\nBody parts shaking\n'
        self.Close()
        
    def on_other_pelvtrust(self,event):
        global ev_other_29
        ev_other_29=1       
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nPelvic thrust (unspecified)\n')
        software_user_dialogue+="\n"+current_time+'\nUser selected:\nPelvic thrust (unspecified)\n'
        self.Close()
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------
class MyFrame_other_vigilance_change(wx.Frame):    #Class definition for GUI 'Vigilance change'
    def __init__(self):
        super().__init__(parent=None, title='Vigilance change', size=(1000, 400))
        panel = wx.Panel(self)
            
        wak_btn = wx.Button(panel, label='Waking up', pos=(250, 150))
        wak_btn.Bind(wx.EVT_BUTTON, self.on_wak)
                
        asleep_btn = wx.Button(panel, label='Falling asleep', pos=(450, 150))
        asleep_btn.Bind(wx.EVT_BUTTON, self.on_asleep)

        next_step_btn = wx.Button(panel, label='Next step', pos=(575, 220))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)

        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_wak(self, event):
        global ev_wigil_1
        ev_wigil_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nWaking up\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nWaking up\n"
        self.Close()
               
    def on_asleep(self, event):
        global ev_wigil_2
        ev_wigil_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ("User selected: \nFalling asleep\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nFalling asleep\n"
        self.Close()
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------
class MyFrame_weak_strong(wx.Frame):    #Class definition for GUI 'Weak vs. strong'
    def __init__(self):
        super().__init__(parent=None, title='Weak vs. strong', size=(1000, 300))
        panel = wx.Panel(self)
            
        weak_btn = wx.Button(panel, label='Weak', pos=(50, 150))
        weak_btn.Bind(wx.EVT_BUTTON, self.on_weak)
                
        strong_btn = wx.Button(panel, label='Strong', pos=(250, 150))
        strong_btn.Bind(wx.EVT_BUTTON, self.on_strong)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)

        self.Show()

    def on_weak(self, event):
        global ev_weakstrong_1
        ev_weakstrong_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nWeak\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nWeak\n"
        self.Close()
               
    def on_strong(self, event):
        global ev_weakstrong_2
        ev_weakstrong_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nStrong\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nStrong\n"
        self.Close()
#---------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------
class MyFrame_opentrismus(wx.Frame):    #Class definition for GUI 'Weak vs. strong'
    def __init__(self):
        super().__init__(parent=None, title='Open mouth vs. trismus', size=(1000, 700))
        panel = wx.Panel(self)
            
        openmouth_btn = wx.Button(panel, label='Open mouth', pos=(50, 390))
        openmouth_btn.Bind(wx.EVT_BUTTON, self.on_openmouth)
                
        trismus_btn = wx.Button(panel, label='Trismus', pos=(250, 390))
        trismus_btn.Bind(wx.EVT_BUTTON, self.on_trismus)

        next_step_btn = wx.Button(panel, label='Next step', pos=(275, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)

        self.Show()
        
    def on_quit(self, event):
        now = datetime.now()
        global software_user_dialogue  
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()

    def on_openmouth(self, event):
        global ev_opentrism_1
        ev_opentrism_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nOpen mouth\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOpen mouth\n"
        self.Close()

    def on_trismus(self, event):
        global ev_opentrism_2
        ev_opentrism_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nTrismus\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nTrismus\n"
        self.Close()
#------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------
class MyFrame_flexion_extension(wx.Frame): #Class definition for GUI 'Flexion vs. extension'   
    def __init__(self):
        super().__init__(parent=None, title='Flexion vs. extension', size=(1000, 400))
        panel = wx.Panel(self)
            
        weakflexion_btn = wx.Button(panel, label='Weak flexion', pos=(50, 150))
        weakflexion_btn.Bind(wx.EVT_BUTTON, self.on_weakflexion)
                
        strongflexion_btn = wx.Button(panel, label='Srong flexion', pos=(250, 150))
        strongflexion_btn.Bind(wx.EVT_BUTTON, self.on_strongflexion)
                
        weakextension_btn = wx.Button(panel, label='Week extension', pos=(50, 250))
        weakextension_btn.Bind(wx.EVT_BUTTON, self.on_weakextension)
        
        strongextension_btn = wx.Button(panel, label='Strong extension', pos=(250, 250))
        strongextension_btn.Bind(wx.EVT_BUTTON, self.on_strongextension)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)

        self.Show()
        
    def on_weakflexion(self, event):
        global ev_flextionextension_1
        ev_flextionextension_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nWeak flexion\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nWeak flexion\n"
        self.Close()
               
    def on_strongflexion(self, event):
        global ev_flextionextension_2
        ev_flextionextension_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nStrong flexion\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nStrong flexion\n"
        self.Close()
               
    def on_weakextension(self, event):
        global ev_flextionextension_3
        ev_flextionextension_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nWeek extension\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nWeek extension\n"
        self.Close()
                
    def on_strongextension(self,event):
        global ev_flextionextension_4
        ev_flextionextension_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ("User selected: \nStrong extension\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nStrong extension\n"
        self.Close()
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
class MyFrame_yes_no(wx.Frame):  #Class definition for GUI 'Yes No'  
    def __init__(self):
        super().__init__(parent=None, title='Yes No', size=(1000, 700))
        panel = wx.Panel(self)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                    
        yes_btn = wx.Button(panel, label='Yes', pos=(150, 300))
        yes_btn.Bind(wx.EVT_BUTTON, self.on_yes)
                
        no_btn = wx.Button(panel, label='No', pos=(500, 300))
        no_btn.Bind(wx.EVT_BUTTON, self.on_no)
                                
        self.Show()
        
    def on_yes(self, event):
        global ev_yesno_1
        ev_yesno_1='y'                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nYes\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nYes\n"
        self.Close()
               
    def on_no(self, event):
        global ev_yesno_2
        ev_yesno_2='n'                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNo\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNo\n"
        self.Close()
#--------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------
class MyFrame_yes_no_orexit(wx.Frame):  #Class definition for GUI 'Yes No or Exit withot saving'  
    def __init__(self):
        super().__init__(parent=None, title='Yes No or Exit without saving', size=(1000, 700))
        panel = wx.Panel(self)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                    
        yes_btn = wx.Button(panel, label='Yes', pos=(150, 300))
        yes_btn.Bind(wx.EVT_BUTTON, self.on_yes)
                
        no_btn = wx.Button(panel, label='No', pos=(300, 300))
        no_btn.Bind(wx.EVT_BUTTON, self.on_no)
        
        exitwithoutsaving_btn = wx.Button(panel, label='Exit without saving', pos=(600, 450))
        exitwithoutsaving_btn.Bind(wx.EVT_BUTTON, self.on_exitwithoutsaving)
                                
        self.Show()
        
    def on_yes(self, event):
        global ev_yesno_1
        ev_yesno_1='y'                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nYes\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nYes\n"
        self.Close()
               
    def on_no(self, event):
        global ev_yesno_2
        ev_yesno_2='n'                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNo\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNo\n"
        self.Close()
        
    def on_exitwithoutsaving(self, event):
        global ev_yesno_3
        ev_yesno_3=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nExit without saving\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nExit without saving\n"
        self.Close()
#---------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------
class MyFrame_yes_no_orexitsave(wx.Frame):  #Class definition for GUI 'Yes No or Exit with or without saving'  
    def __init__(self):
        super().__init__(parent=None, title='Yes No or Exit with or without saving', size=(1000, 700))
        panel = wx.Panel(self)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                    
        yes_btn = wx.Button(panel, label='Yes', pos=(150, 300))
        yes_btn.Bind(wx.EVT_BUTTON, self.on_yes)
                
        no_btn = wx.Button(panel, label='No', pos=(300, 300))
        no_btn.Bind(wx.EVT_BUTTON, self.on_no)
        
        exit_btn = wx.Button(panel, label='Exit', pos=(600, 450))
        exit_btn.Bind(wx.EVT_BUTTON, self.on_exit)
                                
        self.Show()
        
    def on_yes(self, event):
        global ev_yesno_1
        ev_yesno_1='y'                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nYes\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nYes\n"
        self.Close()
               
    def on_no(self, event):
        global ev_yesno_2
        ev_yesno_2='n'                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNo\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNo\n"
        self.Close()
        
    def on_exit(self, event):
        global ev_yesno_3
        ev_yesno_3=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nExit\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nExit\n"
        self.Close()        
#-----------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------
class MyFrame_cognitest(wx.Frame):  #Class definition for GUI 'Cognitive or motor testing'  
    def __init__(self):
        super().__init__(parent=None, title='Cognitive or motor testing', size=(1000, 400))
        panel = wx.Panel(self)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                    
        yes_btn = wx.Button(panel, label='Yes', pos=(150, 180))
        yes_btn.Bind(wx.EVT_BUTTON, self.on_yes)
                
        no_btn = wx.Button(panel, label='No', pos=(300, 180))
        no_btn.Bind(wx.EVT_BUTTON, self.on_no)
        
        noopinion_btn = wx.Button(panel, label='No opinion', pos=(450, 180))
        noopinion_btn.Bind(wx.EVT_BUTTON, self.on_noopinion)
        
        exit_btn = wx.Button(panel, label='Exit', pos=(600, 280))
        exit_btn.Bind(wx.EVT_BUTTON, self.on_exit)
                                
        self.Show()
        
    def on_yes(self, event):
        global ev_yesno_1
        ev_yesno_1='y'                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nYes\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nYes\n"
        self.Close()
               
    def on_no(self, event):
        global ev_yesno_2
        ev_yesno_2='n'                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNo\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNo\n"
        self.Close()
        
    def on_noopinion(self, event):
        global ev_yesno_3
        ev_yesno_3=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNo opinion\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNo opinion\n"
        self.Close()
        
    def on_exit(self, event):
        global ev_yesno_4
        ev_yesno_4=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nExit\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nExit\n"
        self.Close()        
#------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------
class MyFrame_write(wx.Frame):  #Class definition for GUI 'Writing GUI'   
    def __init__(self):
        global wx_text
        super().__init__(parent=None, title='Writing GUI',size=(1000, 200))
        panel = wx.Panel(self)        
        my_sizer = wx.BoxSizer(wx.VERTICAL)        
        self.text_ctrl = wx.TextCtrl(panel)
        my_sizer.Add(self.text_ctrl, 0, wx.ALL | wx.EXPAND, 5)        
        my_btn = wx.Button(panel, label=wx_text)
        my_btn.Bind(wx.EVT_BUTTON, self.on_press)
        my_sizer.Add(my_btn, 0, wx.ALL | wx.LEFT, 5)        
        panel.SetSizer(my_sizer)        
        self.Show()

    def on_press(self, event):
        global value
        global software_user_dialogue 
        value = self.text_ctrl.GetValue()
        if not value:                   
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("User didn't enter anything!")
            software_user_dialogue+="\n"+current_time+"\nUser didn't enter anything!"
        else:                 
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)        
            print('User typed:')
            software_user_dialogue+="\n"+current_time+"\nUser typed:\n"
        self.Close()
#------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------
class MyFrame_figure_of_4_side(wx.Frame):  #Class definition for GUI 'Figure of 4 side'   
    def __init__(self):
        super().__init__(parent=None, title='Figure of 4 side', size=(1000, 400))
        panel = wx.Panel(self)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
        
        rtelbowextended_btn = wx.Button(panel, label='Rt elbow extended', pos=(150, 150))
        rtelbowextended_btn.Bind(wx.EVT_BUTTON, self.on_rtelbowextended)
                
        ltelbowextended_btn = wx.Button(panel, label='Lt elbow extended', pos=(500, 150))
        ltelbowextended_btn.Bind(wx.EVT_BUTTON, self.on_ltelbowextended)
                               
        self.Show()
        
    def on_rtelbowextended(self, event):
        global ev_fofside_1
        ev_fofside_1=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt elbow extended\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt elbow extended\n"
        self.Close()
               
    def on_ltelbowextended(self, event):
        global ev_fofside_2
        ev_fofside_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt elbow extended\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt elbow extended\n"
        self.Close()
#------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------
class MyFrame_gtcs_end_turn_position(wx.Frame):  #Class definition for GUI 'GTCS end/turn position'   
    def __init__(self):
        super().__init__(parent=None, title='GTCS end/turn position', size=(1000, 700))
        panel = wx.Panel(self)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                            
        backposition_btn = wx.Button(panel, label='Back position', pos=(150, 300))
        backposition_btn.Bind(wx.EVT_BUTTON, self.on_backposition)
                
        abdomenposition_btn = wx.Button(panel, label='Abdomen position', pos=(500, 300))
        abdomenposition_btn.Bind(wx.EVT_BUTTON, self.on_abdomenposition)
        
        rtsideposition_btn = wx.Button(panel, label='Rt side position', pos=(150, 500))
        rtsideposition_btn.Bind(wx.EVT_BUTTON, self.on_rtsideposition)
        
        ltsideposition_btn = wx.Button(panel, label='Lt side position', pos=(500, 500))
        ltsideposition_btn.Bind(wx.EVT_BUTTON, self.on_ltsideposition)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(600, 600))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
                                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_backposition(self, event):
        global ev_gtcsendposition_1
        ev_gtcsendposition_1=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nBack position\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nBack position\n"
        self.Close()
               
    def on_abdomenposition(self, event):
        global ev_gtcsendposition_2
        ev_gtcsendposition_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAbdomen position\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAbdomen position\n"
        self.Close()
        
    def on_rtsideposition(self, event):
        global ev_gtcsendposition_3
        ev_gtcsendposition_3=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt side position\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt side position\n"
        self.Close()
        
    def on_ltsideposition(self, event):
        global ev_gtcsendposition_4
        ev_gtcsendposition_4=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt side position\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt side position\n"
        self.Close()
#-------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------
class MyFrame_auras_verbal_1st_degree_resolution(wx.Frame):  #Class definition for GUI 'Auras verbal 1st degree resolution'   
    def __init__(self):
        super().__init__(parent=None, title='Auras verbal report: modalities', size=(1000, 700))
        panel = wx.Panel(self)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                            
        somatosensory_btn = wx.Button(panel, label='Somatosensory aura', pos=(5, 300))
        somatosensory_btn.Bind(wx.EVT_BUTTON, self.on_somatosensory)
                
        visual_btn = wx.Button(panel, label='Visual aura', pos=(5, 350))
        visual_btn.Bind(wx.EVT_BUTTON, self.on_visual)
        
        auditory_btn = wx.Button(panel, label='Auditory aura', pos=(5, 400))
        auditory_btn.Bind(wx.EVT_BUTTON, self.on_auditory)
        
        gustatory_btn = wx.Button(panel, label='Gustatory aura', pos=(205, 300))
        gustatory_btn.Bind(wx.EVT_BUTTON, self.on_gustatory)
        
        olfactory_btn = wx.Button(panel, label='Olfactory aura', pos=(205, 350))
        olfactory_btn.Bind(wx.EVT_BUTTON, self.on_olfactory)
        
        vertiginous_btn = wx.Button(panel, label='Vertiginous aura', pos=(205, 400))
        vertiginous_btn.Bind(wx.EVT_BUTTON, self.on_vertiginous)
        
        autonomic_btn = wx.Button(panel, label='Autonomic/Visceral aura', pos=(405, 300))
        autonomic_btn.Bind(wx.EVT_BUTTON, self.on_autonomic)
        
#        visceral_btn = wx.Button(panel, label='Visceral sensation', pos=(405, 350))
#        visceral_btn.Bind(wx.EVT_BUTTON, self.on_visceral)
        
        expiriential_btn = wx.Button(panel, label='Expiriential aura', pos=(405, 400))
        expiriential_btn.Bind(wx.EVT_BUTTON, self.on_expiriential)
        
        cephalic_btn = wx.Button(panel, label='Cephalic aura', pos=(605, 300))
        cephalic_btn.Bind(wx.EVT_BUTTON, self.on_cephalic)
        
        otheraura_btn = wx.Button(panel, label='Other aura', pos=(605, 350))
        otheraura_btn.Bind(wx.EVT_BUTTON, self.on_otheraura)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(600, 500))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
                                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_somatosensory(self, event):
        global ev_verbauras_1
        ev_verbauras_1=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nSomatosensory aura\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSomatosensory aura\n"
        self.Close()
               
    def on_visual(self, event):
        global ev_verbauras_2
        ev_verbauras_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nVisual aura\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nVisual aura\n"
        self.Close()
        
    def on_auditory(self, event):
        global ev_verbauras_3
        ev_verbauras_3=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAuditory aura\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAuditory aura\n"
        self.Close()
        
    def on_gustatory(self, event):
        global ev_verbauras_4
        ev_verbauras_4=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nGustatory aura\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nGustatory aura\n"
        self.Close()
        
    def on_olfactory(self, event):
        global ev_verbauras_5
        ev_verbauras_5=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nOlfactory aura\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOlfactory aura\n"
        self.Close()
               
    def on_vertiginous(self, event):
        global ev_verbauras_6
        ev_verbauras_6=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nVertiginous aura\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nVertiginous aura\n"
        self.Close()
        
    def on_autonomic(self, event):
        global ev_verbauras_7
        ev_verbauras_7=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAutonomic/Visceral aura\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nVisceral aura\n"
        self.Close()
        
#    def on_visceral(self, event):
#        global ev_verbauras_8
#        ev_verbauras_8=1        
#        print ('Visceral sensation')
#        self.Close()
        
    def on_expiriential(self, event):
        global ev_verbauras_9
        ev_verbauras_9=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nExpiriential aura\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nExpiriential aura\n"
        self.Close()
        
    def on_cephalic(self, event):
        global ev_verbauras_10
        ev_verbauras_10=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nCephalic aura\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nCephalic aura\n"
        self.Close()
        
    def on_otheraura(self, event):
        global ev_verbauras_11
        ev_verbauras_11=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nOther aura\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOther aura\n"
        self.Close()
#------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------
class MyFrame_auras_somatosensory(wx.Frame):     #Class definition for GUI 'Somatosensory auras' 
    def __init__(self):
        super().__init__(parent=None, title='Somatosensory auras', size=(1000, 700))
        panel = wx.Panel(self)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                            
        tingling_btn = wx.Button(panel, label='Tingling', pos=(105, 300))
        tingling_btn.Bind(wx.EVT_BUTTON, self.on_tingling)
                
        anesthesia_btn = wx.Button(panel, label='Anesthesia', pos=(105, 350))
        anesthesia_btn.Bind(wx.EVT_BUTTON, self.on_anesthesia)
        
        pain_btn = wx.Button(panel, label='Pain', pos=(105, 400))
        pain_btn.Bind(wx.EVT_BUTTON, self.on_pain)
        
        warm_btn = wx.Button(panel, label='Warm/burning', pos=(405, 300))
        warm_btn.Bind(wx.EVT_BUTTON, self.on_warm)
        
        cold_btn = wx.Button(panel, label='Cold', pos=(405, 350))
        cold_btn.Bind(wx.EVT_BUTTON, self.on_cold)
        
        othersomataura_btn = wx.Button(panel, label='Other', pos=(405, 400))
        othersomataura_btn.Bind(wx.EVT_BUTTON, self.on_othersomataura)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(600, 400))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_tingling(self, event):
        global ev_somataura_1
        ev_somataura_1=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nTingling\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nTingling\n"
               
    def on_anesthesia(self, event):
        global ev_somataura_2
        ev_somataura_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAnesthesia\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAnesthesia\n"
        
    def on_pain(self, event):
        global ev_somataura_3
        ev_somataura_3=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nPain\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPain\n"
        
    def on_warm(self, event):
        global ev_somataura_4
        ev_somataura_4=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nWarm/burning\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nburning\n"
        
    def on_cold(self, event):
        global ev_somataura_5
        ev_somataura_5=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nCold\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nCold\n"
        
    def on_othersomataura(self, event):
        global ev_somataura_6
        ev_somataura_6=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nOther\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOther\n"
#--------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------
class MyFrame_auras_visual(wx.Frame):    #Class definition for GUI 'Visual auras'
    def __init__(self):
        super().__init__(parent=None, title='Visual auras', size=(1000, 700))
        panel = wx.Panel(self)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                            
        flasinglights_btn = wx.Button(panel, label='Flashing lights', pos=(105, 300))
        flasinglights_btn.Bind(wx.EVT_BUTTON, self.on_flasinglights)
                
        scotoma_btn = wx.Button(panel, label='Scotoma', pos=(105, 350))
        scotoma_btn.Bind(wx.EVT_BUTTON, self.on_scotoma)
        
        colors_btn = wx.Button(panel, label='Colors', pos=(105, 400))
        colors_btn.Bind(wx.EVT_BUTTON, self.on_colors)
        
        dots_btn = wx.Button(panel, label='Dots', pos=(205, 300))
        dots_btn.Bind(wx.EVT_BUTTON, self.on_dots)
        
        lines_btn = wx.Button(panel, label='Lines', pos=(205, 350))
        lines_btn.Bind(wx.EVT_BUTTON, self.on_lines)
        
        formedhalucinations_btn = wx.Button(panel, label='Formed halucinations', pos=(205, 400))
        formedhalucinations_btn.Bind(wx.EVT_BUTTON, self.on_formedhalucinations)
        
        micropsia_btn = wx.Button(panel, label='Micropsia', pos=(405, 300))
        micropsia_btn.Bind(wx.EVT_BUTTON, self.on_micropsia)
        
        macropsia_btn = wx.Button(panel, label='Macropsia', pos=(405, 350))
        macropsia_btn.Bind(wx.EVT_BUTTON, self.on_macropsia)
        
        shapedistortion_btn = wx.Button(panel, label='Shape distortion', pos=(405, 400))
        shapedistortion_btn.Bind(wx.EVT_BUTTON, self.on_shapedistortion)
        
        distancedistortion_btn = wx.Button(panel, label='Distance distortion', pos=(525, 300))
        distancedistortion_btn.Bind(wx.EVT_BUTTON, self.on_distancedistortion)
        
        lightintensity_btn = wx.Button(panel, label='Light intensity distortion', pos=(525, 350))
        lightintensity_btn.Bind(wx.EVT_BUTTON, self.on_lightintensity)
        
        colorintensitychange_btn = wx.Button(panel, label='Color intensity change', pos=(525, 400))
        colorintensitychange_btn.Bind(wx.EVT_BUTTON, self.on_colorintensitychange)
        
        palinopsia_btn = wx.Button(panel, label='Palinopsia', pos=(695, 300))
        palinopsia_btn.Bind(wx.EVT_BUTTON, self.on_palinopsia)
        
        oscilopsia_btn = wx.Button(panel, label='Oscillopsia', pos=(695, 350))
        oscilopsia_btn.Bind(wx.EVT_BUTTON, self.on_oscilopsia)
        
        lossofvision_btn = wx.Button(panel, label='Loss of vision', pos=(695, 400))
        lossofvision_btn.Bind(wx.EVT_BUTTON, self.on_lossofvision)
        
        othervisaura_btn = wx.Button(panel, label='Other', pos=(835, 300))
        othervisaura_btn.Bind(wx.EVT_BUTTON, self.on_othervisaura)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(500, 500))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
                                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_flasinglights(self, event):
        global ev_visaura_1
        ev_visaura_1=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nFlashing lights\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nFlashing lights\n"
               
    def on_scotoma(self, event):
        global ev_visaura_2
        ev_visaura_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nScotoma\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nScotoma\n"
        
    def on_colors(self, event):
        global ev_visaura_3
        ev_visaura_3=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nColors\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nColors\n"
        
    def on_dots(self, event):
        global ev_visaura_4
        ev_visaura_4=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nDots\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDots\n"
        
    def on_lines(self, event):
        global ev_visaura_5
        ev_visaura_5=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLines\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLines\n"
               
    def on_formedhalucinations(self, event):
        global ev_visaura_6
        ev_visaura_6=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nFormed halucinations\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nFormed halucinations\n"
        
    def on_micropsia(self, event):
        global ev_visaura_7
        ev_visaura_7=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nMicropsia\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMicropsia\n"
        
    def on_macropsia(self, event):
        global ev_visaura_8
        ev_visaura_8=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nMacropsia\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMacropsia\n"
        
    def on_shapedistortion(self, event):
        global ev_visaura_9
        ev_visaura_9=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nShape distortion')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nShape distortion\n"
        
    def on_distancedistortion(self, event):
        global ev_visaura_10
        ev_visaura_10=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nDistance distortion\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDistance distortion\n"
        
    def on_lightintensity(self, event):
        global ev_visaura_11
        ev_visaura_11=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLight intensity\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLight intensity\n"
        
    def on_colorintensitychange(self, event):
        global ev_visaura_12
        ev_visaura_12=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nColor intensity\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nColor intensity\n"
               
    def on_palinopsia(self, event):
        global ev_visaura_13
        ev_visaura_13=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nPalinopsia\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPalinopsia\n"
        
    def on_oscilopsia(self, event):
        global ev_visaura_14
        ev_visaura_14=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nOscilopsia\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOscilopsia\n"
        
    def on_lossofvision(self, event):
        global ev_visaura_15
        ev_visaura_15=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLoss of vision\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLoss of vision\n"
        
    def on_othervisaura(self, event):
        global ev_visaura_16
        ev_visaura_16=1        
        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nOther\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOther\n"
#--------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------
class MyFrame_auras_visual_location(wx.Frame):    #Class definition for GUI 'Visual auras location'
    def __init__(self):
        super().__init__(parent=None, title='Visual auras location', size=(1000, 700))
        panel = wx.Panel(self)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                            
        rtupperquad_btn = wx.Button(panel, label='Rt upper quadrant', pos=(55, 300))
        rtupperquad_btn.Bind(wx.EVT_BUTTON, self.on_rtupperquad)
                
        rtlowerquad_btn = wx.Button(panel, label='Rt lower quadrant', pos=(55, 350))
        rtlowerquad_btn.Bind(wx.EVT_BUTTON, self.on_rtlowerquad)
        
        rthemifield_btn = wx.Button(panel, label='Rt hemifield', pos=(55, 400))
        rthemifield_btn.Bind(wx.EVT_BUTTON, self.on_rthemifield)
        
        ltupperquad_btn = wx.Button(panel, label='Lt upper quadrant', pos=(205, 300))
        ltupperquad_btn.Bind(wx.EVT_BUTTON, self.on_ltupperquad)
        
        ltlowerquad_btn = wx.Button(panel, label='Lt lower quadrant', pos=(205, 350))
        ltlowerquad_btn.Bind(wx.EVT_BUTTON, self.on_ltlowerquad)
        
        lthemifield_btn = wx.Button(panel, label='Lt hemifield', pos=(205, 400))
        lthemifield_btn.Bind(wx.EVT_BUTTON, self.on_lthemifield)
        
        centralvisualarea_btn = wx.Button(panel, label='Central visual area', pos=(405, 300))
        centralvisualarea_btn.Bind(wx.EVT_BUTTON, self.on_centralvisualarea)
        
        rteye_btn = wx.Button(panel, label='Rt eye', pos=(405, 350))
        rteye_btn.Bind(wx.EVT_BUTTON, self.on_rteye)
        
        lteye_btn = wx.Button(panel, label='Lt eye', pos=(405, 400))
        lteye_btn.Bind(wx.EVT_BUTTON, self.on_lteye)
        
        entervialfield_btn = wx.Button(panel, label='Enter visual field', pos=(605, 300))
        entervialfield_btn.Bind(wx.EVT_BUTTON, self.on_entervialfield)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(500, 500))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
                                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_rtupperquad(self, event):
        global ev_visauraloc_1
        ev_visauraloc_1=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt upper quadrant\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt upper quadrant\n"
               
    def on_rtlowerquad(self, event):
        global ev_visauraloc_2
        ev_visauraloc_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt lower quadrant\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt lower quadrant\n"
        
    def on_rthemifield(self, event):
        global ev_visauraloc_3
        ev_visauraloc_3=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt hemifield\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt hemifield\n"
        
    def on_ltupperquad(self, event):
        global ev_visauraloc_4
        ev_visauraloc_4=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt upper quadrant\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt upper quadrant\n"
        
    def on_ltlowerquad(self, event):
        global ev_visauraloc_5
        ev_visauraloc_5=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt lower quadrant\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt lower quadrant\n"
               
    def on_lthemifield(self, event):
        global ev_visauraloc_6
        ev_visauraloc_6=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt hemifield\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt hemifield\n"
        
    def on_centralvisualarea(self, event):
        global ev_visauraloc_7
        ev_visauraloc_7=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nCentral visual area\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nCentral visual area\n"
        
    def on_rteye(self, event):
        global ev_visauraloc_8
        ev_visauraloc_8=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt eye\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt eye\n"
        
    def on_lteye(self, event):
        global ev_visauraloc_9
        ev_visauraloc_9=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt eye\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt eye\n"
        
    def on_entervialfield(self, event):
        global ev_visauraloc_10
        ev_visauraloc_10=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nEnter visual field\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nEnter visual field\n"
#--------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------
class MyFrame_auras_visual_motion(wx.Frame):     #Class definition for GUI 'Visual auras motion'
    def __init__(self):
        super().__init__(parent=None, title='Visual auras motion', size=(1000, 700))
        panel = wx.Panel(self)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                            
        movingclockwise_btn = wx.Button(panel, label='Moving clockwise', pos=(55, 300))
        movingclockwise_btn.Bind(wx.EVT_BUTTON, self.on_movingclockwise)
                
        movingcounterclockwise_btn = wx.Button(panel, label='Moving counterclockwise', pos=(55, 350))
        movingcounterclockwise_btn.Bind(wx.EVT_BUTTON, self.on_movingcounterclockwise)
        
        movingup_btn = wx.Button(panel, label='Moving up', pos=(55, 400))
        movingup_btn.Bind(wx.EVT_BUTTON, self.on_movingup)
        
        movingdown_btn = wx.Button(panel, label='Moving down', pos=(255, 300))
        movingdown_btn.Bind(wx.EVT_BUTTON, self.on_movingdown)
        
        movingright_btn = wx.Button(panel, label='Moving right', pos=(255, 350))
        movingright_btn.Bind(wx.EVT_BUTTON, self.on_movingright)
        
        movingleft_btn = wx.Button(panel, label='Moving left', pos=(255, 400))
        movingleft_btn.Bind(wx.EVT_BUTTON, self.on_movingleft)
        
        stationary_btn = wx.Button(panel, label='Stationary', pos=(405, 300))
        stationary_btn.Bind(wx.EVT_BUTTON, self.on_stationary)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(500, 500))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
                                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_movingclockwise(self, event):
        global ev_visauramov_1
        ev_visauramov_1=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nMoving clockwise\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMoving clockwise\n"
               
    def on_movingcounterclockwise(self, event):
        global ev_visauramov_2
        ev_visauramov_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nMoving counterclockwise\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMoving counterclockwise\n"
        
    def on_movingup(self, event):
        global ev_visauramov_3
        ev_visauramov_3=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nMoving up\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMoving up\n"
        
    def on_movingdown(self, event):
        global ev_visauramov_4
        ev_visauramov_4=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nMoving down\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMoving down\n"
        
    def on_movingright(self, event):
        global ev_visauramov_5
        ev_visauramov_5=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nMoving right\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMoving right\n"
               
    def on_movingleft(self, event):
        global ev_visauramov_6
        ev_visauramov_6=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nMoving left\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMoving left\n"
        
    def on_stationary(self, event):
        global ev_visauramov_7
        ev_visauramov_7=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nStationary\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nStationary\n"
#-------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------
class MyFrame_auras_auditory(wx.Frame):     #Class definition for GUI 'Auditory auras types'
    def __init__(self):
        super().__init__(parent=None, title='Auditory auras types', size=(1000, 700))
        panel = wx.Panel(self)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                            
        ringing_btn = wx.Button(panel, label='Ringing', pos=(55, 300))
        ringing_btn.Bind(wx.EVT_BUTTON, self.on_ringing)
                
        buzzing_btn = wx.Button(panel, label='Buzzing', pos=(55, 350))
        buzzing_btn.Bind(wx.EVT_BUTTON, self.on_buzzing)
        
        roaring_btn = wx.Button(panel, label='Roaring', pos=(55, 400))
        roaring_btn.Bind(wx.EVT_BUTTON, self.on_roaring)
        
        voices_btn = wx.Button(panel, label='Voises', pos=(255, 300))
        voices_btn.Bind(wx.EVT_BUTTON, self.on_voices)
        
        melodies_btn = wx.Button(panel, label='Melodies', pos=(255, 350))
        melodies_btn.Bind(wx.EVT_BUTTON, self.on_melodies)
        
        sounddistortion_btn = wx.Button(panel, label='Sound distortion', pos=(255, 400))
        sounddistortion_btn.Bind(wx.EVT_BUTTON, self.on_sounddistortion)
        
        otheraudiaura_btn = wx.Button(panel, label='Other', pos=(455, 300))
        otheraudiaura_btn.Bind(wx.EVT_BUTTON, self.on_otheraudiaura)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(500, 500))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
                                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_ringing(self, event):
        global ev_audiaura_1
        ev_audiaura_1=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRinging\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRinging\n"
               
    def on_buzzing(self, event):
        global ev_audiaura_2
        ev_audiaura_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nBuzzing')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nBuzzing\n"
        
    def on_roaring(self, event):
        global ev_audiaura_3
        ev_audiaura_3=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRoaring\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRoaring\n"
        
    def on_voices(self, event):
        global ev_audiaura_4
        ev_audiaura_4=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nVoises\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nVoises\n"
        
    def on_melodies(self, event):
        global ev_audiaura_5
        ev_audiaura_5=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nMelodies\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMelodies\n"
               
    def on_sounddistortion(self, event):
        global ev_audiaura_6
        ev_audiaura_6=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nSound distortion\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSound distortion\n"
        
    def on_otheraudiaura(self, event):
        global ev_audiaura_7
        ev_audiaura_7=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nOther\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOther\n"
#------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------
class MyFrame_auras_auditory_side(wx.Frame):  #Class definition for GUI 'Visual auras side'   
    def __init__(self):
        super().__init__(parent=None, title='Auditory auras side', size=(1000, 700))
        panel = wx.Panel(self)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
        
        rt_btn = wx.Button(panel, label='Right', pos=(255, 300))
        rt_btn.Bind(wx.EVT_BUTTON, self.on_rt)
        
        lt_btn = wx.Button(panel, label='Left', pos=(255, 350))
        lt_btn.Bind(wx.EVT_BUTTON, self.on_lt)
        
        nonlat_btn = wx.Button(panel, label='Non-lateralized', pos=(255, 400))
        nonlat_btn.Bind(wx.EVT_BUTTON, self.on_nonlat)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(500, 500))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
                                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_rt(self, event):
        global ev_audiauraside_1
        ev_audiauraside_1=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRight\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRight\n"
        self.Close()
               
    def on_lt(self, event):
        global ev_audiauraside_2
        ev_audiauraside_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLeft\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLeft\n"
        self.Close()
        
    def on_nonlat(self, event):
        global ev_audiauraside_3
        ev_audiauraside_3=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNon-lateralized\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNon-lateralized\n"
        self.Close()
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
class MyFrame_auras_autonomic(wx.Frame):    #Class definition for GUI 'Autonomic auras' 
    def __init__(self):
        super().__init__(parent=None, title='Autonomic\Visceral auras', size=(1000, 700))
        panel = wx.Panel(self)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                            
        palpitation_btn = wx.Button(panel, label='Palpitation', pos=(55, 300))
        palpitation_btn.Bind(wx.EVT_BUTTON, self.on_palpitation)
                
        shornessbreath_btn = wx.Button(panel, label='Shortness of breath', pos=(55, 350))
        shornessbreath_btn.Bind(wx.EVT_BUTTON, self.on_shornessbreath)
        
        choking_btn = wx.Button(panel, label='Choking', pos=(55, 400))
        choking_btn.Bind(wx.EVT_BUTTON, self.on_choking)
        
        urinaryurge_btn = wx.Button(panel, label='Urinary urge', pos=(255, 300))
        urinaryurge_btn.Bind(wx.EVT_BUTTON, self.on_urinaryurge)
        
        defecationurge_btn = wx.Button(panel, label='Defecation urge', pos=(255, 350))
        defecationurge_btn.Bind(wx.EVT_BUTTON, self.on_defecationurge)
        
        sexualfeelings_btn = wx.Button(panel, label='Sexual feelings', pos=(255, 400))
        sexualfeelings_btn.Bind(wx.EVT_BUTTON, self.on_sexualfeelings)
        
        feelinghot_btn = wx.Button(panel, label='Feeling hot', pos=(405, 300))
        feelinghot_btn.Bind(wx.EVT_BUTTON, self.on_feelinghot)
        
        feelingcold_btn = wx.Button(panel, label='Feeling cold', pos=(405, 350))
        feelingcold_btn.Bind(wx.EVT_BUTTON, self.on_feelingcold)
        
        otherautonomaura_btn = wx.Button(panel, label='Other', pos=(405, 400))
        otherautonomaura_btn.Bind(wx.EVT_BUTTON, self.on_otherautonomaura)
        
        nausea_btn = wx.Button(panel, label='Nausea', pos=(555, 300))
        nausea_btn.Bind(wx.EVT_BUTTON, self.on_nausea)
                
        abdominalpain_btn = wx.Button(panel, label='Abdomenal pain', pos=(555, 350))
        abdominalpain_btn.Bind(wx.EVT_BUTTON, self.on_abdominalpain)
        
        statabdodisc_btn = wx.Button(panel, label='Static abdomenal discomfort', pos=(555, 400))
        statabdodisc_btn.Bind(wx.EVT_BUTTON, self.on_statabdodisc)
        
        risabdodisc_btn = wx.Button(panel, label='Rising abdominal discomfort', pos=(675, 300))
        risabdodisc_btn.Bind(wx.EVT_BUTTON, self.on_risabdodisc)
        
        chestpain_btn = wx.Button(panel, label='Chest pain', pos=(705, 350))
        chestpain_btn.Bind(wx.EVT_BUTTON, self.on_chestpain)
        
        chestdisc_btn = wx.Button(panel, label='Chest discomfort', pos=(805, 400))
        chestdisc_btn.Bind(wx.EVT_BUTTON, self.on_chestdisc)
        
        throatsens_btn = wx.Button(panel, label='Throat sensation', pos=(855, 300))
        throatsens_btn.Bind(wx.EVT_BUTTON, self.on_throatsens)
        
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(500, 500))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_palpitation(self, event):
        global ev_autonomaura_1
        ev_autonomaura_1=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nPalpitation\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPalpitation\n"
               
    def on_shornessbreath(self, event):
        global ev_autonomaura_2
        ev_autonomaura_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nShortness of breath\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nShortness of breath\n"
        
    def on_choking(self, event):
        global ev_autonomaura_3
        ev_autonomaura_3=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nChoking\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nChoking\n"
        
    def on_urinaryurge(self, event):
        global ev_autonomaura_4
        ev_autonomaura_4=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nUrinary urge\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUrinary urge\n"
        
    def on_defecationurge(self, event):
        global ev_autonomaura_5
        ev_autonomaura_5=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nDefecation urge\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDefecation urge\n"
               
    def on_sexualfeelings(self, event):
        global ev_autonomaura_6
        ev_autonomaura_6=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nSexual feelings')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSexual feelings\n"
        
    def on_feelinghot(self, event):
        global ev_autonomaura_7
        ev_autonomaura_7=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nFeeling hot\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nFeeling hot\n"
        
    def on_feelingcold(self, event):
        global ev_autonomaura_8
        ev_autonomaura_8=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nFeeling cold\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nFeeling cold\n"
        
    def on_otherautonomaura(self, event):
        global ev_autonomaura_9
        ev_autonomaura_9=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nOther\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOther\n"
        
    def on_nausea(self, event):
        global ev_visceraura_1
        ev_visceraura_1=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNausea\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNausea\n"
               
    def on_abdominalpain(self, event):
        global ev_visceraura_2
        ev_visceraura_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAbdominal pain\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAbdominal pain\n"
        
    def on_statabdodisc(self, event):
        global ev_visceraura_3
        ev_visceraura_3=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nStatic abdominal discomfort\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nStatic abdominal discomfort\n"
        
    def on_risabdodisc(self, event):
        global ev_visceraura_4
        ev_visceraura_4=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRising abdominal discomfort\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRising abdominal discomfort\n"
        
    def on_chestpain(self, event):
        global ev_visceraura_5
        ev_visceraura_5=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nChest pain\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nChest pain\n"
               
    def on_chestdisc(self, event):
        global ev_visceraura_6
        ev_visceraura_6=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nChest discomfort\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nChest discomfort\n"
        
    def on_throatsens(self, event):
        global ev_visceraura_7
        ev_visceraura_7=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nThroat sensation\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nThroat sensation\n"
        
    def on_othervisceraura(self, event):
        global ev_visceraura_8
        ev_visceraura_8=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nOther\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOther\n"
#---------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------
class MyFrame_auras_experiential(wx.Frame):    #Class definition for GUI 'Experoiential auras'
    def __init__(self):
        super().__init__(parent=None, title='Experiential auras', size=(1000, 700))
        panel = wx.Panel(self)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                            
        fear_btn = wx.Button(panel, label='Fear', pos=(5, 300))
        fear_btn.Bind(wx.EVT_BUTTON, self.on_fear)
                
        anxiety_btn = wx.Button(panel, label='Anxiety', pos=(5, 350))
        anxiety_btn.Bind(wx.EVT_BUTTON, self.on_anxiety)
        
        anger_btn = wx.Button(panel, label='Anger', pos=(5, 400))
        anger_btn.Bind(wx.EVT_BUTTON, self.on_anger)
        
        elation_btn = wx.Button(panel, label='Elation', pos=(5, 450))
        elation_btn.Bind(wx.EVT_BUTTON, self.on_elation)
        
        pleasure_btn = wx.Button(panel, label='Pleasure', pos=(205, 300))
        pleasure_btn.Bind(wx.EVT_BUTTON, self.on_pleasure)
        
        forcedthinking_btn = wx.Button(panel, label='Forced thinking', pos=(205, 350))
        forcedthinking_btn.Bind(wx.EVT_BUTTON, self.on_forcedthinking)
        
        disorganisedthinking_btn = wx.Button(panel, label='Disorganised thinking', pos=(205, 400))
        disorganisedthinking_btn.Bind(wx.EVT_BUTTON, self.on_disorganisedthinking)
        
        multimodalhalucinations_btn = wx.Button(panel, label='Multimodal halucinations', pos=(205, 450))
        multimodalhalucinations_btn.Bind(wx.EVT_BUTTON, self.on_multimodalhalucinations)
        
        complexmemories_btn = wx.Button(panel, label='Complex memories', pos=(405, 300))
        complexmemories_btn.Bind(wx.EVT_BUTTON, self.on_complexmemories)
        
        dejavu_btn = wx.Button(panel, label='Deja vu', pos=(405, 350))
        dejavu_btn.Bind(wx.EVT_BUTTON, self.on_dejavu)
        
        jamaisvu_btn = wx.Button(panel, label='Jamais vu', pos=(405, 400))
        jamaisvu_btn.Bind(wx.EVT_BUTTON, self.on_jamaisvu)
        
        depersonalization_btn = wx.Button(panel, label='Depersonalization', pos=(405, 450))
        depersonalization_btn.Bind(wx.EVT_BUTTON, self.on_depersonalization)
        
        derealization_btn = wx.Button(panel, label='Derealization', pos=(605, 300))
        derealization_btn.Bind(wx.EVT_BUTTON, self.on_derealization)
        
        feelingofpresence_btn = wx.Button(panel, label='Feeling of presence', pos=(605, 350))
        feelingofpresence_btn.Bind(wx.EVT_BUTTON, self.on_feelingofpresence)
        
        outofbodyexperience_btn = wx.Button(panel, label='Out-of-body experience', pos=(605, 400))
        outofbodyexperience_btn.Bind(wx.EVT_BUTTON, self.on_outofbodyexperience)
        
        autoscopy_btn = wx.Button(panel, label='Autoscopy', pos=(605, 450))
        autoscopy_btn.Bind(wx.EVT_BUTTON, self.on_autoscopy)
        
        sadness_btn = wx.Button(panel, label='Sadness', pos=(805, 300))
        sadness_btn.Bind(wx.EVT_BUTTON, self.on_sadness)
        
        other_btn = wx.Button(panel, label='Other', pos=(805, 350))
        other_btn.Bind(wx.EVT_BUTTON, self.on_other)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(800, 600))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
                                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_fear(self, event):
        global ev_experaura_1
        ev_experaura_1=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nFear\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nFear\n"
               
    def on_anxiety(self, event):
        global ev_experaura_2
        ev_experaura_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAnxiety\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAnxiety\n"
        
    def on_anger(self, event):
        global ev_experaura_3
        ev_experaura_3=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAnger\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAnger\n"
        
    def on_elation(self, event):
        global ev_experaura_4
        ev_experaura_4=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nElation\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nElation\n"
        
    def on_pleasure(self, event):
        global ev_experaura_5
        ev_experaura_5=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nPleasure\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPleasure\n"
               
    def on_forcedthinking(self, event):
        global ev_experaura_6
        ev_experaura_6=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nForced thinking\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nForced thinking\n"
        
    def on_disorganisedthinking(self, event):
        global ev_experaura_7
        ev_experaura_7=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nDisorganized thinking\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDisorganized thinking\n"
        
    def on_multimodalhalucinations(self, event):
        global ev_experaura_8
        ev_experaura_8=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nMultimodal halucinations\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nMultimodal halucinations\n"
        
    def on_complexmemories(self, event):
        global ev_experaura_9
        ev_experaura_9=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nComplex memories\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nComplex memories\n"
        
    def on_dejavu(self, event):
        global ev_experaura_10
        ev_experaura_10=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nDeja vu\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDeja vu\n"
        
    def on_jamaisvu(self, event):
        global ev_experaura_11
        ev_experaura_11=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nJamais vu\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nJamais vu\n"
        
    def on_depersonalization(self, event):
        global ev_experaura_12
        ev_experaura_12=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nDepersonalization\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDepersonalization\n"
               
    def on_derealization(self, event):
        global ev_experaura_13
        ev_experaura_13=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nDerealization\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDerealization\n"
        
    def on_feelingofpresence(self, event):
        global ev_experaura_14
        ev_experaura_14=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nFeeling of presence\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nFeeling of presence\n"
        
    def on_outofbodyexperience(self, event):
        global ev_experaura_15
        ev_experaura_15=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nOut of body experience\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOut of body experience\n"
        
    def on_autoscopy(self, event):
        global ev_experaura_16
        ev_experaura_16=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAutoscopy\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAutoscopy\n"
        
    def on_other(self, event):
        global ev_experaura_17
        ev_experaura_17=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nOther\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOther\n"
        
    def on_sadness(self, event):
        global ev_experaura_18
        ev_experaura_18=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nSadness\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSadness\n"
#--------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------
class MyFrame_auras_olfactory(wx.Frame):    #Class definition for GUI 'Olfactory auras'
    def __init__(self):
        super().__init__(parent=None, title='Olfactory auras', size=(1000, 700))
        panel = wx.Panel(self)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
        
        pleasant_btn = wx.Button(panel, label='Pleasant', pos=(405, 300))
        pleasant_btn.Bind(wx.EVT_BUTTON, self.on_pleasant)
        
        unpleasant_btn = wx.Button(panel, label='Unpleasant', pos=(405, 450))
        unpleasant_btn.Bind(wx.EVT_BUTTON, self.on_unpleasant)
        
        neutral_btn = wx.Button(panel, label='Neutral', pos=(405, 600))
        neutral_btn.Bind(wx.EVT_BUTTON, self.on_neutral)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(600, 500))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
                                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_pleasant(self, event):
        global ev_olfacaura_1
        ev_olfacaura_1=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nPleasant\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPleasant\n"
        self.Close()
               
    def on_unpleasant(self, event):
        global ev_olfacaura_2
        ev_olfacaura_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nUnpleasant\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUnpleasant\n"
        self.Close()
        
    def on_neutral(self, event):
        global ev_olfacaura_3
        ev_olfacaura_3=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNeutral\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNeutral\n"
        self.Close()
#------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------
class MyFrame_physical_trauma(wx.Frame):  #Class definition for GUI 'Physical trauma'   
    def __init__(self):
        super().__init__(parent=None, title='Physical trauma', size=(1000, 700))
        panel = wx.Panel(self)
                
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                            
        headtrauma_btn = wx.Button(panel, label='Head trauma', pos=(5, 300))
        headtrauma_btn.Bind(wx.EVT_BUTTON, self.on_headtrauma)
                
        necktrauma_btn = wx.Button(panel, label='Neck trauma', pos=(5, 350))
        necktrauma_btn.Bind(wx.EVT_BUTTON, self.on_necktrauma)
        
        trunktrauma_btn = wx.Button(panel, label='Trunk trauma', pos=(5, 400))
        trunktrauma_btn.Bind(wx.EVT_BUTTON, self.on_trunktrauma)
        
        rtarmtrauma_btn = wx.Button(panel, label='Rt arm trauma', pos=(205, 300))
        rtarmtrauma_btn.Bind(wx.EVT_BUTTON, self.on_rtarmtrauma)
        
        ltarmtrauma_btn = wx.Button(panel, label='Lt arm trauma', pos=(205, 350))
        ltarmtrauma_btn.Bind(wx.EVT_BUTTON, self.on_ltarmtrauma)
        
        rtlegtrauma_btn = wx.Button(panel, label='Rt leg trauma', pos=(405, 300))
        rtlegtrauma_btn.Bind(wx.EVT_BUTTON, self.on_rtlegtrauma)
        
        ltlegtrauma_btn = wx.Button(panel, label='Lt leg trauma', pos=(405, 350))
        ltlegtrauma_btn.Bind(wx.EVT_BUTTON, self.on_ltlegtrauma)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(600, 500))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_headtrauma(self, event):
        global ev_trauma_1
        ev_trauma_1=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nHead trauma\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nHead trauma\n"
               
    def on_necktrauma(self, event):
        global ev_trauma_2
        ev_trauma_2=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNeck trauma\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNeck trauma\n"
        
    def on_trunktrauma(self, event):
        global ev_trauma_3
        ev_trauma_3=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nTrunk trauma\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nTrunk trauma\n"
        
    def on_rtarmtrauma(self, event):
        global ev_trauma_4
        ev_trauma_4=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt arm trauma\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt arm trauma\n"
        
    def on_ltarmtrauma(self, event):
        global ev_trauma_5
        ev_trauma_5=1               
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt arm trauma\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt arm trauma\n"
               
    def on_rtlegtrauma(self, event):
        global ev_trauma_6
        ev_trauma_6=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt leg trauma\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt leg trauma\n"
        
    def on_ltlegtrauma(self, event):
        global ev_trauma_7
        ev_trauma_7=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt leg trauma\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt leg trauma\n"
#----------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------
class MyFrame_distal_arm_clonic(wx.Frame): #Class definition for GUI 'Distal arm clonic movements'.    
    def __init__(self):
        super().__init__(parent=None, title='Distal arm clonic movements', size=(1000, 700))
        panel = wx.Panel(self)
    
        thumb = wx.Button(panel, label='Thumb', pos=(205, 405))
        thumb.Bind(wx.EVT_BUTTON, self.on_thumb)
        
        index_btn = wx.Button(panel, label='Index finger', pos=(205, 455))
        index_btn.Bind(wx.EVT_BUTTON, self.on_index)
        
        fingers345_btn = wx.Button(panel, label='Fingers 3, 4, 5', pos=(205, 505))
        fingers345_btn.Bind(wx.EVT_BUTTON, self.on_fingers345)
        
        wrist_btn = wx.Button(panel, label='Wrist', pos=(405, 405))
        wrist_btn.Bind(wx.EVT_BUTTON, self.on_wrist)
        
        elbow_btn = wx.Button(panel, label='Elbow', pos=(405, 455))
        elbow_btn.Bind(wx.EVT_BUTTON, self.on_elbow)

        next_step_btn = wx.Button(panel, label='Next step', pos=(275, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
        
        self.Show()
       
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_thumb(self, event):
        global ev_distalarmclon_1
        ev_distalarmclon_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nThumb\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nThumb\n"
       
    def on_index(self, event):
        global ev_distalarmclon_2
        ev_distalarmclon_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nIndex finger\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nIndex finger\n"
        
    def on_fingers345(self,event):
        global ev_distalarmclon_3
        ev_distalarmclon_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nFingers 3, 4, 5\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nFingers 3, 4, 5\n"
        
    def on_wrist(self,event):
        global ev_distalarmclon_4
        ev_distalarmclon_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nWrist\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nWrist\n"
        
    def on_elbow(self,event):
        global ev_distalarmclon_5
        ev_distalarmclon_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nElbow\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nElbow\n"
#--------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------
class MyFrame_distal_leg_clonic(wx.Frame): #Class definition for GUI 'Distal leg clonic movements'.    
    def __init__(self):
        super().__init__(parent=None, title='Distal leg clonic movements', size=(1000, 700))
        panel = wx.Panel(self)
    
        toes = wx.Button(panel, label='Toes', pos=(205, 405))
        toes.Bind(wx.EVT_BUTTON, self.on_toes)
        
        ankle_btn = wx.Button(panel, label='Ankle', pos=(205, 455))
        ankle_btn.Bind(wx.EVT_BUTTON, self.on_ankle)
        
        knee_btn = wx.Button(panel, label='Knee', pos=(205, 505))
        knee_btn.Bind(wx.EVT_BUTTON, self.on_knee)

        next_step_btn = wx.Button(panel, label='Next step', pos=(275, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
        
        self.Show()
          
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
        
    def on_toes(self, event):
        global ev_distallegclon_1
        ev_distallegclon_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nToes\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nToes\n"
       
    def on_ankle(self, event):
        global ev_distallegclon_2
        ev_distallegclon_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAnkle\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAnkle\n"
        
    def on_knee(self,event):
        global ev_distallegclon_3
        ev_distallegclon_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nKnee\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nKnee\n"
#-----------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------
class MyFrame_video_player_event(wx.Frame): #Class definition for GUI 'Distal leg clonic movements'.    
    def __init__(self):
        super().__init__(parent=None, title='Video-player event', size=(1000, 700))
        panel = wx.Panel(self)
    
        timing = wx.Button(panel, label='Insert timing', pos=(400, 400))
        timing.Bind(wx.EVT_BUTTON, self.on_timing)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
        
        self.Show()
        
    def on_timing(self, event):
        global ev_timing
        ev_timing=1        
        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nInsert timing')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nInsert timing\n"
        self.Close()        
#------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------
class MyFrame_exit(wx.Frame): #Class definition for GUI 'Digital Semiology exit'.    
    def __init__(self):
        super().__init__(parent=None, title='Digital Semiology exit', size=(800, 400))
        panel = wx.Panel(self)
    
        script_exit = wx.Button(panel, label='Exit from Digital Semiology', pos=(300, 280))
        script_exit.Bind(wx.EVT_BUTTON, self.on_script_exit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
        
        self.Show()
        
    def on_script_exit(self, event):
        global ev_exit
        ev_exit=1        
        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nExit\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nExit\n"
        self.Close()
#----------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------
class MyFrame_fencer(wx.Frame): #Class definition for GUI 'Fencer'.    
    def __init__(self):
        super().__init__(parent=None, title='Fencer', size=(700, 400))
        panel = wx.Panel(self)
    
        Rt_arm_fencer = wx.Button(panel, label='Rt arm', pos=(100, 200))
        Rt_arm_fencer.Bind(wx.EVT_BUTTON, self.on_Rt_arm_fencer)
        
        Lt_arm_fencer = wx.Button(panel, label='Lt arm', pos=(300, 200))
        Lt_arm_fencer.Bind(wx.EVT_BUTTON, self.on_Lt_arm_fencer)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
        
        self.Show()
        
    def on_Rt_arm_fencer(self, event):
        global ev_fencer_1
        ev_fencer_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt arm fencer\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt arm fencer\n"
        self.Close()
       
    def on_Lt_arm_fencer(self, event):
        global ev_fencer_2
        ev_fencer_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt arm fencer\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt arm fencer\n"
        self.Close()
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
class MyFrame_conjugate_dysconjugate_eye_movements(wx.Frame): #Class definition for GUI 'Conjugate vs. dysconjugate eye deveation'.    
    def __init__(self):
        super().__init__(parent=None, title='Conjugate vs. dysconjugate eye deveation', size=(1000, 700))
        panel = wx.Panel(self)
    
        conjugate = wx.Button(panel, label='Conjugate gaze', pos=(300, 400))
        conjugate.Bind(wx.EVT_BUTTON, self.on_conjugate)
        
        dysconjugate = wx.Button(panel, label='Dysconjugate gaze', pos=(500, 400))
        dysconjugate.Bind(wx.EVT_BUTTON, self.on_dysconjugate)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text

        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
        
        self.Show()
        
    def on_conjugate(self, event):
        global ev_conjugate_1
        ev_conjugate_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nConjugate eye movements\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nConjugate eye movements\n"
        self.Close()
       
    def on_dysconjugate(self, event):
        global ev_conjugate_2
        ev_conjugate_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nDysconjugate eye movements\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDysconjugate eye movements\n"
        self.Close()
#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------
class MyFrame_conjugate_gaze_deviation(wx.Frame): #Class definition for GUI 'Conjugate gaze deviation'.    
    def __init__(self):
        super().__init__(parent=None, title='Conjugate gaze deviation', size=(1000, 700))
        panel = wx.Panel(self)
    
        upforced = wx.Button(panel, label='Up forced', pos=(200, 400))
        upforced.Bind(wx.EVT_BUTTON, self.on_upforced)
        
        downforced_btn = wx.Button(panel, label='Down forced', pos=(200, 450))
        downforced_btn.Bind(wx.EVT_BUTTON, self.on_downforced)
       
        rightforced_btn = wx.Button(panel, label='Right forced', pos=(200, 500))
        rightforced_btn.Bind(wx.EVT_BUTTON, self.on_rightforced)
        
        leftforced_btn = wx.Button(panel, label='Left forced', pos=(200, 550))
        leftforced_btn.Bind(wx.EVT_BUTTON, self.on_leftforced)
        
        uprightforced_btn = wx.Button(panel, label='Up-right forced', pos=(350, 400))
        uprightforced_btn.Bind(wx.EVT_BUTTON, self.on_uprightforced)
        
        upleftforced_btn = wx.Button(panel, label='Up-left forced', pos=(350, 450))
        upleftforced_btn.Bind(wx.EVT_BUTTON, self.on_upleftforced)
        
        downrightforced_btn = wx.Button(panel, label='Down-right forced', pos=(350, 500))
        downrightforced_btn.Bind(wx.EVT_BUTTON, self.on_downrightforced)
        
        downleftforced_btn = wx.Button(panel, label='Down-left forced', pos=(350, 550))
        downleftforced_btn.Bind(wx.EVT_BUTTON, self.on_downleftforced)
        
        upnonforced_btn = wx.Button(panel, label='Up non-forced', pos=(500, 400))
        upnonforced_btn.Bind(wx.EVT_BUTTON, self.on_upnonforced)
        
        downnonforced_btn = wx.Button(panel, label='Down non-forced', pos=(500, 450))
        downnonforced_btn.Bind(wx.EVT_BUTTON, self.on_downnonforced)
        
        rtnonforced_btn = wx.Button(panel, label='Right non-forced', pos=(500, 500))
        rtnonforced_btn.Bind(wx.EVT_BUTTON, self.on_rtnonforced)
        
        ltnonforced_step_btn = wx.Button(panel, label='Left non-forced', pos=(500, 550))
        ltnonforced_step_btn.Bind(wx.EVT_BUTTON, self.on_ltnonforced)
        
        uprightnonforced_btn = wx.Button(panel, label='Up-right non-forced', pos=(650, 400))
        uprightnonforced_btn.Bind(wx.EVT_BUTTON, self.on_uprightnonforced)
        
        upleftnonforced_btn = wx.Button(panel, label='Up-left non-forced', pos=(650, 450))
        upleftnonforced_btn.Bind(wx.EVT_BUTTON, self.on_upleftnonforced)
        
        downrightnonforced_btn = wx.Button(panel, label='Down-right non-forced', pos=(650, 500))
        downrightnonforced_btn.Bind(wx.EVT_BUTTON, self.on_downrightnonforced)
        
        downleftnonforced_btn = wx.Button(panel, label='Down-left non-forced', pos=(650, 550))
        downleftnonforced_btn.Bind(wx.EVT_BUTTON, self.on_downleftnonforced)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
        
        self.Show()
        
    def on_upforced(self, event):
        global ev_gaze_1
        ev_gaze_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nUp forced\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUp forced\n"
        self.Close()
       
    def on_downforced(self, event):
        global ev_gaze_2
        ev_gaze_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nDown forced\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDown forced\n"
        self.Close()
        
    def on_rightforced(self,event):
        global ev_gaze_3
        ev_gaze_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRight forced\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRight forced\n"
        self.Close()
        
    def on_leftforced(self,event):
        global ev_gaze_4
        ev_gaze_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLeft forced\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLeft forced\n"
        self.Close()
        
    def on_uprightforced(self,event):
        global ev_gaze_5
        ev_gaze_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nUp right forced\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUp right forced\n"
        self.Close()
        
    def on_upleftforced(self,event):
        global ev_gaze_6
        ev_gaze_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nUp left forced\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUp left forced\n"
        self.Close()
        
    def on_downrightforced(self,event):
        global ev_gaze_7
        ev_gaze_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nDown right forced\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDown right forced\n"
        self.Close()
        
    def on_downleftforced(self,event):
        global ev_gaze_8
        ev_gaze_8=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nDown left forced\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDown left forced\n"
        self.Close()
        
    def on_upnonforced(self,event):
        global ev_gaze_9
        ev_gaze_9=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nUp non-forced\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUp non-forced\n"
        self.Close()
    
    def on_downnonforced(self,event):
        global ev_gaze_10
        ev_gaze_10=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nDown non-forced\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDown non-forced\n"
        self.Close()
        
    def on_rtnonforced(self,event):
        global ev_gaze_11
        ev_gaze_11=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRight non-forced\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRight non-forced\n"
        self.Close()
        
    def on_ltnonforced(self,event):
        global ev_gaze_12
        ev_gaze_12=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLeft non-forced\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLeft non-forced\n"
        self.Close()
        
    def on_uprightnonforced(self,event):
        global ev_gaze_13
        ev_gaze_13=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nUp right non-forced\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUp right non-forced\n"
        self.Close()
        
    def on_upleftnonforced(self,event):
        global ev_gaze_14
        ev_gaze_14=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nUp left non-forced\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nUp left non-forced\n"
        self.Close()
    
    def on_downrightnonforced(self,event):
        global ev_gaze_15
        ev_gaze_15=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nDown right non-forced\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDown right non-forced\n"
        self.Close()
        
    def on_downleftnonforced(self,event):
        global ev_gaze_16
        ev_gaze_16=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nDown left non-forced\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDown left non-forced\n"
        self.Close()
#-----------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------
class MyFrame_otherevent_body_parts(wx.Frame):  #Class definition for GUI 'Other event: body parts'.  
    def __init__(self):
        super().__init__(parent=None, title='Other or hyperkinetic event: body parts', size=(1000, 500))
        panel = wx.Panel(self)
            
        rarm_btn = wx.Button(panel, label='R arm', pos=(205, 205))
        rarm_btn.Bind(wx.EVT_BUTTON, self.on_rarm)
                
        larm_btn = wx.Button(panel, label='L arm', pos=(395, 205))
        larm_btn.Bind(wx.EVT_BUTTON, self.on_larm)
                
        neck_btn = wx.Button(panel, label='Neck/Head', pos=(300, 385))
        neck_btn.Bind(wx.EVT_BUTTON, self.on_neck)
                
        face_btn = wx.Button(panel, label='Face', pos=(205, 385))
        face_btn.Bind(wx.EVT_BUTTON, self.on_face)
                
        rleg_btn = wx.Button(panel, label='R leg', pos=(205, 295))
        rleg_btn.Bind(wx.EVT_BUTTON, self.on_rleg)
        
        lleg_btn = wx.Button(panel, label='L leg', pos=(395, 295))
        lleg_btn.Bind(wx.EVT_BUTTON, self.on_lleg)
        
        trunk_btn = wx.Button(panel, label='Trunk', pos=(395, 385))
        trunk_btn.Bind(wx.EVT_BUTTON, self.on_trunk)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(500, 420))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
#                
    def on_rarm(self, event):
        global ev_other_bp_1
        ev_other_bp_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nRt arm\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt arm\n"
               
    def on_larm(self, event):
        global ev_other_bp_2
        ev_other_bp_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nLt arm\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt arm\n"
                
    def on_neck(self,event):
        global ev_other_bp_3
        ev_other_bp_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNeck\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNeck\n"
                
    def on_face(self,event):
        global ev_other_bp_4
        ev_other_bp_4=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nFace\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nFace\n"
                
    def on_rleg(self,event):
        global ev_other_bp_5
        ev_other_bp_5=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nRt leg\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nRt leg\n"
                
    def on_lleg(self,event):
        global ev_other_bp_6
        ev_other_bp_6=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nLt leg\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLt leg\n"
        
    def on_trunk(self,event):
        global ev_other_bp_7
        ev_other_bp_7=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print('User selected: \nTrunk\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nTrunk\n"
#------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------
class MyFrame_overwrite_edit_file(wx.Frame):    
    def __init__(self):
        super().__init__(parent=None, title='Overwrite or edit file', size=(1000, 500))
        panel = wx.Panel(self)
            
        overwrite_btn = wx.Button(panel, label='Overwrite', pos=(100, 200))
        overwrite_btn.Bind(wx.EVT_BUTTON, self.on_overwrite)
                                               
        editfile_btn = wx.Button(panel, label='Edit', pos=(300, 200))
        editfile_btn.Bind(wx.EVT_BUTTON, self.on_editfile)
        
        exitwithoutsaving_btn = wx.Button(panel, label='Exit without saving', pos=(600, 350))
        exitwithoutsaving_btn.Bind(wx.EVT_BUTTON, self.on_exitwithoutsaving)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)  
                                                        
        self.Show()
                
    def on_overwrite(self, event):
        global ev_ovewrite_edit_1
        ev_ovewrite_edit_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nOverwrite file\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nOverwrite file\n"
        self.Close()
               
    def on_editfile(self, event):
        global ev_ovewrite_edit_2
        ev_ovewrite_edit_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nEdit file\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nEdit file\n"
        self.Close()
    def on_exitwithoutsaving(self, event):
        global ev_ovewrite_edit_3
        ev_ovewrite_edit_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nExit without saving\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nExit without saving\n"
        self.Close()
#--------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------
class MyFrame_atonic_fall(wx.Frame):    
    def __init__(self):
        super().__init__(parent=None, title='Fall or no fall during atonic seizure', size=(1000, 500))
        panel = wx.Panel(self)
            
        atonic_no_fall_btn = wx.Button(panel, label='No fall', pos=(300, 200))
        atonic_no_fall_btn.Bind(wx.EVT_BUTTON, self.on_atonic_no_fall)
                                               
        atonicfall_btn = wx.Button(panel, label='Fall', pos=(100, 200))
        atonicfall_btn.Bind(wx.EVT_BUTTON, self.on_atonicfall)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                        
        self.Show()
                
    def on_atonic_no_fall(self, event):
        global ev_atonicfall_1
        ev_atonicfall_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAtonic seizure without fall\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAtonic seizure without fall\n"
        self.Close()
               
    def on_atonicfall(self, event):
        global ev_atonicfall_2
        ev_atonicfall_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAtonic seizure with fall\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAtonic seizure with fall\n"
        self.Close()
#------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------
class MyFrame_general_vs_add_on(wx.Frame):    
    def __init__(self):
        super().__init__(parent=None, title='General view mode vs. add on mode', size=(1000, 500))
        panel = wx.Panel(self)
            
        overview_btn = wx.Button(panel, label='General view mode', pos=(100, 200))
        overview_btn.Bind(wx.EVT_BUTTON, self.on_overview)
                                               
        add_on_btn = wx.Button(panel, label='Add-on mode', pos=(300, 200))
        add_on_btn.Bind(wx.EVT_BUTTON, self.on_add_on)
                
        exitwithoutsaving_btn = wx.Button(panel, label='Exit without saving', pos=(600, 350))
        exitwithoutsaving_btn.Bind(wx.EVT_BUTTON, self.on_exitwithoutsaving)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                                                        
        self.Show()
                
    def on_overview(self, event):
        global ev_mode_1
        ev_mode_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nGeneral view mode\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nGeneral view mode\n"
        self.Close()
               
    def on_add_on(self, event):
        global ev_mode_2
        ev_mode_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nAdd-on mode\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nAdd-on mode\n"
        self.Close()
        
    def on_exitwithoutsaving(self, event):
        global ev_mode_3
        ev_mode_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nExit without saving\n')
        software_user_dialogue+="\n"+current_time+"\nExit without saving\n"
        self.Close()
#-------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------
class MyFrame_drop(wx.Frame):    
    def __init__(self):
        super().__init__(parent=None, title='Drop attack vs. no drop attack', size=(1000, 500))
        panel = wx.Panel(self)
            
        drop_btn = wx.Button(panel, label='Drop attack', pos=(200, 200))
        drop_btn.Bind(wx.EVT_BUTTON, self.on_drop)
                                               
        nodrop_btn = wx.Button(panel, label='No drop attack', pos=(600, 200))
        nodrop_btn.Bind(wx.EVT_BUTTON, self.on_nodrop)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                                                        
        self.Show()
                
    def on_drop(self, event):
        global ev_drop_1
        ev_drop_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nDrop attack\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nnDrop attack\n"
        self.Close()
               
    def on_nodrop(self, event):
        global ev_drop_2
        ev_drop_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNo drop attack\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNo drop attack\n"
        self.Close()
#-------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------
class MyFrame_fall_control(wx.Frame):    
        def __init__(self):
            super().__init__(parent=None, title='Fall control', size=(1000, 700))
            panel = wx.Panel(self)
                
            uncontrol_btn = wx.Button(panel, label='Uncontrolled fall', pos=(300, 105))
            uncontrol_btn.Bind(wx.EVT_BUTTON, self.on_uncontrol)
                                                   
            completecontrol_btn = wx.Button(panel, label='Fall completelly controled bypatient', pos=(300, 205))
            completecontrol_btn.Bind(wx.EVT_BUTTON, self.on_completecontrol)
            
            partialcontrol_btn = wx.Button(panel, label='Fall partially controled bypatient', pos=(300, 305))
            partialcontrol_btn.Bind(wx.EVT_BUTTON, self.on_partialcontrol)
            
            controlbyother_btn = wx.Button(panel, label='Fall controled by other', pos=(300, 405))
            controlbyother_btn.Bind(wx.EVT_BUTTON, self.on_controlbyother)
            
            notclear_btn = wx.Button(panel, label='Fall control is not clear', pos=(300, 505))
            notclear_btn.Bind(wx.EVT_BUTTON, self.on_notclear)
            
            lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
            global wx_text
            txt = wx_text
            
            font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
            lbl.SetFont(font) 
            lbl.SetLabel(txt)
                                                            
            self.Show()
                    
        def on_uncontrol(self, event):
            global ev_fallcontrol_1
            ev_fallcontrol_1=1                    
            global software_user_dialogue        
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print ('User selected: \nUncontrolled fall\n')
            software_user_dialogue+="\n"+current_time+"\nUser selected:\nUncontrolled fall\n"
            self.Close()
                   
        def on_completecontrol(self, event):
            global ev_fallcontrol_2
            ev_fallcontrol_2=1            
            global software_user_dialogue        
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print ('User selected: \nFall completely controlled by patient\n')
            software_user_dialogue+="\n"+current_time+"\nUser selected:\nFall completely controlled by patient\n"
            self.Close()
    
        def on_partialcontrol(self, event):
            global ev_fallcontrol_3
            ev_fallcontrol_3=1            
            global software_user_dialogue        
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print ('User selected: \nFall partially controlled by patient\n')
            software_user_dialogue+="\n"+current_time+"\nUser selected:\nFall partially controlled by patient\n"
            self.Close()
            
        def on_controlbyother(self, event):
            global ev_fallcontrol_4
            ev_fallcontrol_4=1            
            global software_user_dialogue        
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print ('User selected: \nFall controlled by other\n')
            software_user_dialogue+="\n"+current_time+"\nUser selected:\nFall controlled by other\n"
            self.Close()   
    
        def on_notclear(self, event):
            global ev_fallcontrol_5
            ev_fallcontrol_5=1            
            global software_user_dialogue        
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print ('User selected: \nFall control is not clear\n')
            software_user_dialogue+="\n"+current_time+"\nUser selected:\nFall control is not clear\n"
            self.Close()
#---------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------
class MyFrame_free_text_comment(wx.Frame):    
    def __init__(self):
        super().__init__(parent=None, title='Free text comment', size=(1000, 350))
        panel = wx.Panel(self)
            
        shortcomment_btn = wx.Button(panel, label='Write comment', pos=(200, 150))
        shortcomment_btn.Bind(wx.EVT_BUTTON, self.on_shortcomment)
                                                       
#        longcomment_btn = wx.Button(panel, label='Long comment: write in console', pos=(300, 405))
#        longcomment_btn.Bind(wx.EVT_BUTTON, self.on_longcomment)
        
        nocomment_btn = wx.Button(panel, label='No comment', pos=(400, 150))
        nocomment_btn.Bind(wx.EVT_BUTTON, self.on_nocomment)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                                                        
        self.Show()
                
    def on_shortcomment(self, event):
        global ev_comment_1
        ev_comment_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nWrite comment\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nWrite comment\n"
        self.Close()
               
#    def on_longcomment(self, event):
#        global ev_comment_2
#        ev_comment_2=1        
#        global software_user_dialogue        
#        now = datetime.now()
#        current_time = now.strftime("%H:%M:%S")
#        print(current_time)
#        print ('User selected: \nLong comment\n')
#        software_user_dialogue+="\n"+current_time+"\nUser selected:\nLong comment\n"
#        self.Close()

    def on_nocomment(self, event):
        global ev_comment_3
        ev_comment_3=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNo comment\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNo comment\n"
        self.Close()
#-----------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------
class MyFrame_save_file(wx.Frame):    
    def __init__(self):
        super().__init__(parent=None, title='Save file', size=(1000, 700))
        panel = wx.Panel(self)
            
        save_btn = wx.Button(panel, label='Save', pos=(200, 300))
        save_btn.Bind(wx.EVT_BUTTON, self.on_save)
                                                       
        donotsave_btn = wx.Button(panel, label='Do not save', pos=(500, 300))
        donotsave_btn.Bind(wx.EVT_BUTTON, self.on_donotsave)
                        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                                                        
        self.Show()
                
    def on_save(self, event):
        global ev_save_1
        ev_save_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nSave\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nSave\n"
        self.Close()
               
    def on_donotsave(self, event):
        global ev_save_2
        ev_save_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ("User selected: \nDo not save\n")
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nDo not save\n"
        self.Close()
#-------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------
class MyFrame_complete_vs_partial(wx.Frame):    
    def __init__(self):
        super().__init__(parent=None, title='Complete vs. Partial', size=(1000, 400))
        panel = wx.Panel(self)
            
        comp_btn = wx.Button(panel, label='Complete', pos=(200, 200))
        comp_btn.Bind(wx.EVT_BUTTON, self.on_comp)
                                                       
        part_btn = wx.Button(panel, label='Partial', pos=(500, 200))
        part_btn.Bind(wx.EVT_BUTTON, self.on_part)
                        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                                                        
        self.Show()
                
    def on_comp(self, event):
        global ev_completeness_1
        ev_completeness_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nComplete\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nComplete\n"
        self.Close()
               
    def on_part(self, event):
        global ev_completeness_2
        ev_completeness_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nPartial\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nPartial\n"
        self.Close()
#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------
class MyFrame_event_editing(wx.Frame):    
    def __init__(self):
        super().__init__(parent=None, title='Event editing', size=(1000, 700))
        panel = wx.Panel(self)
            
        edit_eventstart_btn = wx.Button(panel, label='Event start', pos=(200, 300))
        edit_eventstart_btn.Bind(wx.EVT_BUTTON, self.on_edit_eventstart)
                                                       
        edit_eventend_btn = wx.Button(panel, label='Event end', pos=(400, 300))
        edit_eventend_btn.Bind(wx.EVT_BUTTON, self.on_edit_eventend)
        
        edit_behaviors_btn = wx.Button(panel, label='Behaviors', pos=(600, 300))
        edit_behaviors_btn.Bind(wx.EVT_BUTTON, self.on_edit_behaviors)
        
        quit_btn = wx.Button(panel, label='Next step', pos=(600, 500))
        quit_btn.Bind(wx.EVT_BUTTON, self.on_quit)
                        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)
                                                        
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
                
    def on_edit_eventstart(self, event):        
        global ev_event_editing_1
        ev_event_editing_1=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)        
        print ('User selected: \nediting event start\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nediting event start\n"        
               
    def on_edit_eventend(self, event):
        global ev_event_editing_2
        ev_event_editing_2=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)        
        print ('User selected: \nediting event end\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nediting event end\n"        
        
    def on_edit_behaviors(self, event):
        global ev_event_editing_3
        ev_event_editing_3=1
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)        
        print ('User selected: \nediting behaviors\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nediting behaviors\n"
#-------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------
class MyFrame_tonic_elbow(wx.Frame):  #Class definition for GUI 'Other event: body parts'.  
    def __init__(self):
        super().__init__(parent=None, title='Tonic position of Elbow', size=(1000, 700))
        panel = wx.Panel(self)
            
        elbowflex_btn = wx.Button(panel, label='Elbow in flexion', pos=(100, 405))
        elbowflex_btn.Bind(wx.EVT_BUTTON, self.on_elbowflex)
                
        elbowext_btn = wx.Button(panel, label='Elbow in extension', pos=(350, 405))
        elbowext_btn.Bind(wx.EVT_BUTTON, self.on_elbowext)
        
        next_step_btn = wx.Button(panel, label='Next step', pos=(400, 580))
        next_step_btn.Bind(wx.EVT_BUTTON, self.on_quit)
        
        lbl = wx.StaticText(panel,-1,style = wx.ALIGN_LEFT)
        global wx_text
        txt = wx_text
        
        font = wx.Font(18, wx.ROMAN, wx.NORMAL, wx.NORMAL) 
        lbl.SetFont(font) 
        lbl.SetLabel(txt)        
                
        self.Show()
        
    def on_quit(self, event):
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nNext step\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nNext step\n"
        self.Close()
                
    def on_elbowflex(self, event):
        global ev_tonic_elbow_1
        ev_tonic_elbow_1=1                
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nElbow in flexion\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nElbow in flexion\n"
        self.Close()
               
    def on_elbowext(self, event):
        global ev_tonic_elbow_2
        ev_tonic_elbow_2=1        
        global software_user_dialogue        
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print(current_time)
        print ('User selected: \nElbow in extension\n')
        software_user_dialogue+="\n"+current_time+"\nUser selected:\nElbow in extension\n"
        self.Close()
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#The main part of the program
event_editor=0
editing_mode=0
ds_terms_english()
ictal_episode_code=''
videoplayer=''
text_file=open("ictal_episode_code.txt", "w", encoding='utf-8')
text_file.write(ictal_episode_code)
text_file.close()

text_file=open("video-player_go_no_go.txt", "w", encoding='utf-8')
text_file.write(str(videoplayer))
text_file.close()
ds_introduction()
if ds_starter[8]!=0:
    simple_movements=ds_simple_movements(ds_starter, editing_mode)
    ict=ict+simple_movements
    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
    report=ds_reporter(ictus)
    save_variable_draft()
if ds_starter[9]!=0:
    automatic_movements=ds_automatisms(ds_starter, editing_mode)
    ict=ict+automatic_movements
    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
    report=ds_reporter(ictus)
    save_variable_draft()
if ds_starter[15]!=0:
    autonomic_phenomena=ds_autonomic(ds_starter, editing_mode)
    ict=ict+autonomic_phenomena
    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
    report=ds_reporter(ictus)
    save_variable_draft()
if ds_starter[11]!=0:
    eye_movements=ds_eye_movements(ds_starter, editing_mode)
    ict=ict+eye_movements
    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
    report=ds_reporter(ictus)
    save_variable_draft()
if ds_starter[10]!=0:
    hypermotor_movements=ds_hypermotor(ds_starter, editing_mode)
    ict=ict+hypermotor_movements
    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
    report=ds_reporter(ictus)
    save_variable_draft()
if ds_starter[12]!=0:
    voice_phenomena=ds_voice(ds_starter, editing_mode)
    ict=ict+voice_phenomena
    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
    report=ds_reporter(ictus)
    save_variable_draft()
if ds_starter[13]!=0:
    dialeptic_behavior=ds_dialeptic(ds_starter, editing_mode)
    ict=ict+dialeptic_behavior
    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
    report=ds_reporter(ictus)
    save_variable_draft()
if ds_starter[14]!=0:
    gtcs_features=ds_gtcs(ds_starter, editing_mode)
    ict=ict+gtcs_features
    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
    report=ds_reporter(ictus)
    save_variable_draft()
if ds_starter[16]!=0:
    aura_report=ds_aura(ds_starter, editing_mode)
    ict=ict+aura_report
    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
    report=ds_reporter(ictus)
    save_variable_draft()
if ds_starter[17]!=0:
    other_event=ds_other(ds_starter, editing_mode)
    ict=ict+other_event
    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
    report=ds_reporter(ictus)
    save_variable_draft()
if ds_starter[21]!=0:
    triger_event=ds_triger(ds_starter)
    ict=ict+triger_event
    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
    report=ds_reporter(ictus)
    save_variable_draft()
ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))

# Reviewing the report
report=ds_reporter(ictus)
if ictus!=[] and ds_starter[22]==1:
    jacksonian_report=Jacksonian(ictus)
    report+=jacksonian_report
    focality_report=Focality(ictus)
    report+=focality_report
    PNES_score_report=PNES_score(ictus, ds_starter)
    report+=PNES_score_report
    SUDEP_score_report=SUDEP_score(ictus, ds_starter)
    report+=SUDEP_score_report
nm=ds_starter[0]
if  (file_exist==0 or overwrite_vs_edit==0) and general_add_on!=2 :
    #report=''
    wx_text=nm+''', if you want to see the report,
                      push "yes", if not -"no"'''
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print(current_time)
    print("Software:\n" +wx_text+"\n")
    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
    see_report=''
    ev_yesno_1=''
    ev_yesno_2=''
    if __name__ == '__main__':
        app = wx.App()
        frame = MyFrame_yes_no()    
        app.MainLoop()
    app=[]; app = wx.App(None)
    del app
    wx_text=''
    if ev_yesno_1=='y':
        see_report='y'
    if ev_yesno_2=='n':
        see_report='n'
    print (see_report)
    
    if see_report=='y':        
        print(report)
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Editing mode: 4 parts: 1 Removal event. 2 Addition event. 3 Editing event. 4 Editing introduction 5.Editing report once again.
#see_report=''
edit_report=''
if general_add_on!=2 and overwrite_vs_edit!=1:   
    wx_text=nm+''', if you want to enter the editing mode,
        push "yes", if not -"no"'''
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print(current_time)
    print("Software:\n" +wx_text+"\n")
    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
    edit_report=''
    ev_yesno_1=''
    ev_yesno_2=''
    if __name__ == '__main__':
        app = wx.App()
        frame = MyFrame_yes_no()    
        app.MainLoop()
    app=[]; app = wx.App(None)
    del app
    wx_text=''
    if ev_yesno_1=='y':
        edit_report='y'
    if ev_yesno_2=='n':
        edit_report='n'
                       
if edit_report=='y' or general_add_on==2 or overwrite_vs_edit==1:
    editing_mode=1
    edit_once_again='y'
    while edit_once_again=='y':                                             
            addevent=''
            while addevent!=0:
                print (report)
                wx_text=nm+''', if you want to add event, push the button corresponding to event type you want to add.
                         If you don't want to add event, push the button "Next step".'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
                ev_addev_1=''
                ev_addev_2=''
                ev_addev_3=''
                ev_addev_4=''
                ev_addev_5=''
                ev_addev_6=''
                ev_addev_7=''
                ev_addev_8=''
                ev_addev_9=''
                ev_addev_10=''
                ev_addev_11=''
                ev_addev_12=''
                exit_loop=''
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_event_addition()    
                    app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                #ds_starter_1=ds_starter[0:8]+[0]*22
                if ev_addev_1==1:
                    ds_starter[8]+=1
                    simple_movements=ds_simple_movements(ds_starter, editing_mode)
                    ict=ict+simple_movements
                    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                    report=ds_reporter(ictus)
                    if ictus!=[] and ds_starter[22]==1:
                        jacksonian_report=Jacksonian(ictus)
                        report+=jacksonian_report
                        focality_report=Focality(ictus)
                        report+=focality_report
                        PNES_score_report=PNES_score(ictus, ds_starter)
                        report+=PNES_score_report
                        SUDEP_score_report=SUDEP_score(ictus, ds_starter)
                        report+=SUDEP_score_report
                    save_variable_draft()
                    addevent=''
                if ev_addev_2==1:
                    ds_starter[9]+=1
                    automatic_movements=ds_automatisms(ds_starter, editing_mode)
                    ict=ict+automatic_movements
                    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                    report=ds_reporter(ictus)
                    if ictus!=[] and ds_starter[22]==1:
                        jacksonian_report=Jacksonian(ictus)
                        report+=jacksonian_report
                        focality_report=Focality(ictus)
                        report+=focality_report
                        PNES_score_report=PNES_score(ictus, ds_starter)
                        report+=PNES_score_report
                        SUDEP_score_report=SUDEP_score(ictus, ds_starter)
                        report+=SUDEP_score_report
                    save_variable_draft()
                    addevent=''
                if ev_addev_8==1:
                    ds_starter[15]+=1
                    autonomic_phenomena=ds_autonomic(ds_starter, editing_mode)
                    ict=ict+autonomic_phenomena
                    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                    report=ds_reporter(ictus)
                    if ictus!=[] and ds_starter[22]==1:
                        jacksonian_report=Jacksonian(ictus)
                        report+=jacksonian_report
                        focality_report=Focality(ictus)
                        report+=focality_report
                        PNES_score_report=PNES_score(ictus, ds_starter)
                        report+=PNES_score_report
                        SUDEP_score_report=SUDEP_score(ictus, ds_starter)
                        report+=SUDEP_score_report
                    save_variable_draft()
                    addevent=''
                if ev_addev_4==1:
                    ds_starter[11]+=1
                    eye_movements=ds_eye_movements(ds_starter, editing_mode)
                    ict=ict+eye_movements
                    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                    report=ds_reporter(ictus)
                    if ictus!=[] and ds_starter[22]==1:
                        jacksonian_report=Jacksonian(ictus)
                        report+=jacksonian_report
                        focality_report=Focality(ictus)
                        report+=focality_report
                        PNES_score_report=PNES_score(ictus, ds_starter)
                        report+=PNES_score_report
                        SUDEP_score_report=SUDEP_score(ictus, ds_starter)
                        report+=SUDEP_score_report
                    save_variable_draft()
                    addevent=''
                if ev_addev_3==1:
                    ds_starter[10]+=1
                    hypermotor_movements=ds_hypermotor(ds_starter, editing_mode)
                    ict=ict+hypermotor_movements
                    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                    report=ds_reporter(ictus)
                    if ictus!=[] and ds_starter[22]==1:
                        jacksonian_report=Jacksonian(ictus)
                        report+=jacksonian_report
                        focality_report=Focality(ictus)
                        report+=focality_report
                        PNES_score_report=PNES_score(ictus, ds_starter)
                        report+=PNES_score_report
                        SUDEP_score_report=SUDEP_score(ictus, ds_starter)
                        report+=SUDEP_score_report
                    save_variable_draft()
                    addevent=''
                if ev_addev_5==1:
                    ds_starter[12]+=1
                    voice_phenomena=ds_voice(ds_starter, editing_mode)
                    ict=ict+voice_phenomena
                    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                    report=ds_reporter(ictus)
                    if ictus!=[] and ds_starter[22]==1:
                        jacksonian_report=Jacksonian(ictus)
                        report+=jacksonian_report
                        focality_report=Focality(ictus)
                        report+=focality_report
                        PNES_score_report=PNES_score(ictus, ds_starter)
                        report+=PNES_score_report
                        SUDEP_score_report=SUDEP_score(ictus, ds_starter)
                        report+=SUDEP_score_report
                    save_variable_draft()
                    addevent=''
                if ev_addev_6==1:
                    ds_starter[13]+=1
                    dialeptic_behavior=ds_dialeptic(ds_starter, editing_mode)
                    ict=ict+dialeptic_behavior
                    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                    report=ds_reporter(ictus)
                    if ictus!=[] and ds_starter[22]==1:
                        jacksonian_report=Jacksonian(ictus)
                        report+=jacksonian_report
                        focality_report=Focality(ictus)
                        report+=focality_report
                        PNES_score_report=PNES_score(ictus, ds_starter)
                        report+=PNES_score_report
                        SUDEP_score_report=SUDEP_score(ictus, ds_starter)
                        report+=SUDEP_score_report
                    save_variable_draft()
                    addevent=''
                if ev_addev_7==1:
                    ds_starter[14]+=1                
                    gtcs_features=ds_gtcs(ds_starter, editing_mode)               
                    ict=ict+gtcs_features
                    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                    report=ds_reporter(ictus)
                    if ictus!=[] and ds_starter[22]==1:
                        jacksonian_report=Jacksonian(ictus)
                        report+=jacksonian_report
                        focality_report=Focality(ictus)
                        report+=focality_report
                        PNES_score_report=PNES_score(ictus, ds_starter)
                        report+=PNES_score_report
                        SUDEP_score_report=SUDEP_score(ictus, ds_starter)
                        report+=SUDEP_score_report
                    save_variable_draft()
                    addevent=''
                if ev_addev_9==1:
                    ds_starter[16]+=1
                    aura_report=ds_aura(ds_starter, editing_mode)
                    ict=ict+aura_report
                    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                    report=ds_reporter(ictus)
                    if ictus!=[] and ds_starter[22]==1:
                        jacksonian_report=Jacksonian(ictus)
                        report+=jacksonian_report
                        focality_report=Focality(ictus)
                        report+=focality_report
                        PNES_score_report=PNES_score(ictus, ds_starter)
                        report+=PNES_score_report
                        SUDEP_score_report=SUDEP_score(ictus, ds_starter)
                        report+=SUDEP_score_report
                    save_variable_draft()
                    addevent=''
                if ev_addev_10==1:
                    ds_starter[17]+=1
                    other_event=ds_other(ds_starter, editing_mode)
                    ict=ict+other_event
                    ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                    report=ds_reporter(ictus)
                    if ictus!=[] and ds_starter[22]==1:
                        jacksonian_report=Jacksonian(ictus)
                        report+=jacksonian_report
                        focality_report=Focality(ictus)
                        report+=focality_report
                        PNES_score_report=PNES_score(ictus, ds_starter)
                        report+=PNES_score_report
                        SUDEP_score_report=SUDEP_score(ictus, ds_starter)
                        report+=SUDEP_score_report
                    save_variable_draft()
                    addevent=''
                if ev_addev_11==1:
                    if ds_starter[21]==1:
                        print('''\a\nSOMETHING WRONG!\n
                          YOU CANNOT DEFINE MORE THAN ONE TRIGER EVENT!\n
                          PLEASE TRY AGAIN!''')
                    else:
                        ds_starter[21]=1
                        triger_event=ds_triger(ds_starter)
                        ict=ict+triger_event
                        ictus=sorted(ict, key=lambda c:int(c[2][0:2])*60**2+int(c[2][2:4])*60+int(c[2][4:]))
                        report=ds_reporter(ictus)
                        if ictus!=[] and ds_starter[22]==1:
                            jacksonian_report=Jacksonian(ictus)
                            report+=jacksonian_report
                            focality_report=Focality(ictus)
                            report+=focality_report
                            PNES_score_report=PNES_score(ictus, ds_starter)
                            report+=PNES_score_report
                            SUDEP_score_report=SUDEP_score(ictus, ds_starter)
                            report+=SUDEP_score_report
                        save_variable_draft()
                        addevent=''                                    
                if exit_loop==1:
                    addevent=0
                if ev_addev_12==1:
                    addevent=0
                    global ev_same_1, ev_save_2
                    ev_save_1=''
                    ev_save_2=''
                    wx_text=nm+''', plesase select: whether or not you want to save your input to the ictal episode
                    interpritation during this session'''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print("Software:\n" +wx_text+"\n")
                    software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
                    if __name__ == '__main__':
                        app = wx.App()
                        frame = MyFrame_save_file()    
                        app.MainLoop()
                    app=[]; app = wx.App(None)
                    del app
                    if ev_save_1==1:
                        ictal_episode=Ictal(ictus,ds_starter,report)
                        save_variable()
                        try:
                            os.remove('ictal_episode_' + ds_starter[18]+'_draft.dat')
                            print('The draft-file has been removed')
                        except:
                            print("The drat-file doesn't exist")
                        wx_text=nm+''', the new file was saved, thank you for finalizing ictal episode interpretation
                        Please,  push the button "Exit" to close Digital Semiology.'''
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
                        ev_exit=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_exit()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        if ev_exit==1:
                            sys.exit()
                    if ev_save_2==1:                        
                        wx_text=nm+''', the new file was NOT saved,
                        thank you for finalizing ictal episode interpretation
                        Please,  push the button "Exit" to close Digital Semiology.'''
                        try:
                            os.remove('ictal_episode_' + ds_starter[18]+'_draft.dat')
                            print('The draft-file has been removed')
                        except:
                            print("The drat-file doesn't exist")
                        now = datetime.now()
                        current_time = now.strftime("%H:%M:%S")
                        print(current_time)
                        print("Software:\n" +wx_text+"\n")
                        software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
                        ev_exit=''
                        if __name__ == '__main__':
                            app = wx.App()
                            frame = MyFrame_exit()    
                            app.MainLoop()
                        app=[]; app = wx.App(None)
                        del app
                        if ev_exit==1:
                            sys.exit()
#        Removal event                    
            remove=''
            while remove!=0:
                wx_text=nm+''', if you want to remove the reported event, write the event number, which should be removed. 
                Otherwise, write 0. At the end press this button'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_write()    
                    app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                remove=value
                print(value+"\n")
                software_user_dialogue+=value+"\n"
                try:
                    remove=int(remove)
                except:
                    remove=''
                if remove in range (1,len(ictus)+1):
                    
                    if ictus[remove-1][0]==10: #trigger
                        ds_starter[21]=0
                        
                    if ictus[remove-1][0]==0:  #simple motor
                        ds_starter[8]-=1
                        
                    if ictus[remove-1][0]==1:  #automatic event
                        ds_starter[9]-=1
                        
                    if ictus[remove-1][0]==2:   #autonomic
                        ds_starter[15]-=1
                        
                    if ictus[remove-1][0]==3:  #eye movement
                        ds_starter[11]-=1
                        
                    if ictus[remove-1][0]==4:  #hypermotor
                        ds_starter[10]-=1
                        
                    if ictus[remove-1][0]==5:  #voice
                        ds_starter[12]-=1
                        
                    if ictus[remove-1][0]==6:  #dialeptic 
                        ds_starter[13]-=1
                        
                    if ictus[remove-1][0]==7:  #GTCS
                        ds_starter[14]-=1
                        
                    if ictus[remove-1][0]==8:   #aura
                        ds_starter[16]-=1
                        
                    if ictus[remove-1][0]==9:   #other
                        ds_starter[17]-=1
                                        
                    ictus=ictus[0:remove-1]+ictus[remove:]
                    report=ds_reporter(ictus)
                    jacksonian_report=Jacksonian(ictus)
                    report+=jacksonian_report
                    focality_report=Focality(ictus)
                    report+=focality_report
                    PNES_score_report=PNES_score(ictus, ds_starter)
                    report+=PNES_score_report
                    SUDEP_score_report=SUDEP_score(ictus, ds_starter)
                    report+=SUDEP_score_report        
                    print(report)
                           
                elif remove==0:
                    remove=0
                else:
                    remove=''
                    now = datetime.now()
                    current_time = now.strftime("%H:%M:%S")
                    print(current_time)
                    print ('''\aSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n''')
                    software_user_dialogue+="\n"+current_time+'''\nSoftware:\nSOMETHING WRONG! PLEASE TRY AGAIN!\n'''
                    
        #Editing event            
            ictus_x=ds_event_editor(ds_starter, ictus)
            ictus=copy.copy(ictus_x)            
            event_editor=0
            
        #Editing introduction
            i_starter=['']*len(ds_starter)
            if ds_starter[3]==0:
                i_starter[3]='No'
            elif ds_starter[3]==1:
                i_starter[3]='Yes'
            else: 
                i_starter[3]='Undefined'
                
            if ds_starter[4]==0:
                i_starter[4]='No chance'
            elif ds_starter[4]==1:
                i_starter[4]='Possibly'
            elif ds_starter[4]==2:
                i_starter[4]='Certainly'
            elif ds_starter[4]==3:
                i_starter[4]='No opinion'
            else: 
                i_starter[4]='Undefined'
                
            if ds_starter[5]==0:
                i_starter[5]='No chance'
            elif ds_starter[5]==1:
                i_starter[5]='Possibly'
            elif ds_starter[5]==2:
                i_starter[5]='Certainly'
            elif ds_starter[5]==3:
                i_starter[5]='No opinion'
            else: 
                i_starter[5]='Undefined'
                
            if ds_starter[6]==0:
                i_starter[6]='No chance'
            elif ds_starter[6]==1:
                i_starter[6]='Possibly'
            elif ds_starter[6]==2:
                i_starter[6]='Certainly'
            elif ds_starter[6]==3:
                i_starter[6]='No opinion'
            else: 
                i_starter[6]='Undefined'
                
            if ds_starter[19]==0:
                i_starter[19]='No chance'
            elif ds_starter[19]==1:
                i_starter[19]='Possibly'
            elif ds_starter[19]==2:
                i_starter[19]='Certainly'
            elif ds_starter[19]==3:
                i_starter[19]='No opinion'
            else: 
                i_starter[19]='Undefined'
                
            if ds_starter[7]=='y':
                i_starter[7]='Yes'
            elif ds_starter[7]=='n':
                i_starter[7]='No'
            elif ds_starter[7]==3:
                i_starter[7]='No opinion'            
            else: 
                i_starter[7]='Undefined'
                
            print('''INTRODUCTION INCLUDES NOW FOLLOWONG INFORMATION\
                  \n\nIctal episode code '''+ds_starter[18]+\
                  '''\nIctal episode date '''+ds_starter[1]+\
                  '''\nIctal episode start time '''+ds_starter[2]+\
                  '''\nSeeing EEG during video interpritation '''+i_starter[3]+\
                  '''\nThe chance that this ictal episode is just a baseline behavior '''+i_starter[4]+\
                  '''\nThe chance that this ictal episode is PNES '''+i_starter[5]+\
                  '''\nThe chance that this ictal episode is pathologic non-epielptic non-psychogenic '''+i_starter[6]+\
                  '''\nThe chance that this ictal episode started from sleep '''+i_starter[19]+\
                  '''\nCognitive or motor testing during ictal episode '''+i_starter[7]+'\n')
        
            wx_text=nm+''', if you want to edit introduction,
                          push "yes", if not -"no"'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
            print(report)
            edit_introduct=''
            ev_yesno_1=''
            ev_yesno_2=''
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_yes_no()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            wx_text=''
            if ev_yesno_1=='y':
                edit_introduct='y'
            if ev_yesno_2=='n':
                edit_introduct='n'            
            if edit_introduct=='y':
                edit_starter=copy.copy(ds_starter)
                edit_introduction()
                ds_starter=copy.copy(edit_starter)
                report=ds_reporter(ictus)
                jacksonian_report=Jacksonian(ictus)
                report+=jacksonian_report
                focality_report=Focality(ictus)
                report+=focality_report
                PNES_score_report=PNES_score(ictus, ds_starter)
                report+=PNES_score_report
                SUDEP_score_report=SUDEP_score(ictus, ds_starter)
                report+=SUDEP_score_report
        #Edit report once again
            wx_text=nm+''', if you want to edit the report once again,
                          push "yes", if not -"no"'''
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print(current_time)
            print("Software:\n" +wx_text+"\n")
            software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
            print(report)
            edit_once_again=''
            ev_yesno_1=''
            ev_yesno_2=''
            if __name__ == '__main__':
                app = wx.App()
                frame = MyFrame_yes_no()    
                app.MainLoop()
            app=[]; app = wx.App(None)
            del app
            wx_text=''
            if ev_yesno_1=='y':
                edit_once_again='y'
            if ev_yesno_2=='n':
                edit_once_again='n'
            print (edit_once_again)
            
            # Possibility of postictal state
#            if ds_starter[20]=='':
wx_text=nm+''', if it is possible that some of the events represent postictal state,
            push "yes", if not -"no"'''
now = datetime.now()
current_time = now.strftime("%H:%M:%S")
print(current_time)
print("Software:\n" +wx_text+"\n")
software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
print(report)
posict_ed=''
ev_yesno_1=''
ev_yesno_2=''
if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_yes_no()    
                    app.MainLoop()
app=[]; app = wx.App(None)
del app
wx_text=''
if ev_yesno_1=='y':
                    postict_ed='y'
if ev_yesno_2=='n':
                    postict_ed='n'
ds_starter[20]=postict_ed
report=ds_reporter(ictus)
jacksonian_report=Jacksonian(ictus)
report+=jacksonian_report
focality_report=Focality(ictus)
report+=focality_report
PNES_score_report=PNES_score(ictus, ds_starter)
report+=PNES_score_report
SUDEP_score_report=SUDEP_score(ictus, ds_starter)
report+=SUDEP_score_report
print(report)
#--------------------------------------------------------------------------------------------------------------------------------------
# Postictal events labeling
if ds_starter[20]=='y':
    ds_starter[23]=[0]*len(ictus)
    postictalevent=''
    while postictalevent!='0':
                wx_text=nm+''', if you want to label the reported event as postictal, 
                write the event number, which can be postictal. 
                Otherwise, write 0. At the end press this button'''
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print(current_time)
                print("Software:\n" +wx_text+"\n")
                software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
                print(report)
                if __name__ == '__main__':
                    app = wx.App()
                    frame = MyFrame_write()    
                    app.MainLoop()
                app=[]; app = wx.App(None)
                del app
                postictalevent=value
                if postictalevent!='0':                    
                   try:
                       ds_starter[23][int(postictalevent)-1]=1
                       report+='''\nThe event number '''+postictalevent+''' was labeled
as possible postictal event.
\n----------------------------------------------------------'''
                       print(report)
                   except:
                        postictalevent=''
                        print('''\aSOMETHING WRONG, PLEASE TRY AGAIN''')                    
#--------------------------------------------------------------------------------------------------------------------------    
# Final free text comment by interpreter
nm=ds_starter[0]
wx_text=nm+''', if you want to add final free text comment to the report,
                  push "yes", if not -"no"'''
now = datetime.now()
current_time = now.strftime("%H:%M:%S")
print(current_time)
print("Software:\n" +wx_text+"\n")
software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
print(report)
freetext=''
ev_yesno_1=''
ev_yesno_2=''
if __name__ == '__main__':
    app = wx.App()
    frame = MyFrame_yes_no()    
    app.MainLoop()
app=[]; app = wx.App(None)
del app
wx_text=''
if ev_yesno_1=='y':
    freetext='y'
if ev_yesno_2=='n':
    freetext='n'
print (freetext)

if freetext=='n':
    report+='''\n\nThere is no final free text comment'''
if freetext=='y':
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print(current_time)
    print('''\nSoftware:\n'''+nm+''', please, write final free text comment and, at the end press Enter\n''' )
    software_user_dialogue+='''\n'''+current_time+'''\nSoftware:\n'''+nm+'''
                    , please, write final free text comment and, at the end press Enter\n''' 
    free_text=input('\nPlease, write final free text comment and, at the end press Enter\n\n')       
    ds_starter[24]=free_text
    software_user_dialogue+='''\n'''+current_time+'''\nUser typed:'''+'''\n'''+ds_starter[24]+'''\n'''
    report+='''\n\n\t\tFINAL FREE TEXT COMMENT\n'''+ds_starter[24]
    print (report)                    
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Creation object ictus
ictal_episode=Ictal(ictus,ds_starter,report)

#import pickle, shelve

save_variable()
try:
   os.remove('ictal_episode_' + ds_starter[18]+'_draft.dat')
   print('The draft-file has been removed')
except:
   print("The drat-file doesn't exist")

ictal_episode_code=''

text_file=open("ictal_episode_code.txt", "w", encoding='utf-8')
text_file.write(ictal_episode_code)
text_file.close()

#Creation of time corrected variables and files
if ds_starter[25]!='':
    video_start_in_seconds=int(ds_starter[25][0:2])*60**2+int(ds_starter[25][2:4])\
    *60+int(ds_starter[25][4:])
    
    ictus_time_corrected=copy.copy(ictus)
    ds_starter_time_corrected=copy.copy(ds_starter)
    
    #Correction of event start time
    for i in range (0,len(ictus)):
        start_of_event_in_seconds = int(ictus[i][2][0:2])*60**2+int(ictus[i][2][2:4])\
        *60+int(ictus[i][2][4:])+video_start_in_seconds
        shniot = start_of_event_in_seconds % 60
        dakot = (start_of_event_in_seconds // 60) % 60
        shaot = (start_of_event_in_seconds // 60) // 60
        str_shniot=str(shniot)
        str_dakot=str(dakot)
        str_shaot=str(shaot)
        if len (str_shniot) == 2:
            seconds = str_shniot
        else:
            seconds = '0' + str_shniot
        if len (str_dakot) == 2:
            minutes = str_dakot
        else:
            minutes = '0' + str_dakot
        if len (str_shaot) == 2:
            hours = str_shaot
        else:
            hours = '0' + str_shaot
        ictus_time_corrected[i][2] = hours + minutes + seconds
        
    #Correction of event end time
    for i in range (0,len(ictus)):
        end_of_event_in_seconds = int(ictus[i][3][0:2])*60**2+int(ictus[i][3][2:4])\
        *60+int(ictus[i][3][4:])+video_start_in_seconds
        shniot = end_of_event_in_seconds % 60
        dakot = (end_of_event_in_seconds // 60) % 60
        shaot = (end_of_event_in_seconds // 60) // 60
        str_shniot=str(shniot)
        str_dakot=str(dakot)
        str_shaot=str(shaot)
        if len (str_shniot) == 2:
            seconds = str_shniot
        else:
            seconds = '0' + str_shniot
        if len (str_dakot) == 2:
            minutes = str_dakot
        else:
            minutes = '0' + str_dakot
        if len (str_shaot) == 2:
            hours = str_shaot
        else:
            hours = '0' + str_shaot
        ictus_time_corrected[i][3] = hours + minutes + seconds
        
    #Correction of transition time from tonic to clonic phase in GTCS    
    for i in range (0,len(ictus)):
        if ictus[i][0]==7:
            for j in range (4, len(ictus[i])):
                tonic_clonic_transition_in_seconds = int(ictus[i][j][2][0:2])*60**2+int(ictus[i][j][2][2:4])\
                *60+int(ictus[i][j][2][4:])+video_start_in_seconds
                shniot = tonic_clonic_transition_in_seconds % 60
                dakot = (tonic_clonic_transition_in_seconds // 60) % 60
                shaot = (tonic_clonic_transition_in_seconds // 60) // 60
                str_shniot=str(shniot)
                str_dakot=str(dakot)
                str_shaot=str(shaot)
                if len (str_shniot) == 2:
                    seconds = str_shniot
                else:
                    seconds = '0' + str_shniot
                if len (str_dakot) == 2:
                    minutes = str_dakot
                else:
                    minutes = '0' + str_dakot
                if len (str_shaot) == 2:
                    hours = str_shaot
                else:
                    hours = '0' + str_shaot
                ictus_time_corrected[i][j][2] = hours + minutes + seconds
                
                
     #Correction of ictal episode start           
    epistart_corrected=int(ds_starter[2][0:2])*60*60+int(ds_starter[2][2:4])*60+int(ds_starter[2][4:])\
    + video_start_in_seconds
    
    shniot = epistart_corrected % 60
    dakot = (epistart_corrected // 60) % 60
    shaot = (epistart_corrected // 60) // 60
    str_shniot=str(shniot)
    str_dakot=str(dakot)
    str_shaot=str(shaot)
    if len (str_shniot) == 2:
        seconds = str_shniot
    else:
        seconds = '0' + str_shniot
    if len (str_dakot) == 2:
        minutes = str_dakot
    else:
        minutes = '0' + str_dakot
    if len (str_shaot) == 2:
        hours = str_shaot
    else:
        hours = '0' + str_shaot
    ds_starter_time_corrected[2] = hours + minutes + seconds
    
    report_time_corrected = ds_reporter(ictus_time_corrected)

    text_file=open('ictal_episode_' + ds_starter[18] + '_time_corrected.txt', "w", encoding='utf-8')
    text_file.write(report_time_corrected)
    text_file.close() 
else:
    text_file=open('ictal_episode_' + ds_starter[18] + '.txt', "w", encoding='utf-8')
    text_file.write(report)
    text_file.close()   
    copy_text_file=open('ictal_episode_' + ds_starter[0] + '_' + ds_starter[18] + '.txt', "w", encoding='utf-8')
    copy_text_file.write(report)
    copy_text_file.close()

#input ("\nPress Enter to exit") 
wx_text=nm+''', thank you for finalizing ictal episode interpretation
Please,  push the button "Exit" to close Digital Semiology.'''
now = datetime.now()
current_time = now.strftime("%H:%M:%S")
print(current_time)
print("Software:\n" +wx_text+"\n")
software_user_dialogue+="\n"+current_time+"\nSoftware:\n" +wx_text+"\n"  
ev_exit=''
if __name__ == '__main__':
    app = wx.App()
    frame = MyFrame_exit()    
    app.MainLoop()
app=[]; app = wx.App(None)
del app
if ev_exit==1:
    sys.exit()
